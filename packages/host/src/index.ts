import * as PlasmicQuery from "@plasmicapp/query";
import * as React from "react";
import * as ReactDOM from "react-dom";
import * as jsxDevRuntime from "react/jsx-dev-runtime";
import * as jsxRuntime from "react/jsx-runtime";
import { registerRenderErrorListener, setPlasmicRootNode } from "./canvas-host";
import * as hostModule from "./exports";
import { setRepeatedElementFn } from "./repeatedElement";
// version.ts is automatically generated by `yarn build` and not committed.
import { hostVersion } from "./version";

// All exports must come from "./exports"
export * from "./exports";

const root = globalThis as any;

if (root.__Sub == null) {
  const ReactMajorVersion = parseInt(React.version.split(".")[0], 10);
  const ReactDOMClient =
    ReactMajorVersion >= 19 ? require("react-dom/client") : undefined;
  root.__Sub = {
    React,
    ReactDOM,
    ReactDOMClient,
    jsxRuntime,
    jsxDevRuntime,
    PlasmicQuery,
    hostModule,
    hostVersion,
    hostUtils: {
      setPlasmicRootNode,
      registerRenderErrorListener,
      setRepeatedElementFn,
    },

    // For backwards compatibility:
    setPlasmicRootNode,
    registerRenderErrorListener,
    setRepeatedElementFn,
    ...hostModule,
  };
} else {
  console.warn(
    `Encountered likely duplicate host version: ${root.__Sub.hostVersion} vs ${hostVersion}`
  );
  root.__Sub.duplicateHostVersions = root.__Sub.duplicateHostVersions ?? [];
  root.__Sub.duplicateHostVersions.push(hostVersion);
}
