// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import { MarkdownHintsPopoverContent } from "@/wab/client/components/comments/MarkdownHintsPopoverContent";
import { Popover } from "@/wab/client/components/plexus/Popover";
import { useShareDialog } from "@/wab/client/components/top-bar/useShareDialog";
import { useUserMentions } from "@/wab/client/components/user-mentions/useUserMentions";
import { useAppCtx } from "@/wab/client/contexts/AppContexts";
import {
  DefaultCommentPostFormProps,
  PlasmicCommentPostForm,
} from "@/wab/client/plasmic/plasmic_kit_comments/PlasmicCommentPostForm";
import { useStudioCtx } from "@/wab/client/studio-ctx/StudioCtx";
import { getSetOfVariantsForViewCtx } from "@/wab/client/studio-ctx/view-ctx";
import {
  ApiComment,
  CommentThreadId,
  RootCommentData,
  ThreadCommentData,
} from "@/wab/shared/ApiSchema";
import { ensure, spawn } from "@/wab/shared/common";
import { observer } from "mobx-react";
import * as React from "react";
import { useState } from "react";

export type CommentPostFormProps = DefaultCommentPostFormProps & {
  threadId?: CommentThreadId;
  editComment?: ApiComment;
  onCancel?: () => void;
  onSubmit?: () => void;
};

const CommentPostForm = observer(function CommentPostForm(
  props: CommentPostFormProps
) {
  const { threadId, isEditing, editComment, onSubmit, onCancel, ...rest } =
    props;
  const [value, setValue] = useState(editComment?.body || "");

  const studioCtx = useStudioCtx();

  const commentsCtx = studioCtx.commentsCtx;

  const api = useAppCtx().api;

  const inputElementId = `comment-post-input-${editComment?.id}`;

  const {
    onKeyHandler,
    onSelectHandler,
    userMentionsPopover,
    handleMentionClick,
  } = useUserMentions({
    value,
    onValueChange: setValue,
    inputSelector: `#${inputElementId}`,
  });

  const { openShareDialog } = useShareDialog();

  // Either an existing thread should be selected, or a newThreadTpl should be set.
  if (
    (!commentsCtx.openedViewCtx() || !commentsCtx.openedThreadTpl()) &&
    !threadId
  ) {
    return null;
  }

  function isValidComment() {
    return (
      value.trim().length > 0 || value.trim() !== editComment?.body?.trim()
    );
  }

  const handleAddComment = async () => {
    setValue("");
    if (threadId) {
      const commentData: ThreadCommentData = { body: value };
      await api.postThreadComment(
        commentsCtx.projectId(),
        commentsCtx.branchId(),
        threadId,
        commentData
      );
    } else {
      const location = {
        subject: commentsCtx
          .bundler()
          .addrOf(ensure(commentsCtx.openedThreadTpl(), "")),
        variants: getSetOfVariantsForViewCtx(
          ensure(commentsCtx.openedViewCtx(), ""),
          commentsCtx.bundler()
        ).map((pv) => commentsCtx.bundler().addrOf(pv)),
      };
      const commentData: RootCommentData = {
        body: value,
        location,
      };
      await api.postRootComment(
        commentsCtx.projectId(),
        commentsCtx.branchId(),
        commentData
      );
      commentsCtx.closeCommentDialogs();
    }
    onSubmit?.();
  };

  const handleEditComment = async (updatedComment?: ApiComment) => {
    if (updatedComment && value.trim() !== updatedComment.body.trim()) {
      spawn(
        api.editComment(
          commentsCtx.projectId(),
          commentsCtx.branchId(),
          updatedComment.id,
          {
            body: value.trim(),
          }
        )
      );
    }
    onSubmit?.();
    setValue("");
  };

  return (
    <>
      <PlasmicCommentPostForm
        {...rest}
        isEditing={isEditing}
        bodyInput={{
          autoComplete: "off",
          placeholder: "Add a comment",
          textAreaInput: {
            id: inputElementId,
            rows: 5,
            type: "soft",
          },
          value,
          onChange: (val) => {
            if (val === undefined) {
              // Plexus Input triggers onChange with undefined on first render even if we pass a controlled value
              setValue(isEditing ? editComment?.body || "" : "");
            } else {
              setValue(val);
            }
          },
          onKeyDown: onKeyHandler,
          onSelect: onSelectHandler,
        }}
        submitButton={{
          onClick: async () => {
            if (isEditing) {
              spawn(handleEditComment(editComment));
            } else {
              spawn(handleAddComment());
            }
          },
          disabled: !isValidComment(),
        }}
        cancelButton={{
          onClick: () => {
            onCancel?.();
          },
        }}
        markdownHintsIcon={{
          render: (iconProps, HintIconComponent) => {
            return (
              <Popover
                trigger={<HintIconComponent {...iconProps} />}
                content={<MarkdownHintsPopoverContent />}
                offset={0}
                placement={"bottom"}
              />
            );
          },
        }}
        mentionIcon={{
          onClick: () => {
            handleMentionClick();
          },
        }}
        shareProjectIcon={{
          onClick: () => {
            openShareDialog();
          },
        }}
      />
      {userMentionsPopover}
    </>
  );
});

export default CommentPostForm;
