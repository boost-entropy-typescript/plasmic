// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import { Dropdown, Menu } from "antd";

import RootComment from "@/wab/client/components/comments/RootComment";
import { getThreadsFromFocusedComponent } from "@/wab/client/components/comments/utils";
import { useViewCtxMaybe } from "@/wab/client/contexts/StudioContexts";
import {
  DefaultCommentsTabProps,
  PlasmicCommentsTab,
} from "@/wab/client/plasmic/plasmic_kit_comments/PlasmicCommentsTab";
import { useStudioCtx } from "@/wab/client/studio-ctx/StudioCtx";
import { ensure } from "@/wab/shared/common";
import { isTplNamable, summarizeTplNamable } from "@/wab/shared/core/tpls";
import { observer } from "mobx-react";
import * as React from "react";

export const DEFAULT_NOTIFICATION_LEVEL = "mentions-and-replies";
export const notifyAboutKeyToLabel = {
  all: "All comments",
  "mentions-and-replies": "Replies only",
  none: "None",
} as const;

export type CommentsTabProps = DefaultCommentsTabProps;

export const CommentsTab = observer(function CommentsTab(
  props: CommentsTabProps
) {
  const studioCtx = useStudioCtx();
  const viewCtx = useViewCtxMaybe();

  let focusedTpl = viewCtx?.focusedTpl();
  if (!isTplNamable(focusedTpl)) {
    focusedTpl = null;
  }

  const currentComponent = studioCtx.currentComponent;

  const commentsCtx = studioCtx.commentsCtx;

  if (!currentComponent) {
    return null;
  }

  const {
    focusedSubjectThreads,
    focusedComponentThreads,
    otherComponentsThreads,
  } = getThreadsFromFocusedComponent(
    commentsCtx.computedData().allThreads,
    currentComponent,
    focusedTpl
  );

  // We have the focused element threads together, with the focused subject threads first
  const currentFocusThreads = [
    ...focusedSubjectThreads,
    ...focusedComponentThreads,
  ];

  const projectId = studioCtx.siteInfo.id;
  const branchId = studioCtx.branchInfo()?.id;

  const currentNotificationLevel =
    commentsCtx.selfNotificationSettings()?.notifyAbout ??
    DEFAULT_NOTIFICATION_LEVEL;

  const openViewCtx = commentsCtx.openViewCtx();

  return (
    <div
      className={"comments-tab flex-even"}
      style={{
        overflow: "scroll",
      }}
    >
      <PlasmicCommentsTab
        {...props}
        emptySelection={!focusedTpl}
        notificationsButton={{
          props: {
            children: `Notifications: ${notifyAboutKeyToLabel[currentNotificationLevel]}`,
          },
          wrap: (node) => (
            <Dropdown
              overlay={
                <Menu selectedKeys={[currentNotificationLevel]}>
                  <Menu.ItemGroup title={"Notify me about"}>
                    {Object.entries(notifyAboutKeyToLabel).map(
                      ([key, label]) => (
                        <Menu.Item
                          key={key}
                          onClick={async () => {
                            await studioCtx.appCtx.api.updateNotificationSettings(
                              projectId,
                              branchId,
                              {
                                ...commentsCtx.selfNotificationSettings(),
                                notifyAbout: key as any,
                              }
                            );
                            await commentsCtx.fetchComments();
                          }}
                        >
                          {label}
                        </Menu.Item>
                      )
                    )}
                  </Menu.ItemGroup>
                </Menu>
              }
            >
              {node}
            </Dropdown>
          ),
        }}
        currentlySelectedTitle={{
          wrap: focusedTpl ? (it) => it : () => null,
        }}
        currentlySelectedSubject={{
          children:
            focusedTpl && openViewCtx
              ? summarizeTplNamable(
                  focusedTpl,
                  openViewCtx.effectiveCurrentVariantSetting(focusedTpl).rsh()
                )
              : undefined,
        }}
        currentlySelectedPrefix={
          currentFocusThreads.length > 0
            ? {}
            : { children: "Comment on selected" }
        }
        currentThreadsList={{
          children: currentFocusThreads.map((threadComment) => (
            <RootComment
              commentThread={threadComment}
              onThreadSelect={(threadId) =>
                commentsCtx.openCommentThreadDialog(
                  ensure(viewCtx, ""),
                  threadId
                )
              }
            />
          )),
        }}
        restThreadsSection={{
          wrap: (node) => otherComponentsThreads.length > 0 && node,
        }}
        restThreadsList={{
          children: otherComponentsThreads.map((commentThread) => (
            <RootComment
              commentThread={commentThread}
              onThreadSelect={(threadId) =>
                commentsCtx.openCommentThreadDialog(
                  ensure(viewCtx, ""),
                  threadId
                )
              }
            />
          )),
        }}
      />
    </div>
  );
});

export default CommentsTab;
