// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import {
  DefaultThreadCommentsDialogProps,
  PlasmicThreadCommentsDialog,
} from "@/wab/client/plasmic/plasmic_kit_comments/PlasmicThreadCommentsDialog";
import { useStudioCtx } from "@/wab/client/studio-ctx/StudioCtx";
import { summarizeTpl } from "@/wab/shared/core/tpls";
import { observer } from "mobx-react";
import * as React from "react";

// Your component props start with props for variants and slots you defined
// in Plasmic, but you can add more here, like event handlers that you can
// attach to named nodes in your component.
//
// If you don't want to expose certain variants or slots as a prop, you can use
// Omit to hide them:
//
// interface ThreadCommentsDialogProps extends Omit<DefaultThreadCommentsDialogProps, "hideProps1"|"hideProp2"> {
//   // etc.
// }
//
// You can also stop extending from DefaultThreadCommentsDialogProps altogether and have
// total control over the props for your component.
export type ThreadCommentsDialogProps = DefaultThreadCommentsDialogProps;

export const ThreadCommentsDialog = observer(function ThreadCommentsDialog(
  props: ThreadCommentsDialogProps
) {
  // Use PlasmicThreadCommentsDialog to render this component as it was
  // designed in Plasmic, by activating the appropriate variants,
  // attaching the appropriate event handlers, etc.  You
  // can also install whatever React hooks you need here to manage state or
  // fetch data.
  //
  // Props you can pass into PlasmicThreadCommentsDialog are:
  // 1. Variants you want to activate,
  // 2. Contents for slots you want to fill,
  // 3. Overrides for any named node in the component to attach behavior and data,
  // 4. Props to set on the root node.
  //
  // By default, we are just piping all ThreadCommentsDialogProps here, but feel free
  // to do whatever works for you.

  const studioCtx = useStudioCtx();

  const commentsCtx = studioCtx.commentsCtx;
  const viewCtx = commentsCtx.openedViewCtx();

  const selectedThread = React.useMemo(
    () =>
      commentsCtx
        .computedData()
        .allThreads.find((t) => t.id === commentsCtx.openedThreadId()),
    [commentsCtx.computedData().allThreads, commentsCtx.openedThreadId()]
  );

  const focusedTpl = selectedThread?.subject;

  if (!focusedTpl || !viewCtx) {
    return null;
  }

  return (
    <div className="CommentDialog">
      <PlasmicThreadCommentsDialog
        commentsDialogHead={{
          close: {
            onClick: () => commentsCtx.closeCommentDialogs(),
          },
          name: {
            children: focusedTpl.name || "unnamed",
          },
          type: {
            children: summarizeTpl(
              focusedTpl,
              viewCtx.effectiveCurrentVariantSetting(focusedTpl).rsh()
            ),
          },
        }}
        threadComments={{
          commentThread: selectedThread,
        }}
        {...props}
      />
    </div>
  );
});
