// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import { apiKey } from "@/wab/client/api";
import { TplCommentThread } from "@/wab/client/components/comments/utils";
import { useAppCtx } from "@/wab/client/contexts/AppContexts";
import {
  DefaultThreadHistoryStatusProps,
  PlasmicThreadHistoryStatus,
} from "@/wab/client/plasmic/plasmic_kit_comments/PlasmicThreadHistoryStatus";
import { useStudioCtx } from "@/wab/client/studio-ctx/StudioCtx";
import { CommentThreadId, ThreadHistoryId } from "@/wab/shared/ApiSchema";
import { mkUuid } from "@/wab/shared/common";
import { HTMLElementRefOf } from "@plasmicapp/react-web";
import * as React from "react";
import useSWRMutation from "swr/mutation";

export interface ThreadHistoryStatusProps
  extends DefaultThreadHistoryStatusProps {
  commentThread?: TplCommentThread;
}

function ThreadHistoryStatus_(
  props: ThreadHistoryStatusProps,
  ref: HTMLElementRefOf<"div">
) {
  const { commentThread, ...rest } = props;

  const studioCtx = useStudioCtx();
  const appCtx = useAppCtx();
  const api = appCtx.api;
  const commentsCtx = studioCtx.commentsCtx;

  const { trigger, isMutating } = useSWRMutation(
    commentThread
      ? apiKey(
          `editThread`,
          commentsCtx.projectId(),
          commentsCtx.branchId(),
          commentThread.id,
          {
            id: mkUuid() as ThreadHistoryId,
            resolved: !commentThread?.resolved,
          }
        )
      : null,
    async (_url, { arg }: { arg: CommentThreadId }) => {
      await api.editThread(
        commentsCtx.projectId(),
        commentsCtx.branchId(),
        arg,
        {
          id: mkUuid() as ThreadHistoryId,
          resolved: !commentThread?.resolved,
        }
      );
    }
  );

  if (!commentThread) {
    return null;
  }

  return (
    <PlasmicThreadHistoryStatus
      root={{ ref }}
      {...rest}
      status={{
        onClick: async (e) => {
          e.stopPropagation();
          await trigger(commentThread.id);
        },
      }}
      isLoading={isMutating}
      resolved={commentThread.resolved}
    />
  );
}

export const ThreadHistoryStatus = React.forwardRef(ThreadHistoryStatus_);
