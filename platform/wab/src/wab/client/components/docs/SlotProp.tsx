import { ensureKnownTplTag } from "../../../classes";
// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import { observer } from "mobx-react-lite";
import * as React from "react";
import { TplSlot } from "../../../classes";
import { ensure } from "../../../common";
import { toVarName } from "../../../shared/codegen/util";
import { isPlainTextTplSlot } from "../../../shared/SlotUtils";
import { tryGetBaseVariantSetting } from "../../../shared/Variants";
import { getRichTextContent } from "../../../tpls";
import CloseIcon from "../../plasmic/plasmic_kit/PlasmicIcon__Close";
import { PlasmicSlotProp } from "../../plasmic/plasmic_kit_docs_portal/PlasmicSlotProp";
import { Icon } from "../widgets/Icon";
import IconButton from "../widgets/IconButton";
import Textbox from "../widgets/Textbox";
import { DocsPortalCtx } from "./DocsPortalCtx";

interface SlotPropProps {
  docsCtx: DocsPortalCtx;
  slot: TplSlot;
}

const SlotProp = observer(function SlotProp(props: SlotPropProps) {
  const { docsCtx, slot } = props;
  const param = slot.param;
  const name = toVarName(param.variable.name);
  const component = docsCtx.getFocusedComponent();
  const isText = isPlainTextTplSlot(slot);
  const value = docsCtx.getComponentToggle(component, param) as
    | string
    | undefined;
  return (
    <PlasmicSlotProp label={name} isNonText={!isText}>
      {isText && (
        <Textbox
          placeholder={getDefaultText(slot)}
          value={value ?? ""}
          onChange={(e) =>
            docsCtx.setComponentToggle(component, param, e.target.value)
          }
          withIcons={["withSuffix"]}
          suffixIcon={
            !!value && (
              <IconButton
                type="seamless"
                onClick={() =>
                  docsCtx.setComponentToggle(component, param, undefined)
                }
              >
                <Icon icon={CloseIcon} />
              </IconButton>
            )
          }
          styleType={"bordered"}
        />
      )}
    </PlasmicSlotProp>
  );
});

function getDefaultText(slot: TplSlot) {
  const textNode = ensureKnownTplTag(slot.defaultContents[0]);
  const vs = ensure(tryGetBaseVariantSetting(textNode));
  return vs.text ? getRichTextContent(vs.text) : "";
}

export default SlotProp;
