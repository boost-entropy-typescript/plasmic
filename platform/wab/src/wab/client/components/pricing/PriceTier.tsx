// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import { HTMLElementRefOf } from "@plasmicapp/react-web";
import * as React from "react";
import { assertNever } from "../../../common";
import { ApiFeatureTier, BillingFrequency } from "../../../shared/ApiSchema";
import {
  getNewPriceTierType,
  getPriceTierType,
} from "../../../shared/pricing/pricing-utils";
import {
  DefaultPriceTierProps,
  PlasmicPriceTier,
  PlasmicPriceTier__VariantsArgs,
} from "../../plasmic/plasmic_kit_pricing/PlasmicPriceTier";

export type PriceTierStatus = PlasmicPriceTier__VariantsArgs["status"];

/**
 * Just return the `price` and `subprice` slot contents
 * @param tier
 * @param billingFreq
 */
const getPriceSlots = (
  tier?: ApiFeatureTier,
  maybeBillingFreq?: BillingFrequency,
  isLegacy?: boolean
) => {
  const tierType = isLegacy
    ? getPriceTierType(tier?.name)
    : getNewPriceTierType(tier?.name);
  const billingFreq = maybeBillingFreq ?? "month";

  if (!tier || tierType === "free") {
    return {
      price: "$0",
    };
  } else if (tierType === "enterprise") {
    return {
      price: "Custom",
    };
  }

  const minUsers = Math.max(1, tier.minUsers);
  // Legacy pricing do not include the minimum seats in the base price,
  // this is why we need to increase the price by this amount.
  if (billingFreq === "month") {
    const recurringPrice = tier.monthlyBasePrice ?? 0;
    const minimumSeats = isLegacy ? minUsers * tier.monthlySeatPrice : 0;
    return {
      price: `$${recurringPrice + minimumSeats}`,
    };
  } else if (billingFreq === "year") {
    const recurringPrice = tier.annualBasePrice ?? 0;
    const minimumSeats = isLegacy ? minUsers * tier.annualSeatPrice : 0;
    const monthlyEquivalentPrice = (recurringPrice + minimumSeats) / 12;
    return {
      price: `$${monthlyEquivalentPrice}`,
    };
  } else {
    assertNever(billingFreq);
  }
};

export interface PriceTierProps extends DefaultPriceTierProps {
  // Feature tier to show. Get the type and price from this
  // If undefined, then assume free tier
  featureTier?: ApiFeatureTier;
  // Determines the text in the action button
  status?: PriceTierStatus;
  // month or year
  billingFrequency?: BillingFrequency;
  isLegacy?: boolean;
  hide?: boolean;
  onClick?: () => Promise<void>;
}

function NewPriceTier_(props: PriceTierProps, ref: HTMLElementRefOf<"div">) {
  const {
    featureTier,
    status,
    billingFrequency,
    isLegacy,
    hide,
    onClick,
    ...rest
  } = props;
  return (
    <PlasmicPriceTier
      {...rest}
      {...getPriceSlots(featureTier, billingFrequency, isLegacy)}
      status={status}
      tier={getNewPriceTierType(featureTier?.name)}
      normalButton={{
        onClick,
      }}
      root={{
        ref,
        props: {
          style: {
            ...(hide ? { display: "none" } : {}),
          },
        },
      }}
    />
  );
}

const NewPriceTier = React.forwardRef(NewPriceTier_);
export default NewPriceTier;
