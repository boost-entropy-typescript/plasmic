// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import classNames from "classnames";
import * as React from "react";
import { DraggableProvidedDragHandleProps } from "react-beautiful-dnd";
import { StyleToken } from "../../../classes";
import { DEVFLAGS } from "../../../devflags";
import { TokenResolver } from "../../../shared/cached-selectors";
import Chroma from "../../../shared/utils/color-utils";
import { VariantedStylesHelper } from "../../../shared/VariantedStylesHelper";
import { PlasmicColorTokenControl } from "../../plasmic/plasmic_kit_left_pane/PlasmicColorTokenControl";
import { StudioCtx } from "../../studio-ctx/StudioCtx";
import { ColorSwatch } from "../style-controls/ColorSwatch";
import { TokenDefinedIndicator } from "../style-controls/TokenDefinedIndicator";
import { Matcher } from "../view-common";

interface ColorTokenControlProps {
  studioCtx: StudioCtx;
  token: StyleToken;
  readOnly?: boolean;
  matcher: Matcher;
  menu: () => React.ReactElement;
  isDragging?: boolean;
  dragHandleProps?: DraggableProvidedDragHandleProps;
  onClick?: () => void;
  resolver: TokenResolver;
  vsh?: VariantedStylesHelper;
}

function ColorTokenControl(props: ColorTokenControlProps) {
  const {
    studioCtx,
    token,
    readOnly,
    matcher,
    menu,
    isDragging,
    dragHandleProps,
    onClick,
    resolver,
    vsh,
  } = props;
  return (
    <>
      <PlasmicColorTokenControl
        icon={
          <>
            {DEVFLAGS.variantedStyles && vsh && (
              <TokenDefinedIndicator
                token={token}
                vsh={vsh}
                studioCtx={studioCtx}
                className={classNames("mr-sm")}
              />
            )}
            <ColorSwatch color={resolver(token, vsh)} />
          </>
        }
        value={matcher.boldSnippets(Chroma.stringify(resolver(token, vsh)))}
        isDraggable={!readOnly}
        isDragging={isDragging}
        listItem={{
          dragHandleProps,
          menu,
          onClick,
        }}
      >
        {matcher.boldSnippets(token.name)}
      </PlasmicColorTokenControl>
    </>
  );
}

export default ColorTokenControl;
