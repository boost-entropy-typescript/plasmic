// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import ListSectionHeader from "@/wab/client/components/ListSectionHeader";
import {
  RenderElementProps,
  VirtualTree,
} from "@/wab/client/components/grouping/VirtualTree";
import { ComponentRow } from "@/wab/client/components/sidebar/ComponentRow";
import { PlasmicLeftComponentsPanel } from "@/wab/client/plasmic/plasmic_kit_left_pane/PlasmicLeftComponentsPanel";
import { useStudioCtx } from "@/wab/client/studio-ctx/StudioCtx";
import { isBuiltinCodeComponent } from "@/wab/shared/code-components/builtin-code-components";
import { isNonNil } from "@/wab/shared/common";
import {
  getComponentDisplayName,
  isCodeComponent,
  isContextCodeComponent,
  isHostLessCodeComponent,
  isPageComponent,
  isReusableComponent,
  isShownHostLessCodeComponent,
  sortComponentsByName,
} from "@/wab/shared/core/components";
import { isHostLessPackage } from "@/wab/shared/core/sites";
import { isCoreTeamEmail } from "@/wab/shared/devflag-utils";
import { Component, ProjectDependency } from "@/wab/shared/model/classes";
import { debounce, orderBy } from "lodash";
import { observer } from "mobx-react";
import * as React from "react";

interface Folder {
  type: "folder";
  name: string;
  key: string;
  items: ComponentPanelRow[];
}

interface ComponentData {
  type: "component";
  key: string;
  component: Component;
  readOnly: boolean;
  importedFrom?: string;
}

type ComponentPanelRow = Folder | ComponentData;

const LeftComponentsPanel = observer(function LeftComponentsPanel() {
  const studioCtx = useStudioCtx();
  const [debouncedQuery, setDebouncedQuery] = React.useState("");
  const debouncedSetQuery = React.useCallback(
    debounce((value: string) => {
      setDebouncedQuery(value);
    }, 500),
    [setDebouncedQuery]
  );
  const getRowKey = React.useCallback((row: ComponentPanelRow) => {
    return row.key;
  }, []);
  const getRowChildren = React.useCallback((row: ComponentPanelRow) => {
    if (row.type === "component") {
      return [];
    }
    return row.items;
  }, []);
  const getRowSearchText = React.useCallback((row: ComponentPanelRow) => {
    if (row.type === "component") {
      return getComponentDisplayName(row.component);
    }
    return row.name;
  }, []);
  const getRowHeight = React.useCallback((row: ComponentPanelRow) => {
    if (row.type === "component") {
      return 32;
    }
    return 50;
  }, []);

  const readOnly = studioCtx.getLeftTabPermission("components") === "readable";

  const isAdmin = isCoreTeamEmail(
    studioCtx.appCtx.selfInfo?.email,
    studioCtx.appCtx.appConfig
  );

  const makeCompsItems = (
    comps: Component[],
    dep?: ProjectDependency
  ): ComponentPanelRow[] => {
    comps = comps.filter(
      (comp) =>
        isReusableComponent(comp) &&
        !isBuiltinCodeComponent(comp) &&
        !isContextCodeComponent(comp) &&
        (!isHostLessCodeComponent(comp) ||
          isShownHostLessCodeComponent(
            comp,
            studioCtx.appCtx.appConfig.hostLessComponents
          ))
    );
    comps = sortComponentsByName(comps);
    return comps.map((comp) => ({
      type: "component" as const,
      key: comp.uuid,
      component: comp,
      readOnly: readOnly,
      importedFrom: dep?.projectId,
    }));
  };

  const makeDepsItems = (deps: ProjectDependency[]): ComponentPanelRow[] => {
    deps = orderBy(deps, (dep) =>
      studioCtx.projectDependencyManager.getNiceDepName(dep)
    );
    return deps.map((dep) => ({
      type: "folder" as const,
      name: `Imported from "${studioCtx.projectDependencyManager.getNiceDepName(
        dep
      )}"`,
      key: dep.uuid,
      // For deps, we only show code components from hostless packages; for non-hostless
      // packages, ony the code components from the current host page count, and they're
      // shown in the Code components section
      items: makeCompsItems(
        dep.site.components.filter(
          (c) =>
            isReusableComponent(c) &&
            (isHostLessPackage(dep.site) || !isCodeComponent(c))
        ),
        dep
      ),
    }));
  };

  const plainComponents = studioCtx.site.components.filter(
    (c) => isReusableComponent(c) && !isCodeComponent(c)
  );
  const codeComponents = studioCtx.site.components.filter(
    (c) =>
      isReusableComponent(c) &&
      isCodeComponent(c) &&
      !isHostLessCodeComponent(c)
  );
  const items: ComponentPanelRow[] = [
    ...makeCompsItems(plainComponents),
    ...(codeComponents.length > 0
      ? [
          {
            type: "folder" as const,
            name: "Code components",
            key: `$code-components-folder`,
            items: makeCompsItems(codeComponents),
          },
        ]
      : []),
    // Show non-hostless packages first, then hostless packages
    ...makeDepsItems(
      studioCtx.site.projectDependencies.filter(
        (d) => !isHostLessPackage(d.site)
      )
    ),
    ...makeDepsItems(
      studioCtx.site.projectDependencies.filter((d) =>
        isHostLessPackage(d.site)
      )
    ),
    ...(isAdmin
      ? studioCtx.site.projectDependencies
          .filter((d) => !isHostLessPackage(d.site))
          .map((dep) => {
            const pageComponents = sortComponentsByName(dep.site.components)
              .filter((c) => isPageComponent(c))
              .map((comp) => ({
                type: "component" as const,
                component: comp,
                key: comp.uuid,
                importedFrom: dep.projectId,
                readOnly: readOnly,
              }));
            if (pageComponents.length === 0) {
              return undefined;
            }
            return {
              type: "folder" as const,
              name: `PAGES FROM ${dep.name} (DO NOT USE)`,
              key: `$pages-${dep.uuid}`,
              // For deps, we only show code components from hostless packages; for non-hostless
              // packages, ony the code components from the current host page count, and they're
              // shown in the Code components section
              items: pageComponents,
            };
          })
          .filter(isNonNil)
      : []),
  ];

  return (
    <PlasmicLeftComponentsPanel
      root={{
        props: {
          "data-test-id": "components-tab",
        } as any,
      }}
      leftSearchPanel={{
        searchboxProps: {
          onChange: (e) => {
            debouncedSetQuery(e.target.value);
          },
          autoFocus: true,
        },
        hasFilter: false,
      }}
      newComponentButton={
        readOnly
          ? { render: () => null }
          : {
              onClick: () => studioCtx.siteOps().createFrameForNewComponent(),
            }
      }
      content={
        <>
          <VirtualTree
            rootNodes={items}
            getNodeKey={getRowKey}
            getNodeChildren={getRowChildren}
            getNodeSearchText={getRowSearchText}
            getNodeHeight={getRowHeight}
            query={debouncedQuery}
            renderElement={ComponentTreeRow}
          />
        </>
      }
    />
  );
});

const ComponentTreeRow = (props: RenderElementProps<ComponentPanelRow>) => {
  const { value, treeState } = props;
  if (value.type === "folder") {
    return (
      <ListSectionHeader
        className={value.items.length > 0 ? "pointer" : undefined}
        collapseState={!treeState.isOpen ? "collapsed" : "expanded"}
      >
        {treeState.matcher.boldSnippets(value.name)}
      </ListSectionHeader>
    );
  }
  return (
    <ComponentRow
      component={value.component}
      readOnly={value.readOnly}
      importedFrom={value.importedFrom}
      matcher={treeState.matcher}
    />
  );
};

export default LeftComponentsPanel;
