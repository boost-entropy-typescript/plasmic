// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import { useTokenControls } from "@/wab/client/components/sidebar/token-controls";
import PlasmicTokenTypeHeader, {
  DefaultTokenTypeHeaderProps,
} from "@/wab/client/plasmic/plasmic_kit_left_pane/PlasmicTokenTypeHeader";
import { useStudioCtx } from "@/wab/client/studio-ctx/StudioCtx";
import { TokenType, tokenTypeLabel } from "@/wab/commons/StyleToken";
import { spawn } from "@/wab/shared/common";
import { canCreateAlias } from "@/wab/shared/ui-config-utils";
import * as React from "react";

interface TokenTypeHeaderProps extends DefaultTokenTypeHeaderProps {
  tokenType: TokenType;
  isExpanded?: boolean;
  toggleExpand: () => void;
}

function TokenTypeHeader(props: TokenTypeHeaderProps) {
  const { isExpanded, tokenType, toggleExpand, ...rest } = props;
  const studioCtx = useStudioCtx();
  const tokenControls = useTokenControls();

  const uiConfig = studioCtx.getCurrentUiConfig();
  const canCreateToken = canCreateAlias(uiConfig, "token");

  const readOnly =
    !canCreateToken || studioCtx.getLeftTabPermission("tokens") === "readable";

  const borders = [
    ...(tokenType === TokenType.Spacing || isExpanded
      ? ["bottom" as const]
      : []),
    ...(tokenType !== TokenType.Color ? ["top" as const] : []),
  ];

  return (
    <PlasmicTokenTypeHeader
      tokenType={tokenTypeLabel(tokenType)}
      addButton={
        readOnly
          ? { render: () => null }
          : {
              props: {
                onClick: (e) => {
                  e.stopPropagation();
                  if (!isExpanded) {
                    toggleExpand();
                  }
                  spawn(tokenControls.onAdd(tokenType));
                },
              },
            }
      }
      isExpanded={isExpanded}
      border={borders}
      {...rest}
    />
  );
}

export default TokenTypeHeader;
