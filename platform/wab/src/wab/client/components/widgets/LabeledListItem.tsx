// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import { HTMLElementRefOf } from "@plasmicapp/react-web";
import * as React from "react";
import { swallowClick } from "../../../commons/components/ReactUtil";
import {
  DefaultLabeledListItemProps,
  PlasmicLabeledListItem,
} from "../../plasmic/plasmic_kit_new_design_system_former_style_controls/PlasmicLabeledListItem";
import { MenuMaker } from "../widgets";

export interface LabeledListItemProps
  extends Omit<
    DefaultLabeledListItemProps,
    "clickable" | "withMenu" | "onClick" | "withIndicator"
  > {
  menu?: React.ReactNode | MenuMaker;
  noMenuButton?: boolean;
  onClick?: (event: React.MouseEvent) => void;
  onDelete?: (event: React.MouseEvent) => void;
  onContextMenu?: (event: React.MouseEvent) => void;
  indicator?: React.ReactNode | true;
  "data-test-id"?: string;
}

function LabeledListItem_(
  props: LabeledListItemProps,
  ref: HTMLElementRefOf<"div">
) {
  const {
    menu,
    noMenuButton,
    onClick,
    onDelete,
    onContextMenu,
    indicator,
    "data-test-id": dataTestId,
    ...rest
  } = props;
  const hasActions =
    !!onClick ||
    (!noMenuButton && menu) ||
    !!onDelete ||
    rest.moreActionButtons;
  return (
    <PlasmicLabeledListItem
      root={{
        ref,
        onClick,
        onContextMenu,
        "data-plasmic-role": "labeled-item",
        "data-test-id": dataTestId,
      }}
      {...rest}
      withMenu={!!menu}
      clickable={!!onClick}
      menuButton={
        menu
          ? {
              props: {
                menu,
              },
            }
          : undefined
      }
      deletable={!!onDelete}
      deleteButton={onDelete ? { onClick: onDelete } : undefined}
      indicatorContainer={
        indicator && typeof indicator === "object"
          ? {
              children: indicator,
            }
          : undefined
      }
      withIndicator={!!indicator}
      actionsContainer={
        hasActions
          ? {
              onClick: swallowClick,
            }
          : { style: { display: "none" } }
      }
    />
  );
}

export const LabeledListItem = React.forwardRef(LabeledListItem_);
export default LabeledListItem;
