// This is a skeleton starter React component generated by Plasmic.
// Feel free to edit as you see fit.
import React from "react";
import { mergeProps } from "react-aria";
import { maybe } from "../../../common";
import {
  createFakeEvent,
  useForwardedRef,
} from "../../../commons/components/ReactUtil";
import { useFocusOnDisplayed } from "../../dom-utils";
import { CloseIcon } from "../../plasmic/plasmic_kit/PlasmicIcon__Close";
import { PlasmicSearchbox } from "../../plasmic/plasmic_kit/PlasmicSearchbox";
import { Icon } from "./Icon";
import { IconButton } from "./IconButton";
import Textbox, { TextboxRef } from "./Textbox";

type SearchboxProps = Omit<
  React.ComponentProps<typeof Textbox>,
  "prefixIcon" | "suffixIcon"
>;

const Searchbox = React.forwardRef(function Searchbox(
  props: SearchboxProps,
  outerRef: React.Ref<TextboxRef>
) {
  const { ref, onRef } = useForwardedRef(outerRef);

  const getInput = React.useCallback(
    () => maybe(ref.current, (x) => x.input()),
    [ref]
  );

  useFocusOnDisplayed(getInput, props.autoFocus);

  const resetInput = (e: React.SyntheticEvent) => {
    if (ref.current) {
      ref.current.setValue("");
      if (props.onChange) {
        // Copied from antd's "antd/lib/input/Input.resolveOnChange"
        // Fakes a ChangeEvent with value ""
        const input = ref.current.input();
        const fakeEvent = createFakeEvent<React.ChangeEvent<HTMLInputElement>>(
          e,
          input
        );

        const originalInputValue = input.value;
        input.value = "";
        props.onChange && props.onChange(fakeEvent);
        input.value = originalInputValue;
      }
    }
  };
  return (
    <PlasmicSearchbox
      root={{
        // className prop needs to be piped to the root element of this component
        props: mergeProps(props, {
          className: props.className,
          ref: onRef,
          onKeyDown: (e) => {
            if (e.key === "Escape") {
              resetInput(e);
            }
          },
          suffixIcon: !!props.value && `${props.value}`.trim().length > 0 && (
            <IconButton
              type="seamless"
              onClick={(e) => resetInput(e)}
              tabIndex={-1}
            >
              <Icon icon={CloseIcon} />
            </IconButton>
          ),
        }),
      }}
    />
  );
});

export default Searchbox as React.FunctionComponent<SearchboxProps>;
