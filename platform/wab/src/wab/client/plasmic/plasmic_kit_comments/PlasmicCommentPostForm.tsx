// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: BP7V3EkXPURJVwwMyWoHn
// Component: qi3Y1X2qZ7
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import Textbox from "../../components/widgets/Textbox"; // plasmic-import: pA22NEzDCsn_/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "./plasmic_plasmic_kit_comments.module.css"; // plasmic-import: BP7V3EkXPURJVwwMyWoHn/projectcss
import sty from "./PlasmicCommentPostForm.module.css"; // plasmic-import: qi3Y1X2qZ7/css

import SearchsvgIcon from "../q_4_icons/icons/PlasmicIcon__Searchsvg"; // plasmic-import: R5DLz11OA/icon
import ClosesvgIcon from "../q_4_icons/icons/PlasmicIcon__Closesvg"; // plasmic-import: DhvEHyCHT/icon
import ArrowRightsvgIcon from "../q_4_icons/icons/PlasmicIcon__ArrowRightsvg"; // plasmic-import: 9Jv8jb253/icon
import ChevronDownsvgIcon from "../q_4_icons/icons/PlasmicIcon__ChevronDownsvg"; // plasmic-import: xZrB9_0ir/icon

export type PlasmicCommentPostForm__VariantMembers = {
  initial: "initial";
};

export type PlasmicCommentPostForm__VariantsArgs = {
  initial?: SingleBooleanChoiceArg<"initial">;
};

type VariantPropType = keyof PlasmicCommentPostForm__VariantsArgs;
export const PlasmicCommentPostForm__VariantProps = new Array<VariantPropType>(
  "initial"
);

export type PlasmicCommentPostForm__ArgsType = {};
type ArgPropType = keyof PlasmicCommentPostForm__ArgsType;
export const PlasmicCommentPostForm__ArgProps = new Array<ArgPropType>();

export type PlasmicCommentPostForm__OverridesType = {
  root?: p.Flex<"div">;
  bodyInput?: p.Flex<typeof Textbox>;
  submitButton?: p.Flex<typeof Button>;
};

export interface DefaultCommentPostFormProps {
  initial?: SingleBooleanChoiceArg<"initial">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicCommentPostForm__RenderFunc(props: {
  variants: PlasmicCommentPostForm__VariantsArgs;
  args: PlasmicCommentPostForm__ArgsType;
  overrides: PlasmicCommentPostForm__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),

    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "initial",
        type: "private",
        variableType: "variant",
        initFunc: true ? ($props, $state, $ctx) => $props.initial : undefined,
      },
    ],

    [$props, $ctx]
  );

  const $state = p.useDollarState(stateSpecs, $props, $ctx);

  const [$queries, setDollarQueries] = React.useState({});

  return (
    true ? (
      <p.Stack
        as={"div"}
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          plasmic_plasmic_kit_design_system_css.plasmic_tokens,
          plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
          sty.root,
          { [sty.rootinitial]: hasVariant($state, "initial", "initial") }
        )}
      >
        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__njtN0)}>
            <Textbox
              data-plasmic-name={"bodyInput"}
              data-plasmic-override={overrides.bodyInput}
              className={classNames("__wab_instance", sty.bodyInput, {
                [sty.bodyInputinitial]: hasVariant(
                  $state,
                  "initial",
                  "initial"
                ),
              })}
              placeholder={"Add a comment..." as const}
              styleType={["autoheight", "gray"]}
            />

            {(hasVariant($state, "initial", "initial") ? true : true) ? (
              <div
                className={classNames(projectcss.all, sty.freeBox__ovWQ, {
                  [sty.freeBoxinitial__ovWQZsQtK]: hasVariant(
                    $state,
                    "initial",
                    "initial"
                  ),
                })}
              />
            ) : null}
          </div>
        ) : null}
        {(hasVariant($state, "initial", "initial") ? true : true) ? (
          <Button
            data-plasmic-name={"submitButton"}
            data-plasmic-override={overrides.submitButton}
            className={classNames("__wab_instance", sty.submitButton, {
              [sty.submitButtoninitial]: hasVariant(
                $state,
                "initial",
                "initial"
              ),
            })}
            isSubmit={true}
            type={["primary"]}
          >
            {"Post"}
          </Button>
        ) : null}
      </p.Stack>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "bodyInput", "submitButton"],
  bodyInput: ["bodyInput"],
  submitButton: ["submitButton"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  bodyInput: typeof Textbox;
  submitButton: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCommentPostForm__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicCommentPostForm__VariantsArgs;
  args?: PlasmicCommentPostForm__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicCommentPostForm__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicCommentPostForm__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCommentPostForm__ArgProps,
          internalVariantPropNames: PlasmicCommentPostForm__VariantProps,
        }),

      [props, nodeName]
    );

    return PlasmicCommentPostForm__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCommentPostForm";
  } else {
    func.displayName = `PlasmicCommentPostForm.${nodeName}`;
  }
  return func;
}

export const PlasmicCommentPostForm = Object.assign(
  // Top-level PlasmicCommentPostForm renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    bodyInput: makeNodeComponent("bodyInput"),
    submitButton: makeNodeComponent("submitButton"),

    // Metadata about props expected for PlasmicCommentPostForm
    internalVariantProps: PlasmicCommentPostForm__VariantProps,
    internalArgProps: PlasmicCommentPostForm__ArgProps,
  }
);

export default PlasmicCommentPostForm;
/* prettier-ignore-end */
