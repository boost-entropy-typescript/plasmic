// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: BP7V3EkXPURJVwwMyWoHn
// Component: tccr1SFVw_AY

import * as React from "react";

import {
  Flex as Flex__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import ListSectionSeparator from "../../components/ListSectionSeparator"; // plasmic-import: uG5_fPM0sK/component
import IconButton from "../../components/widgets/IconButton"; // plasmic-import: LPry-TF4j22a/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_comments.module.css"; // plasmic-import: BP7V3EkXPURJVwwMyWoHn/projectcss
import sty from "./PlasmicCommentsDialogHead.module.css"; // plasmic-import: tccr1SFVw_AY/css

import CloseIcon from "../plasmic_kit/PlasmicIcon__Close"; // plasmic-import: hy7vKrgdAZwW4/icon

createPlasmicElementProxy;

export type PlasmicCommentsDialogHead__VariantMembers = {};
export type PlasmicCommentsDialogHead__VariantsArgs = {};
type VariantPropType = keyof PlasmicCommentsDialogHead__VariantsArgs;
export const PlasmicCommentsDialogHead__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCommentsDialogHead__ArgsType = {};
type ArgPropType = keyof PlasmicCommentsDialogHead__ArgsType;
export const PlasmicCommentsDialogHead__ArgProps = new Array<ArgPropType>();

export type PlasmicCommentsDialogHead__OverridesType = {
  root?: Flex__<"div">;
  head?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  name?: Flex__<"div">;
  type?: Flex__<"div">;
  close?: Flex__<typeof IconButton>;
  svg?: Flex__<"svg">;
  listSectionSeparator?: Flex__<typeof ListSectionSeparator>;
};

export interface DefaultCommentsDialogHeadProps {
  className?: string;
}

const $$ = {};

function PlasmicCommentsDialogHead__RenderFunc(props: {
  variants: PlasmicCommentsDialogHead__VariantsArgs;
  args: PlasmicCommentsDialogHead__ArgsType;
  overrides: PlasmicCommentsDialogHead__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"head"}
        data-plasmic-override={overrides.head}
        className={classNames(projectcss.all, sty.head)}
      >
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <div
            data-plasmic-name={"name"}
            data-plasmic-override={overrides.name}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.name
            )}
          >
            {"Name"}
          </div>
          <div
            data-plasmic-name={"type"}
            data-plasmic-override={overrides.type}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.type
            )}
          >
            {"Type"}
          </div>
        </div>
        <IconButton
          data-plasmic-name={"close"}
          data-plasmic-override={overrides.close}
          className={classNames("__wab_instance", sty.close)}
          size={"medium"}
          type={["seamless"]}
        >
          <CloseIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        </IconButton>
      </div>
      <ListSectionSeparator
        data-plasmic-name={"listSectionSeparator"}
        data-plasmic-override={overrides.listSectionSeparator}
        className={classNames("__wab_instance", sty.listSectionSeparator)}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "head",
    "freeBox",
    "name",
    "type",
    "close",
    "svg",
    "listSectionSeparator",
  ],
  head: ["head", "freeBox", "name", "type", "close", "svg"],
  freeBox: ["freeBox", "name", "type"],
  name: ["name"],
  type: ["type"],
  close: ["close", "svg"],
  svg: ["svg"],
  listSectionSeparator: ["listSectionSeparator"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  head: "div";
  freeBox: "div";
  name: "div";
  type: "div";
  close: typeof IconButton;
  svg: "svg";
  listSectionSeparator: typeof ListSectionSeparator;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCommentsDialogHead__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCommentsDialogHead__VariantsArgs;
    args?: PlasmicCommentsDialogHead__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCommentsDialogHead__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCommentsDialogHead__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCommentsDialogHead__ArgProps,
          internalVariantPropNames: PlasmicCommentsDialogHead__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicCommentsDialogHead__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCommentsDialogHead";
  } else {
    func.displayName = `PlasmicCommentsDialogHead.${nodeName}`;
  }
  return func;
}

export const PlasmicCommentsDialogHead = Object.assign(
  // Top-level PlasmicCommentsDialogHead renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    head: makeNodeComponent("head"),
    freeBox: makeNodeComponent("freeBox"),
    _name: makeNodeComponent("name"),
    type: makeNodeComponent("type"),
    close: makeNodeComponent("close"),
    svg: makeNodeComponent("svg"),
    listSectionSeparator: makeNodeComponent("listSectionSeparator"),

    // Metadata about props expected for PlasmicCommentsDialogHead
    internalVariantProps: PlasmicCommentsDialogHead__VariantProps,
    internalArgProps: PlasmicCommentsDialogHead__ArgProps,
  }
);

export default PlasmicCommentsDialogHead;
/* prettier-ignore-end */
