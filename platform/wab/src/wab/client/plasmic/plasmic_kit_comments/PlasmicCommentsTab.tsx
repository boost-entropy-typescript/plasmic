// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: BP7V3EkXPURJVwwMyWoHn
// Component: bV6LLO0B3Y

import * as React from "react";

import {
  Flex as Flex__,
  SingleBooleanChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import CommentPost from "../../components/comments/CommentPost"; // plasmic-import: l_AKXl2AAu/component
import { SelectedSubjectHead } from "../../components/comments/SelectedSubjectHead"; // plasmic-import: PTsdlYdahZ76/component
import ListSectionSeparator from "../../components/ListSectionSeparator"; // plasmic-import: uG5_fPM0sK/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_comments.module.css"; // plasmic-import: BP7V3EkXPURJVwwMyWoHn/projectcss
import sty from "./PlasmicCommentsTab.module.css"; // plasmic-import: bV6LLO0B3Y/css

import BellSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__BellSvg"; // plasmic-import: eCJ0k221t/icon
import ChevronDownSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon
import SpeechBubblePlusSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__SpeechBubblePlusSvg"; // plasmic-import: g2gTPsRaJ/icon

createPlasmicElementProxy;

export type PlasmicCommentsTab__VariantMembers = {
  emptySelection: "emptySelection";
  noComments: "noComments";
};
export type PlasmicCommentsTab__VariantsArgs = {
  emptySelection?: SingleBooleanChoiceArg<"emptySelection">;
  noComments?: SingleBooleanChoiceArg<"noComments">;
};
type VariantPropType = keyof PlasmicCommentsTab__VariantsArgs;
export const PlasmicCommentsTab__VariantProps = new Array<VariantPropType>(
  "emptySelection",
  "noComments"
);

export type PlasmicCommentsTab__ArgsType = {};
type ArgPropType = keyof PlasmicCommentsTab__ArgsType;
export const PlasmicCommentsTab__ArgProps = new Array<ArgPropType>();

export type PlasmicCommentsTab__OverridesType = {
  root?: Flex__<"div">;
  currentSelectionSection?: Flex__<"div">;
  filterButton?: Flex__<typeof Button>;
  notificationsButton?: Flex__<typeof Button>;
  selectedSubjectHead?: Flex__<typeof SelectedSubjectHead>;
  emptySelectionCard?: Flex__<"div">;
  noCommentsCard?: Flex__<"div">;
  currentThreadsList?: Flex__<"div">;
  restThreadsSection?: Flex__<"div">;
  restThreadsList?: Flex__<"div">;
};

export interface DefaultCommentsTabProps {
  emptySelection?: SingleBooleanChoiceArg<"emptySelection">;
  noComments?: SingleBooleanChoiceArg<"noComments">;
  className?: string;
}

const $$ = {};

function PlasmicCommentsTab__RenderFunc(props: {
  variants: PlasmicCommentsTab__VariantsArgs;
  args: PlasmicCommentsTab__ArgsType;
  overrides: PlasmicCommentsTab__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "emptySelection",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.emptySelection,
      },
      {
        path: "noComments",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noComments,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootemptySelection]: hasVariant(
            $state,
            "emptySelection",
            "emptySelection"
          ),
          [sty.rootnoComments]: hasVariant($state, "noComments", "noComments"),
        }
      )}
    >
      <div
        data-plasmic-name={"currentSelectionSection"}
        data-plasmic-override={overrides.currentSelectionSection}
        className={classNames(projectcss.all, sty.currentSelectionSection, {
          [sty.currentSelectionSectionemptySelection]: hasVariant(
            $state,
            "emptySelection",
            "emptySelection"
          ),
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__uwLXj, {
            [sty.freeBoxemptySelection__uwLXjk5Ys6]: hasVariant(
              $state,
              "emptySelection",
              "emptySelection"
            ),
            [sty.freeBoxnoComments__uwLXjyfyTz]: hasVariant(
              $state,
              "noComments",
              "noComments"
            ),
          })}
        >
          <Button
            data-plasmic-name={"filterButton"}
            data-plasmic-override={overrides.filterButton}
            className={classNames("__wab_instance", sty.filterButton)}
            endIcon={
              <ChevronDownSvgIcon
                className={classNames(projectcss.all, sty.svg__tbr0E, {
                  [sty.svgemptySelection__tbr0Ek5Ys6]: hasVariant(
                    $state,
                    "emptySelection",
                    "emptySelection"
                  ),
                })}
                role={"img"}
              />
            }
            pointerCursor={true}
            size={"compact"}
            type={["clear"]}
            withIcons={["endIcon"]}
          >
            {"All comments"}
          </Button>
          <Button
            data-plasmic-name={"notificationsButton"}
            data-plasmic-override={overrides.notificationsButton}
            className={classNames("__wab_instance", sty.notificationsButton)}
            pointerCursor={true}
            type={["clear"]}
          >
            <BellSvgIcon
              className={classNames(projectcss.all, sty.svg__vlq5B)}
              role={"img"}
            />
          </Button>
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox__kuS3, {
            [sty.freeBoxemptySelection__kuS3K5Ys6]: hasVariant(
              $state,
              "emptySelection",
              "emptySelection"
            ),
            [sty.freeBoxnoComments__kuS3YfyTz]: hasVariant(
              $state,
              "noComments",
              "noComments"
            ),
          })}
        >
          <SelectedSubjectHead
            data-plasmic-name={"selectedSubjectHead"}
            data-plasmic-override={overrides.selectedSubjectHead}
            className={classNames("__wab_instance", sty.selectedSubjectHead, {
              [sty.selectedSubjectHeademptySelection]: hasVariant(
                $state,
                "emptySelection",
                "emptySelection"
              ),
              [sty.selectedSubjectHeadnoComments]: hasVariant(
                $state,
                "noComments",
                "noComments"
              ),
            })}
          />

          <Stack__
            as={"div"}
            data-plasmic-name={"emptySelectionCard"}
            data-plasmic-override={overrides.emptySelectionCard}
            hasGap={true}
            className={classNames(projectcss.all, sty.emptySelectionCard, {
              [sty.emptySelectionCardemptySelection]: hasVariant(
                $state,
                "emptySelection",
                "emptySelection"
              ),
              [sty.emptySelectionCardnoComments]: hasVariant(
                $state,
                "noComments",
                "noComments"
              ),
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__feo23,
                {
                  [sty.textemptySelection__feo23K5Ys6]: hasVariant(
                    $state,
                    "emptySelection",
                    "emptySelection"
                  ),
                  [sty.textnoComments__feo23YfyTz]: hasVariant(
                    $state,
                    "noComments",
                    "noComments"
                  ),
                }
              )}
            >
              {"Nothing selected"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__fzmlw,
                {
                  [sty.textemptySelection__fzmlwk5Ys6]: hasVariant(
                    $state,
                    "emptySelection",
                    "emptySelection"
                  ),
                  [sty.textnoComments__fzmlwyfyTz]: hasVariant(
                    $state,
                    "noComments",
                    "noComments"
                  ),
                }
              )}
            >
              {
                "Select an element on the canvas or the tree to leave a comment."
              }
            </div>
          </Stack__>
          {(hasVariant($state, "noComments", "noComments") ? true : false) ? (
            <Stack__
              as={"div"}
              data-plasmic-name={"noCommentsCard"}
              data-plasmic-override={overrides.noCommentsCard}
              hasGap={true}
              className={classNames(projectcss.all, sty.noCommentsCard, {
                [sty.noCommentsCardemptySelection]: hasVariant(
                  $state,
                  "emptySelection",
                  "emptySelection"
                ),
                [sty.noCommentsCardnoComments]: hasVariant(
                  $state,
                  "noComments",
                  "noComments"
                ),
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lKmcb,
                  {
                    [sty.textemptySelection__lKmcbk5Ys6]: hasVariant(
                      $state,
                      "emptySelection",
                      "emptySelection"
                    ),
                    [sty.textnoComments__lKmcbyfyTz]: hasVariant(
                      $state,
                      "noComments",
                      "noComments"
                    ),
                  }
                )}
              >
                {"No comments"}
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__gBvZj)}
                style={{ display: "inline-block" }}
              >
                <span
                  className={classNames(
                    projectcss.all,
                    projectcss.span,
                    projectcss.__wab_text,
                    sty.span__vDhf5,
                    {
                      [sty.spanemptySelection__vDhf5K5Ys6]: hasVariant(
                        $state,
                        "emptySelection",
                        "emptySelection"
                      ),
                      [sty.spannoComments__vDhf5YfyTz]: hasVariant(
                        $state,
                        "noComments",
                        "noComments"
                      ),
                    }
                  )}
                >
                  {"Use"}
                </span>
                <SpeechBubblePlusSvgIcon
                  className={classNames(projectcss.all, sty.svg__nXldQ)}
                  role={"img"}
                  style={{ display: "inline", "vertical-align": "middle" }}
                />

                <span
                  className={classNames(
                    projectcss.all,
                    projectcss.span,
                    projectcss.__wab_text,
                    sty.span___1R7Vu,
                    {
                      [sty.spanemptySelection___1R7Vuk5Ys6]: hasVariant(
                        $state,
                        "emptySelection",
                        "emptySelection"
                      ),
                      [sty.spannoComments___1R7VuyfyTz]: hasVariant(
                        $state,
                        "noComments",
                        "noComments"
                      ),
                    }
                  )}
                >
                  {"to leave a comment on this selected element."}
                </span>
              </div>
            </Stack__>
          ) : null}
        </div>
        <ListSectionSeparator
          className={classNames(
            "__wab_instance",
            sty.listSectionSeparator___22T7
          )}
        />

        <div
          data-plasmic-name={"currentThreadsList"}
          data-plasmic-override={overrides.currentThreadsList}
          className={classNames(projectcss.all, sty.currentThreadsList)}
        >
          <CommentPost
            className={classNames("__wab_instance", sty.commentPost__nx6EP, {
              [sty.commentPostemptySelection__nx6EPk5Ys6]: hasVariant(
                $state,
                "emptySelection",
                "emptySelection"
              ),
              [sty.commentPostnoComments__nx6EPyfyTz]: hasVariant(
                $state,
                "noComments",
                "noComments"
              ),
            })}
            thread={true}
          />
        </div>
      </div>
      <ListSectionSeparator
        className={classNames(
          "__wab_instance",
          sty.listSectionSeparator__dYZeC
        )}
      />

      <div
        data-plasmic-name={"restThreadsSection"}
        data-plasmic-override={overrides.restThreadsSection}
        className={classNames(projectcss.all, sty.restThreadsSection)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__hPjMa,
            {
              [sty.textemptySelection__hPjMak5Ys6]: hasVariant(
                $state,
                "emptySelection",
                "emptySelection"
              ),
            }
          )}
        >
          {"Jump to comments elsewhere"}
        </div>
        <div
          data-plasmic-name={"restThreadsList"}
          data-plasmic-override={overrides.restThreadsList}
          className={classNames(projectcss.all, sty.restThreadsList, {
            [sty.restThreadsListemptySelection]: hasVariant(
              $state,
              "emptySelection",
              "emptySelection"
            ),
          })}
        >
          <CommentPost
            className={classNames("__wab_instance", sty.commentPost__fyIcK, {
              [sty.commentPostemptySelection__fyIcKk5Ys6]: hasVariant(
                $state,
                "emptySelection",
                "emptySelection"
              ),
            })}
            thread={true}
          />
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "currentSelectionSection",
    "filterButton",
    "notificationsButton",
    "selectedSubjectHead",
    "emptySelectionCard",
    "noCommentsCard",
    "currentThreadsList",
    "restThreadsSection",
    "restThreadsList",
  ],
  currentSelectionSection: [
    "currentSelectionSection",
    "filterButton",
    "notificationsButton",
    "selectedSubjectHead",
    "emptySelectionCard",
    "noCommentsCard",
    "currentThreadsList",
  ],
  filterButton: ["filterButton"],
  notificationsButton: ["notificationsButton"],
  selectedSubjectHead: ["selectedSubjectHead"],
  emptySelectionCard: ["emptySelectionCard"],
  noCommentsCard: ["noCommentsCard"],
  currentThreadsList: ["currentThreadsList"],
  restThreadsSection: ["restThreadsSection", "restThreadsList"],
  restThreadsList: ["restThreadsList"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  currentSelectionSection: "div";
  filterButton: typeof Button;
  notificationsButton: typeof Button;
  selectedSubjectHead: typeof SelectedSubjectHead;
  emptySelectionCard: "div";
  noCommentsCard: "div";
  currentThreadsList: "div";
  restThreadsSection: "div";
  restThreadsList: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCommentsTab__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCommentsTab__VariantsArgs;
    args?: PlasmicCommentsTab__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCommentsTab__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCommentsTab__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCommentsTab__ArgProps,
          internalVariantPropNames: PlasmicCommentsTab__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicCommentsTab__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCommentsTab";
  } else {
    func.displayName = `PlasmicCommentsTab.${nodeName}`;
  }
  return func;
}

export const PlasmicCommentsTab = Object.assign(
  // Top-level PlasmicCommentsTab renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    currentSelectionSection: makeNodeComponent("currentSelectionSection"),
    filterButton: makeNodeComponent("filterButton"),
    notificationsButton: makeNodeComponent("notificationsButton"),
    selectedSubjectHead: makeNodeComponent("selectedSubjectHead"),
    emptySelectionCard: makeNodeComponent("emptySelectionCard"),
    noCommentsCard: makeNodeComponent("noCommentsCard"),
    currentThreadsList: makeNodeComponent("currentThreadsList"),
    restThreadsSection: makeNodeComponent("restThreadsSection"),
    restThreadsList: makeNodeComponent("restThreadsList"),

    // Metadata about props expected for PlasmicCommentsTab
    internalVariantProps: PlasmicCommentsTab__VariantProps,
    internalArgProps: PlasmicCommentsTab__ArgProps,
  }
);

export default PlasmicCommentsTab;
/* prettier-ignore-end */
