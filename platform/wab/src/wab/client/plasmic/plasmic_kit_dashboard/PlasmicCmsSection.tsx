// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ooL7EhXDmFQWnW9sxtchhE
// Component: 54ykx6A8G6T

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import EditableResourceName from "../../components/EditableResourceName"; // plasmic-import: UttGK3xVrb/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component
import MenuButton from "../../components/widgets/MenuButton"; // plasmic-import: h69wHrrKtL/component
import CmsListItem from "../../../../CmsListItem"; // plasmic-import: DEllwXrn27Q/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_pricing_css from "../plasmic_kit_pricing/plasmic_plasmic_kit_pricing.module.css"; // plasmic-import: ehckhYnyDHgCBbV47m9bkf/projectcss
import projectcss from "../PP__plasmickit_dashboard.module.css"; // plasmic-import: ooL7EhXDmFQWnW9sxtchhE/projectcss
import sty from "./PlasmicCmsSection.module.css"; // plasmic-import: 54ykx6A8G6T/css

import PlusIcon from "../plasmic_kit/PlasmicIcon__Plus"; // plasmic-import: -k064DlQ8k8-L/icon
import ChevronDownsvgIcon from "../q_4_icons/icons/PlasmicIcon__ChevronDownsvg"; // plasmic-import: xZrB9_0ir/icon

createPlasmicElementProxy;

export type PlasmicCmsSection__VariantMembers = {
  noProjects: "noProjects";
  accessLevel: "cantEdit";
  inTeamPage: "inTeamPage";
  showControls: "showControls";
  isReadonlyName: "isReadonlyName";
  showBackNav: "showBackNav";
  subHeader: "subHeader";
};
export type PlasmicCmsSection__VariantsArgs = {
  noProjects?: SingleBooleanChoiceArg<"noProjects">;
  accessLevel?: SingleChoiceArg<"cantEdit">;
  inTeamPage?: SingleBooleanChoiceArg<"inTeamPage">;
  showControls?: SingleBooleanChoiceArg<"showControls">;
  isReadonlyName?: SingleBooleanChoiceArg<"isReadonlyName">;
  showBackNav?: SingleBooleanChoiceArg<"showBackNav">;
  subHeader?: SingleBooleanChoiceArg<"subHeader">;
};
type VariantPropType = keyof PlasmicCmsSection__VariantsArgs;
export const PlasmicCmsSection__VariantProps = new Array<VariantPropType>(
  "noProjects",
  "accessLevel",
  "inTeamPage",
  "showControls",
  "isReadonlyName",
  "showBackNav",
  "subHeader"
);

export type PlasmicCmsSection__ArgsType = {
  children?: React.ReactNode;
  numMembers?: React.ReactNode;
  noProjectsText?: React.ReactNode;
  controls?: React.ReactNode;
};
type ArgPropType = keyof PlasmicCmsSection__ArgsType;
export const PlasmicCmsSection__ArgProps = new Array<ArgPropType>(
  "children",
  "numMembers",
  "noProjectsText",
  "controls"
);

export type PlasmicCmsSection__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<"header">;
  backNav?: p.Flex<"a">;
  editableName?: p.Flex<typeof EditableResourceName>;
  readonlyName?: p.Flex<"div">;
  subtext?: p.Flex<"div">;
  text?: p.Flex<"div">;
  actions?: p.Flex<"div">;
  newProjectButton?: p.Flex<typeof Button>;
  moreButton?: p.Flex<typeof MenuButton>;
};

export interface DefaultCmsSectionProps {
  children?: React.ReactNode;
  numMembers?: React.ReactNode;
  noProjectsText?: React.ReactNode;
  controls?: React.ReactNode;
  noProjects?: SingleBooleanChoiceArg<"noProjects">;
  accessLevel?: SingleChoiceArg<"cantEdit">;
  inTeamPage?: SingleBooleanChoiceArg<"inTeamPage">;
  showControls?: SingleBooleanChoiceArg<"showControls">;
  isReadonlyName?: SingleBooleanChoiceArg<"isReadonlyName">;
  showBackNav?: SingleBooleanChoiceArg<"showBackNav">;
  subHeader?: SingleBooleanChoiceArg<"subHeader">;
  className?: string;
}

const $$ = {};

function PlasmicCmsSection__RenderFunc(props: {
  variants: PlasmicCmsSection__VariantsArgs;
  args: PlasmicCmsSection__ArgsType;
  overrides: PlasmicCmsSection__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "noProjects",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noProjects,
      },
      {
        path: "accessLevel",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.accessLevel,
      },
      {
        path: "inTeamPage",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.inTeamPage,
      },
      {
        path: "showControls",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.showControls,
      },
      {
        path: "isReadonlyName",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isReadonlyName,
      },
      {
        path: "showBackNav",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.showBackNav,
      },
      {
        path: "subHeader",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.subHeader,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        plasmic_plasmic_kit_pricing_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootaccessLevel_cantEdit]: hasVariant(
            $state,
            "accessLevel",
            "cantEdit"
          ),
          [sty.rootinTeamPage]: hasVariant($state, "inTeamPage", "inTeamPage"),
          [sty.rootisReadonlyName]: hasVariant(
            $state,
            "isReadonlyName",
            "isReadonlyName"
          ),
          [sty.rootnoProjects]: hasVariant($state, "noProjects", "noProjects"),
          [sty.rootsubHeader]: hasVariant($state, "subHeader", "subHeader"),
        }
      )}
    >
      {(hasVariant($state, "inTeamPage", "inTeamPage") ? true : false) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__xLos, {
            [sty.freeBoxinTeamPage__xLosjMkVm]: hasVariant(
              $state,
              "inTeamPage",
              "inTeamPage"
            ),
          })}
        />
      ) : null}
      <header
        data-plasmic-name={"header"}
        data-plasmic-override={overrides.header}
        className={classNames(projectcss.all, sty.header, {
          [sty.headeraccessLevel_cantEdit]: hasVariant(
            $state,
            "accessLevel",
            "cantEdit"
          ),
          [sty.headerinTeamPage]: hasVariant(
            $state,
            "inTeamPage",
            "inTeamPage"
          ),
          [sty.headerisReadonlyName]: hasVariant(
            $state,
            "isReadonlyName",
            "isReadonlyName"
          ),
          [sty.headershowBackNav]: hasVariant(
            $state,
            "showBackNav",
            "showBackNav"
          ),
          [sty.headershowControls]: hasVariant(
            $state,
            "showControls",
            "showControls"
          ),
          [sty.headersubHeader]: hasVariant($state, "subHeader", "subHeader"),
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__nj2Zz, {
            [sty.freeBoxshowBackNav__nj2ZzV99Ez]: hasVariant(
              $state,
              "showBackNav",
              "showBackNav"
            ),
          })}
        >
          {(hasVariant($state, "showControls", "showControls") ? true : false)
            ? p.renderPlasmicSlot({
                defaultContents: null,
                value: args.controls,
              })
            : null}
          <div
            className={classNames(projectcss.all, sty.freeBox__arPdT, {
              [sty.freeBoxaccessLevel_cantEdit__arPdTtwf47]: hasVariant(
                $state,
                "accessLevel",
                "cantEdit"
              ),
              [sty.freeBoxshowBackNav__arPdTv99Ez]: hasVariant(
                $state,
                "showBackNav",
                "showBackNav"
              ),
            })}
          >
            <a
              data-plasmic-name={"backNav"}
              data-plasmic-override={overrides.backNav}
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.backNav,
                {
                  [sty.backNavshowBackNav]: hasVariant(
                    $state,
                    "showBackNav",
                    "showBackNav"
                  ),
                }
              )}
              href={"#"}
            >
              {"Back"}
            </a>
            <EditableResourceName
              data-plasmic-name={"editableName"}
              data-plasmic-override={overrides.editableName}
              cantEdit={
                hasVariant($state, "accessLevel", "cantEdit") ? true : undefined
              }
              className={classNames("__wab_instance", sty.editableName, {
                [sty.editableNameaccessLevel_cantEdit]: hasVariant(
                  $state,
                  "accessLevel",
                  "cantEdit"
                ),
                [sty.editableNameinTeamPage]: hasVariant(
                  $state,
                  "inTeamPage",
                  "inTeamPage"
                ),
                [sty.editableNameisReadonlyName]: hasVariant(
                  $state,
                  "isReadonlyName",
                  "isReadonlyName"
                ),
              })}
              name={"Untitled"}
              size={
                hasVariant($state, "inTeamPage", "inTeamPage")
                  ? "small"
                  : undefined
              }
            />

            <div
              data-plasmic-name={"readonlyName"}
              data-plasmic-override={overrides.readonlyName}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.readonlyName,
                {
                  [sty.readonlyNameisReadonlyName]: hasVariant(
                    $state,
                    "isReadonlyName",
                    "isReadonlyName"
                  ),
                }
              )}
            >
              {"Read-only"}
            </div>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__qR4PO)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"subtext"}
                data-plasmic-override={overrides.subtext}
                hasGap={true}
                className={classNames(projectcss.all, sty.subtext)}
              >
                {p.renderPlasmicSlot({
                  defaultContents: "6",
                  value: args.numMembers,
                  className: classNames(sty.slotTargetNumMembers),
                })}
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text,
                    {
                      [sty.textinTeamPage]: hasVariant(
                        $state,
                        "inTeamPage",
                        "inTeamPage"
                      ),
                    }
                  )}
                >
                  {"models"}
                </div>
              </p.Stack>
            </p.Stack>
          </div>
        </div>
        <p.Stack
          as={"div"}
          data-plasmic-name={"actions"}
          data-plasmic-override={overrides.actions}
          hasGap={true}
          className={classNames(projectcss.all, sty.actions, {
            [sty.actionsaccessLevel_cantEdit]: hasVariant(
              $state,
              "accessLevel",
              "cantEdit"
            ),
            [sty.actionsisReadonlyName]: hasVariant(
              $state,
              "isReadonlyName",
              "isReadonlyName"
            ),
          })}
        >
          <Button
            data-plasmic-name={"newProjectButton"}
            data-plasmic-override={overrides.newProjectButton}
            className={classNames("__wab_instance", sty.newProjectButton, {
              [sty.newProjectButtonaccessLevel_cantEdit]: hasVariant(
                $state,
                "accessLevel",
                "cantEdit"
              ),
            })}
            endIcon={
              <ChevronDownsvgIcon
                className={classNames(projectcss.all, sty.svg__fAdgg)}
                role={"img"}
              />
            }
            font={"bold"}
            size={"wide"}
            startIcon={
              <PlusIcon
                className={classNames(projectcss.all, sty.svg___1Slo4)}
                role={"img"}
              />
            }
            type={[]}
            withIcons={["startIcon"]}
          >
            {"New"}
          </Button>
          <MenuButton
            data-plasmic-name={"moreButton"}
            data-plasmic-override={overrides.moreButton}
            className={classNames("__wab_instance", sty.moreButton, {
              [sty.moreButtonaccessLevel_cantEdit]: hasVariant(
                $state,
                "accessLevel",
                "cantEdit"
              ),
            })}
            hoverText={"More…"}
            withBackgroundHover={true}
          />
        </p.Stack>
      </header>
      {(hasVariant($state, "noProjects", "noProjects") ? true : false)
        ? p.renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___5CnRl
                )}
              >
                {"This workspace has no projects."}
              </div>
            ),
            value: args.noProjectsText,
            className: classNames(sty.slotTargetNoProjectsText, {
              [sty.slotTargetNoProjectsTextnoProjects]: hasVariant(
                $state,
                "noProjects",
                "noProjects"
              ),
            }),
          })
        : null}
      <div
        className={classNames(projectcss.all, sty.freeBox__euDr, {
          [sty.freeBoxaccessLevel_cantEdit__euDrtwf47]: hasVariant(
            $state,
            "accessLevel",
            "cantEdit"
          ),
          [sty.freeBoxsubHeader__euDrJl0Z2]: hasVariant(
            $state,
            "subHeader",
            "subHeader"
          ),
        })}
      >
        {(hasVariant($state, "noProjects", "noProjects") ? false : true) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__glVzk, {
              [sty.freeBoxnoProjects__glVzkSrNyP]: hasVariant(
                $state,
                "noProjects",
                "noProjects"
              ),
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <CmsListItem
                    className={classNames(
                      "__wab_instance",
                      sty.cmsListItem__az9Dk
                    )}
                    isFirstItem={true}
                    timestamp={"updated 1h ago"}
                  />

                  <CmsListItem
                    className={classNames(
                      "__wab_instance",
                      sty.cmsListItem__i9R6L
                    )}
                  />

                  <CmsListItem
                    className={classNames(
                      "__wab_instance",
                      sty.cmsListItem__tbO8
                    )}
                  />
                </React.Fragment>
              ),
              value: args.children,
            })}
          </div>
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "backNav",
    "editableName",
    "readonlyName",
    "subtext",
    "text",
    "actions",
    "newProjectButton",
    "moreButton",
  ],
  header: [
    "header",
    "backNav",
    "editableName",
    "readonlyName",
    "subtext",
    "text",
    "actions",
    "newProjectButton",
    "moreButton",
  ],
  backNav: ["backNav"],
  editableName: ["editableName"],
  readonlyName: ["readonlyName"],
  subtext: ["subtext", "text"],
  text: ["text"],
  actions: ["actions", "newProjectButton", "moreButton"],
  newProjectButton: ["newProjectButton"],
  moreButton: ["moreButton"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "header";
  backNav: "a";
  editableName: typeof EditableResourceName;
  readonlyName: "div";
  subtext: "div";
  text: "div";
  actions: "div";
  newProjectButton: typeof Button;
  moreButton: typeof MenuButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCmsSection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCmsSection__VariantsArgs;
    args?: PlasmicCmsSection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCmsSection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCmsSection__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCmsSection__ArgProps,
          internalVariantPropNames: PlasmicCmsSection__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicCmsSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCmsSection";
  } else {
    func.displayName = `PlasmicCmsSection.${nodeName}`;
  }
  return func;
}

export const PlasmicCmsSection = Object.assign(
  // Top-level PlasmicCmsSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    backNav: makeNodeComponent("backNav"),
    editableName: makeNodeComponent("editableName"),
    readonlyName: makeNodeComponent("readonlyName"),
    subtext: makeNodeComponent("subtext"),
    text: makeNodeComponent("text"),
    actions: makeNodeComponent("actions"),
    newProjectButton: makeNodeComponent("newProjectButton"),
    moreButton: makeNodeComponent("moreButton"),

    // Metadata about props expected for PlasmicCmsSection
    internalVariantProps: PlasmicCmsSection__VariantProps,
    internalArgProps: PlasmicCmsSection__ArgProps,
  }
);

export default PlasmicCmsSection;
/* prettier-ignore-end */
