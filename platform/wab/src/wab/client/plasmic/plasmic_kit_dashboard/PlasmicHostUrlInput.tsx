// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ooL7EhXDmFQWnW9sxtchhE
// Component: XxbnrpTDqu

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import HostProtocolSelect from "../../../../HostProtocolSelect"; // plasmic-import: 6_CfQ5GVLku/component
import HostProtocolSelect__Option from "../../../../HostProtocolSelect__Option"; // plasmic-import: aHgWgR3OVni/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_pricing_css from "../plasmic_kit_pricing/plasmic_plasmic_kit_pricing.module.css"; // plasmic-import: ehckhYnyDHgCBbV47m9bkf/projectcss
import projectcss from "../PP__plasmickit_dashboard.module.css"; // plasmic-import: ooL7EhXDmFQWnW9sxtchhE/projectcss
import sty from "./PlasmicHostUrlInput.module.css"; // plasmic-import: XxbnrpTDqu/css

import ArrowRightsvgIcon from "../q_4_icons/icons/PlasmicIcon__ArrowRightsvg"; // plasmic-import: 9Jv8jb253/icon
import ChevronDownsvgIcon from "../q_4_icons/icons/PlasmicIcon__ChevronDownsvg"; // plasmic-import: xZrB9_0ir/icon

createPlasmicElementProxy;

export type PlasmicHostUrlInput__VariantMembers = {};
export type PlasmicHostUrlInput__VariantsArgs = {};
type VariantPropType = keyof PlasmicHostUrlInput__VariantsArgs;
export const PlasmicHostUrlInput__VariantProps = new Array<VariantPropType>();

export type PlasmicHostUrlInput__ArgsType = {};
type ArgPropType = keyof PlasmicHostUrlInput__ArgsType;
export const PlasmicHostUrlInput__ArgProps = new Array<ArgPropType>();

export type PlasmicHostUrlInput__OverridesType = {
  root?: p.Flex<"div">;
  hostProtocolSelect?: p.Flex<typeof HostProtocolSelect>;
  urlInput?: p.Flex<"input">;
  clearButton?: p.Flex<typeof Button>;
  confirmButton?: p.Flex<typeof Button>;
};

export interface DefaultHostUrlInputProps {
  className?: string;
}

const $$ = {};

function PlasmicHostUrlInput__RenderFunc(props: {
  variants: PlasmicHostUrlInput__VariantsArgs;
  args: PlasmicHostUrlInput__ArgsType;
  overrides: PlasmicHostUrlInput__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "hostProtocolSelect.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "https://",
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        plasmic_plasmic_kit_pricing_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__g2NsR
        )}
      >
        {"URL:"}
      </div>
      <HostProtocolSelect
        data-plasmic-name={"hostProtocolSelect"}
        data-plasmic-override={overrides.hostProtocolSelect}
        className={classNames("__wab_instance", sty.hostProtocolSelect)}
        onChange={(...eventArgs) => {
          p.generateStateOnChangeProp($state, ["hostProtocolSelect", "value"])(
            eventArgs[0]
          );
        }}
        value={p.generateStateValueProp($state, [
          "hostProtocolSelect",
          "value",
        ])}
      >
        <HostProtocolSelect__Option
          className={classNames("__wab_instance", sty.option__jSgyS)}
          textValue={"https://"}
          value={"https://"}
        >
          {"https://"}
        </HostProtocolSelect__Option>
        <HostProtocolSelect__Option
          className={classNames("__wab_instance", sty.option__nopaD)}
          textValue={"http://"}
          value={"http://"}
        >
          {"http://"}
        </HostProtocolSelect__Option>
      </HostProtocolSelect>
      <input
        data-plasmic-name={"urlInput"}
        data-plasmic-override={overrides.urlInput}
        className={classNames(projectcss.all, projectcss.input, sty.urlInput)}
        placeholder={"my-app.com/host"}
        ref={(ref) => {
          $refs["urlInput"] = ref;
        }}
        size={1}
        type={"text"}
      />

      <Button
        data-plasmic-name={"clearButton"}
        data-plasmic-override={overrides.clearButton}
        className={classNames("__wab_instance", sty.clearButton)}
        disabled={true}
        endIcon={
          <ChevronDownsvgIcon
            className={classNames(projectcss.all, sty.svg__vgMoN)}
            role={"img"}
          />
        }
        size={"wide"}
        startIcon={
          <ArrowRightsvgIcon
            className={classNames(projectcss.all, sty.svg__wNkJa)}
            role={"img"}
          />
        }
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__sYxzC
          )}
        >
          {"Clear"}
        </div>
      </Button>
      <Button
        data-plasmic-name={"confirmButton"}
        data-plasmic-override={overrides.confirmButton}
        className={classNames("__wab_instance", sty.confirmButton)}
        disabled={true}
        endIcon={
          <ChevronDownsvgIcon
            className={classNames(projectcss.all, sty.svg__idqB)}
            role={"img"}
          />
        }
        size={"wide"}
        startIcon={
          <ArrowRightsvgIcon
            className={classNames(projectcss.all, sty.svg__x95OL)}
            role={"img"}
          />
        }
        type={["primary"]}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__ijKr
          )}
        >
          {"Confirm"}
        </div>
      </Button>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "hostProtocolSelect",
    "urlInput",
    "clearButton",
    "confirmButton",
  ],
  hostProtocolSelect: ["hostProtocolSelect"],
  urlInput: ["urlInput"],
  clearButton: ["clearButton"],
  confirmButton: ["confirmButton"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  hostProtocolSelect: typeof HostProtocolSelect;
  urlInput: "input";
  clearButton: typeof Button;
  confirmButton: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHostUrlInput__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHostUrlInput__VariantsArgs;
    args?: PlasmicHostUrlInput__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHostUrlInput__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHostUrlInput__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHostUrlInput__ArgProps,
          internalVariantPropNames: PlasmicHostUrlInput__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicHostUrlInput__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHostUrlInput";
  } else {
    func.displayName = `PlasmicHostUrlInput.${nodeName}`;
  }
  return func;
}

export const PlasmicHostUrlInput = Object.assign(
  // Top-level PlasmicHostUrlInput renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    hostProtocolSelect: makeNodeComponent("hostProtocolSelect"),
    urlInput: makeNodeComponent("urlInput"),
    clearButton: makeNodeComponent("clearButton"),
    confirmButton: makeNodeComponent("confirmButton"),

    // Metadata about props expected for PlasmicHostUrlInput
    internalVariantProps: PlasmicHostUrlInput__VariantProps,
    internalArgProps: PlasmicHostUrlInput__ArgProps,
  }
);

export default PlasmicHostUrlInput;
/* prettier-ignore-end */
