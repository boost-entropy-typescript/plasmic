// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ooL7EhXDmFQWnW9sxtchhE
// Component: pSCM9YIcqli

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "../PP__plasmickit_dashboard.module.css"; // plasmic-import: ooL7EhXDmFQWnW9sxtchhE/projectcss
import sty from "./PlasmicNewPriceTierChip.module.css"; // plasmic-import: pSCM9YIcqli/css

createPlasmicElementProxy;

export type PlasmicNewPriceTierChip__VariantMembers = {
  current: "current";
  simplified: "simplified";
};
export type PlasmicNewPriceTierChip__VariantsArgs = {
  current?: SingleBooleanChoiceArg<"current">;
  simplified?: SingleBooleanChoiceArg<"simplified">;
};
type VariantPropType = keyof PlasmicNewPriceTierChip__VariantsArgs;
export const PlasmicNewPriceTierChip__VariantProps = new Array<VariantPropType>(
  "current",
  "simplified"
);

export type PlasmicNewPriceTierChip__ArgsType = {
  tier?: React.ReactNode;
  description?: React.ReactNode;
};
type ArgPropType = keyof PlasmicNewPriceTierChip__ArgsType;
export const PlasmicNewPriceTierChip__ArgProps = new Array<ArgPropType>(
  "tier",
  "description"
);

export type PlasmicNewPriceTierChip__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  text?: p.Flex<"div">;
};

export interface DefaultNewPriceTierChipProps {
  tier?: React.ReactNode;
  description?: React.ReactNode;
  current?: SingleBooleanChoiceArg<"current">;
  simplified?: SingleBooleanChoiceArg<"simplified">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicNewPriceTierChip__RenderFunc(props: {
  variants: PlasmicNewPriceTierChip__VariantsArgs;
  args: PlasmicNewPriceTierChip__ArgsType;
  overrides: PlasmicNewPriceTierChip__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "current",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.current,
      },
      {
        path: "simplified",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.simplified,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    true ? (
      <p.Stack
        as={"div"}
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
          plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
          sty.root,
          { [sty.rootcurrent]: hasVariant($state, "current", "current") }
        )}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Free",
          value: args.tier,
          className: classNames(sty.slotTargetTier, {
            [sty.slotTargetTiercurrent]: hasVariant(
              $state,
              "current",
              "current"
            ),
          }),
        })}
        {(hasVariant($state, "simplified", "simplified") ? false : true) ? (
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox, {
              [sty.freeBoxsimplified]: hasVariant(
                $state,
                "simplified",
                "simplified"
              ),
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "For anyone getting started with Plasmic.",
              value: args.description,
              className: classNames(sty.slotTargetDescription, {
                [sty.slotTargetDescriptioncurrent]: hasVariant(
                  $state,
                  "current",
                  "current"
                ),
                [sty.slotTargetDescriptionsimplified]: hasVariant(
                  $state,
                  "simplified",
                  "simplified"
                ),
              }),
            })}
            {(hasVariant($state, "current", "current") ? true : false) ? (
              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text,
                  {
                    [sty.textcurrent]: hasVariant($state, "current", "current"),
                  }
                )}
              >
                {"Current plan"}
              </div>
            ) : null}
          </div>
        ) : null}
      </p.Stack>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "text"],
  freeBox: ["freeBox", "text"],
  text: ["text"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewPriceTierChip__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewPriceTierChip__VariantsArgs;
    args?: PlasmicNewPriceTierChip__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewPriceTierChip__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNewPriceTierChip__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNewPriceTierChip__ArgProps,
          internalVariantPropNames: PlasmicNewPriceTierChip__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicNewPriceTierChip__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewPriceTierChip";
  } else {
    func.displayName = `PlasmicNewPriceTierChip.${nodeName}`;
  }
  return func;
}

export const PlasmicNewPriceTierChip = Object.assign(
  // Top-level PlasmicNewPriceTierChip renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicNewPriceTierChip
    internalVariantProps: PlasmicNewPriceTierChip__VariantProps,
    internalArgProps: PlasmicNewPriceTierChip__ArgProps,
  }
);

export default PlasmicNewPriceTierChip;
/* prettier-ignore-end */
