// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dyzP6dbCdycwJpqiR2zkwe
// Component: fiIuU8gs9A
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import CodePreviewSnippet from "../../components/docs/CodePreviewSnippet"; // plasmic-import: X5avWz1hNF/component
import DocsPropsTable from "../../components/docs/DocsPropsTable"; // plasmic-import: 9vACp1cwGL/component
import DocsPropsTableRow from "../../components/docs/DocsPropsTableRow"; // plasmic-import: MQ5YoyUM0K/component

import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../PP__plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_plasmic_kit_docs_portal.module.css"; // plasmic-import: dyzP6dbCdycwJpqiR2zkwe/projectcss
import sty from "./PlasmicPlumeComponentView.module.css"; // plasmic-import: fiIuU8gs9A/css

export type PlasmicPlumeComponentView__VariantMembers = {
  hideCustomProps: "hideCustomProps";
};

export type PlasmicPlumeComponentView__VariantsArgs = {
  hideCustomProps?: SingleBooleanChoiceArg<"hideCustomProps">;
};

type VariantPropType = keyof PlasmicPlumeComponentView__VariantsArgs;
export const PlasmicPlumeComponentView__VariantProps =
  new Array<VariantPropType>("hideCustomProps");

export type PlasmicPlumeComponentView__ArgsType = {
  examples?: React.ReactNode;
  title?: React.ReactNode;
  info?: React.ReactNode;
};

type ArgPropType = keyof PlasmicPlumeComponentView__ArgsType;
export const PlasmicPlumeComponentView__ArgProps = new Array<ArgPropType>(
  "examples",
  "title",
  "info"
);

export type PlasmicPlumeComponentView__OverridesType = {
  root?: p.Flex<"div">;
  examples?: p.Flex<"div">;
  baseProps?: p.Flex<typeof DocsPropsTable>;
  customProps?: p.Flex<typeof DocsPropsTable>;
};

export interface DefaultPlumeComponentViewProps {
  examples?: React.ReactNode;
  title?: React.ReactNode;
  info?: React.ReactNode;
  hideCustomProps?: SingleBooleanChoiceArg<"hideCustomProps">;
  className?: string;
}

function PlasmicPlumeComponentView__RenderFunc(props: {
  variants: PlasmicPlumeComponentView__VariantsArgs;
  args: PlasmicPlumeComponentView__ArgsType;
  overrides: PlasmicPlumeComponentView__OverridesType;
  dataFetches?: PlasmicPlumeComponentView__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(defaultcss.all, sty.freeBox__a1Db7)}>
        {p.renderPlasmicSlot({
          defaultContents: "MyCheckbox",
          value: args.title,
          className: classNames(sty.slotTargetTitle),
        })}
      </div>

      <div className={classNames(defaultcss.all, sty.freeBox___1RuAb)}>
        {p.renderPlasmicSlot({
          defaultContents: "",
          value: args.info,
          className: classNames(sty.slotTargetInfo),
        })}
      </div>

      <div
        className={classNames(
          defaultcss.all,
          defaultcss.__wab_text,
          sty.text__fOsIs
        )}
      >
        {"Examples of usage"}
      </div>

      <p.Stack
        as={"div"}
        data-plasmic-name={"examples"}
        data-plasmic-override={overrides.examples}
        hasGap={true}
        className={classNames(defaultcss.all, sty.examples)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <CodePreviewSnippet
                info={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text__wfjsy
                    )}
                  >
                    {
                      "You can use isChecked/onChange to control your checkbox component."
                    }
                  </div>
                }
                title={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text__fTmN9
                    )}
                  >
                    {"Controlled Checkbox"}
                  </div>
                }
              />

              <CodePreviewSnippet
                info={
                  "You can have an uncontrolled checkbox if you don't specify isChecked/onChange props."
                }
              />
            </React.Fragment>
          ),
          value: args.examples,
        })}
      </p.Stack>

      <div
        className={classNames(
          defaultcss.all,
          defaultcss.__wab_text,
          sty.text__s58E1
        )}
      >
        {"Base Props"}
      </div>

      <DocsPropsTable
        data-plasmic-name={"baseProps"}
        data-plasmic-override={overrides.baseProps}
        className={classNames("__wab_instance", sty.baseProps, {
          [sty.baseProps__hideCustomProps]: hasVariant(
            variants,
            "hideCustomProps",
            "hideCustomProps"
          ),
        })}
      />

      {(
        hasVariant(variants, "hideCustomProps", "hideCustomProps")
          ? false
          : true
      ) ? (
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.text__w9A9,
            {
              [sty.text__hideCustomProps__w9A98RHeW]: hasVariant(
                variants,
                "hideCustomProps",
                "hideCustomProps"
              ),
            }
          )}
        >
          {"Custom Props"}
        </div>
      ) : null}
      {(
        hasVariant(variants, "hideCustomProps", "hideCustomProps")
          ? false
          : true
      ) ? (
        <DocsPropsTable
          data-plasmic-name={"customProps"}
          data-plasmic-override={overrides.customProps}
          className={classNames("__wab_instance", sty.customProps, {
            [sty.customProps__hideCustomProps]: hasVariant(
              variants,
              "hideCustomProps",
              "hideCustomProps"
            ),
          })}
          rows={
            <React.Fragment>
              <DocsPropsTableRow
                className={classNames(
                  "__wab_instance",
                  sty.docsPropsTableRow__ngOet
                )}
                description={"Custom variant."}
                propName={"color"}
                propType={'"blue" | "red"'}
              />

              <DocsPropsTableRow
                className={classNames(
                  "__wab_instance",
                  sty.docsPropsTableRow__bsjqs
                )}
                description={"Custom slot."}
                propName={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text__zpDRm
                    )}
                  >
                    {"customSlot"}
                  </div>
                }
                propType={"ReactNode"}
              />
            </React.Fragment>
          }
        />
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "examples", "baseProps", "customProps"],
  examples: ["examples"],
  baseProps: ["baseProps"],
  customProps: ["customProps"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  examples: "div";
  baseProps: typeof DocsPropsTable;
  customProps: typeof DocsPropsTable;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPlumeComponentView__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicPlumeComponentView__VariantsArgs;
  args?: PlasmicPlumeComponentView__ArgsType;
  overrides?: NodeOverridesType<T>;
  dataFetches?: PlasmicPlumeComponentView__Fetches;
} & Omit<PlasmicPlumeComponentView__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicPlumeComponentView__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPlumeComponentView__ArgProps,
      internalVariantPropNames: PlasmicPlumeComponentView__VariantProps,
    });

    const { dataFetches } = props;

    return PlasmicPlumeComponentView__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPlumeComponentView";
  } else {
    func.displayName = `PlasmicPlumeComponentView.${nodeName}`;
  }
  return func;
}

export const PlasmicPlumeComponentView = Object.assign(
  // Top-level PlasmicPlumeComponentView renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    examples: makeNodeComponent("examples"),
    baseProps: makeNodeComponent("baseProps"),
    customProps: makeNodeComponent("customProps"),

    // Metadata about props expected for PlasmicPlumeComponentView
    internalVariantProps: PlasmicPlumeComponentView__VariantProps,
    internalArgProps: PlasmicPlumeComponentView__ArgProps,
  }
);

export default PlasmicPlumeComponentView;
/* prettier-ignore-end */
