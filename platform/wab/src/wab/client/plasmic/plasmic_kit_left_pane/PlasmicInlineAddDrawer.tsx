// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aukbrhkegRkQ6KizvhdUPT
// Component: dpiIF1AKm9

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import InlineInsertionPosition from "../../../../InlineInsertionPosition"; // plasmic-import: 5cuG3IeJcb/component
import LeftSearchPanel from "../../components/studio/LeftSearchPanel"; // plasmic-import: TqAPn0srTq/component
import ListSectionHeader from "../../components/ListSectionHeader"; // plasmic-import: wNvxk7eOak/component
import IconButton from "../../components/widgets/IconButton"; // plasmic-import: LPry-TF4j22a/component
import AddDrawerItem from "../../components/studio/add-drawer/AddDrawerItem"; // plasmic-import: isQPD0RPCw/component
import ListSectionSeparator from "../../components/ListSectionSeparator"; // plasmic-import: uG5_fPM0sK/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_new_design_system_former_style_controls_css from "../plasmic_kit_style_controls/plasmic_plasmic_kit_styles_pane.module.css"; // plasmic-import: gYEVvAzCcLMHDVPvuYxkFh/projectcss
import projectcss from "../PP__plasmickit_left_pane.module.css"; // plasmic-import: aukbrhkegRkQ6KizvhdUPT/projectcss
import sty from "./PlasmicInlineAddDrawer.module.css"; // plasmic-import: dpiIF1AKm9/css

import VariantGroupIcon from "../plasmic_kit/PlasmicIcon__VariantGroup"; // plasmic-import: pyS6pK4Spx-QF/icon
import PlusCircleIcon from "../plasmic_kit/PlasmicIcon__PlusCircle"; // plasmic-import: miOAezEgkL3Po/icon
import ChevronDownsvgIcon from "../q_4_icons/icons/PlasmicIcon__ChevronDownsvg"; // plasmic-import: xZrB9_0ir/icon
import ComponentsvgIcon from "../plasmic_kit_q_4_icons/icons/PlasmicIcon__Componentsvg"; // plasmic-import: vJVrKlrDD/icon
import BeforeIcon from "../plasmic_kit/PlasmicIcon__Before"; // plasmic-import: VU26fT14NQttw/icon
import AfterIcon from "../plasmic_kit/PlasmicIcon__After"; // plasmic-import: yzAFS1IyVvChx/icon
import FramesvgIcon from "../q_4_icons/icons/PlasmicIcon__Framesvg"; // plasmic-import: lcERBKegv/icon
import SquaresvgIcon from "../q_4_icons/icons/PlasmicIcon__Squaresvg"; // plasmic-import: zkj00JjZV/icon
import HStackBlockIcon from "../plasmic_kit/PlasmicIcon__HStackBlock"; // plasmic-import: vrE0GHgUiSGkm/icon
import VStackBlockIcon from "../plasmic_kit/PlasmicIcon__VStackBlock"; // plasmic-import: DTUk351ydDQGv/icon
import TextBlockIcon from "../plasmic_kit/PlasmicIcon__TextBlock"; // plasmic-import: nzc8B7oWFfsYG/icon
import ImageBlockIcon from "../plasmic_kit/PlasmicIcon__ImageBlock"; // plasmic-import: Sta1tgTjp-AlG/icon
import IconsvgIcon from "../plasmic_kit_q_4_icons/icons/PlasmicIcon__Iconsvg"; // plasmic-import: iSl915wHU/icon
import ButtonInputIcon from "../plasmic_kit/PlasmicIcon__ButtonInput"; // plasmic-import: _bmaLjOFc6A0c/icon
import LinksvgIcon from "../q_4_icons/icons/PlasmicIcon__Linksvg"; // plasmic-import: cu6SQ9NY6/icon
import PasswordsvgIcon from "../plasmic_kit_q_4_icons/icons/PlasmicIcon__Passwordsvg"; // plasmic-import: EYHEqxNq3/icon
import AreaInputIcon from "../plasmic_kit/PlasmicIcon__AreaInput"; // plasmic-import: BGTwDE0-XM3EQ/icon
import HeadingsvgIcon from "../q_4_icons/icons/PlasmicIcon__Headingsvg"; // plasmic-import: BiX8j3MLg/icon
import image49X6ZsC5Ww5 from "../plasmic_kit_design_system/images/image4.svg"; // plasmic-import: 9X6ZsC5ww5/picture

createPlasmicElementProxy;

export type PlasmicInlineAddDrawer__VariantMembers = {};
export type PlasmicInlineAddDrawer__VariantsArgs = {};
type VariantPropType = keyof PlasmicInlineAddDrawer__VariantsArgs;
export const PlasmicInlineAddDrawer__VariantProps =
  new Array<VariantPropType>();

export type PlasmicInlineAddDrawer__ArgsType = {};
type ArgPropType = keyof PlasmicInlineAddDrawer__ArgsType;
export const PlasmicInlineAddDrawer__ArgProps = new Array<ArgPropType>();

export type PlasmicInlineAddDrawer__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  placementOptions?: p.Flex<"div">;
  placeInside?: p.Flex<typeof InlineInsertionPosition>;
  placeBefore?: p.Flex<typeof InlineInsertionPosition>;
  placeAfter?: p.Flex<typeof InlineInsertionPosition>;
  text?: p.Flex<"div">;
  leftSearchPanel?: p.Flex<typeof LeftSearchPanel>;
  content?: p.Flex<"div">;
  prependButton2?: p.Flex<typeof IconButton>;
  appendButton2?: p.Flex<typeof IconButton>;
  prependButton3?: p.Flex<typeof IconButton>;
  appendButton3?: p.Flex<typeof IconButton>;
  prependButton4?: p.Flex<typeof IconButton>;
  appendButton4?: p.Flex<typeof IconButton>;
  prependButton5?: p.Flex<typeof IconButton>;
  appendButton5?: p.Flex<typeof IconButton>;
  prependButton6?: p.Flex<typeof IconButton>;
  appendButton6?: p.Flex<typeof IconButton>;
  prependButton7?: p.Flex<typeof IconButton>;
  appendButton7?: p.Flex<typeof IconButton>;
  prependButton8?: p.Flex<typeof IconButton>;
  appendButton8?: p.Flex<typeof IconButton>;
  prependButton9?: p.Flex<typeof IconButton>;
  appendButton9?: p.Flex<typeof IconButton>;
  prependButton10?: p.Flex<typeof IconButton>;
  appendButton10?: p.Flex<typeof IconButton>;
  prependButton11?: p.Flex<typeof IconButton>;
  appendButton11?: p.Flex<typeof IconButton>;
  prependButton12?: p.Flex<typeof IconButton>;
  appendButton12?: p.Flex<typeof IconButton>;
  prependButton13?: p.Flex<typeof IconButton>;
  appendButton13?: p.Flex<typeof IconButton>;
  prependButton14?: p.Flex<typeof IconButton>;
  appendButton14?: p.Flex<typeof IconButton>;
  prependButton15?: p.Flex<typeof IconButton>;
  appendButton15?: p.Flex<typeof IconButton>;
  prependButton16?: p.Flex<typeof IconButton>;
  appendButton16?: p.Flex<typeof IconButton>;
  prependButton17?: p.Flex<typeof IconButton>;
  appendButton17?: p.Flex<typeof IconButton>;
  prependButton18?: p.Flex<typeof IconButton>;
  appendButton18?: p.Flex<typeof IconButton>;
  prependButton?: p.Flex<typeof IconButton>;
  appendButton?: p.Flex<typeof IconButton>;
  prependButton232222222222322?: p.Flex<typeof IconButton>;
  appendButton232222222222322?: p.Flex<typeof IconButton>;
  prependButton2322222222223222?: p.Flex<typeof IconButton>;
  appendButton2322222222223222?: p.Flex<typeof IconButton>;
  prependButton23222222222232222?: p.Flex<typeof IconButton>;
  appendButton23222222222232222?: p.Flex<typeof IconButton>;
  prependButton232222222222322222?: p.Flex<typeof IconButton>;
  appendButton232222222222322222?: p.Flex<typeof IconButton>;
  prependButton23222222222232?: p.Flex<typeof IconButton>;
  appendButton23222222222232?: p.Flex<typeof IconButton>;
  prependButton232222222222?: p.Flex<typeof IconButton>;
  appendButton232222222222?: p.Flex<typeof IconButton>;
  prependButton22?: p.Flex<typeof IconButton>;
  appendButton22?: p.Flex<typeof IconButton>;
};

export interface DefaultInlineAddDrawerProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicInlineAddDrawer__RenderFunc(props: {
  variants: PlasmicInlineAddDrawer__VariantsArgs;
  args: PlasmicInlineAddDrawer__ArgsType;
  overrides: PlasmicInlineAddDrawer__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        plasmic_plasmic_kit_new_design_system_former_style_controls_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <div
          data-plasmic-name={"placementOptions"}
          data-plasmic-override={overrides.placementOptions}
          className={classNames(projectcss.all, sty.placementOptions)}
        >
          <InlineInsertionPosition
            data-plasmic-name={"placeInside"}
            data-plasmic-override={overrides.placeInside}
            className={classNames("__wab_instance", sty.placeInside)}
            selected={true}
          >
            {"inside"}
          </InlineInsertionPosition>
          <InlineInsertionPosition
            data-plasmic-name={"placeBefore"}
            data-plasmic-override={overrides.placeBefore}
            className={classNames("__wab_instance", sty.placeBefore)}
          >
            {"Before"}
          </InlineInsertionPosition>
          <InlineInsertionPosition
            data-plasmic-name={"placeAfter"}
            data-plasmic-override={overrides.placeAfter}
            className={classNames("__wab_instance", sty.placeAfter)}
          >
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {"After"}
            </div>
          </InlineInsertionPosition>
        </div>
      </div>
      <LeftSearchPanel
        data-plasmic-name={"leftSearchPanel"}
        data-plasmic-override={overrides.leftSearchPanel}
        className={classNames("__wab_instance", sty.leftSearchPanel)}
      />

      <div
        data-plasmic-name={"content"}
        data-plasmic-override={overrides.content}
        className={classNames(projectcss.all, sty.content)}
      >
        <ListSectionHeader
          actions={
            <IconButton
              children2={
                <ChevronDownsvgIcon
                  className={classNames(projectcss.all, sty.svg___4ObBg)}
                  role={"img"}
                />
              }
              className={classNames("__wab_instance", sty.iconButton__dsnIv)}
            >
              <PlusCircleIcon
                className={classNames(projectcss.all, sty.svg__ihL9G)}
                role={"img"}
              />
            </IconButton>
          }
          className={classNames("__wab_instance", sty.listSectionHeader__zDf33)}
          icon={
            <VariantGroupIcon
              className={classNames(projectcss.all, sty.svg__quwQg)}
              role={"img"}
            />
          }
        >
          {"Recently Used..."}
        </ListSectionHeader>
        <AddDrawerItem
          actions={
            <React.Fragment>
              <IconButton
                data-plasmic-name={"prependButton2"}
                data-plasmic-override={overrides.prependButton2}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__hEXw)}
                    role={"img"}
                  />
                }
              >
                <BeforeIcon
                  className={classNames(projectcss.all, sty.svg__fTn4)}
                  role={"img"}
                />
              </IconButton>
              <IconButton
                data-plasmic-name={"appendButton2"}
                data-plasmic-override={overrides.appendButton2}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg___6Hpfs)}
                    role={"img"}
                  />
                }
                className={classNames("__wab_instance", sty.appendButton2)}
              >
                <AfterIcon
                  className={classNames(projectcss.all, sty.svg__ho5B)}
                  role={"img"}
                />
              </IconButton>
            </React.Fragment>
          }
          className={classNames("__wab_instance", sty.addDrawerItem__xKnh1)}
          icon={
            <ComponentsvgIcon
              className={classNames(projectcss.all, sty.svg__quxEm)}
              role={"img"}
            />
          }
          previewImage={
            <img
              alt={""}
              className={classNames(
                projectcss.all,
                projectcss.img,
                sty.img__qFsnA
              )}
              src={image49X6ZsC5Ww5}
            />
          }
        >
          {"Component 1"}
        </AddDrawerItem>
        <ListSectionSeparator
          className={classNames(
            "__wab_instance",
            sty.listSectionSeparator__vAlCk
          )}
        />

        <ListSectionHeader
          actions={
            <IconButton
              children2={
                <ChevronDownsvgIcon
                  className={classNames(projectcss.all, sty.svg__kFeWh)}
                  role={"img"}
                />
              }
              className={classNames("__wab_instance", sty.iconButton__fjnjy)}
            >
              <PlusCircleIcon
                className={classNames(projectcss.all, sty.svg__ldgOg)}
                role={"img"}
              />
            </IconButton>
          }
          className={classNames("__wab_instance", sty.listSectionHeader__wjbfR)}
          icon={
            <VariantGroupIcon
              className={classNames(projectcss.all, sty.svg___3BJ9D)}
              role={"img"}
            />
          }
        >
          {"Artboards"}
        </ListSectionHeader>
        <AddDrawerItem
          actions={
            <React.Fragment>
              <IconButton
                data-plasmic-name={"prependButton3"}
                data-plasmic-override={overrides.prependButton3}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__eeYt)}
                    role={"img"}
                  />
                }
              >
                <BeforeIcon
                  className={classNames(projectcss.all, sty.svg__io64X)}
                  role={"img"}
                />
              </IconButton>
              <IconButton
                data-plasmic-name={"appendButton3"}
                data-plasmic-override={overrides.appendButton3}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__lJr2J)}
                    role={"img"}
                  />
                }
                className={classNames("__wab_instance", sty.appendButton3)}
              >
                <AfterIcon
                  className={classNames(projectcss.all, sty.svg__sVaPi)}
                  role={"img"}
                />
              </IconButton>
            </React.Fragment>
          }
          className={classNames("__wab_instance", sty.addDrawerItem__rjWrQ)}
          icon={
            <FramesvgIcon
              className={classNames(projectcss.all, sty.svg__sm8UV)}
              role={"img"}
            />
          }
          previewImage={
            <img
              alt={""}
              className={classNames(
                projectcss.all,
                projectcss.img,
                sty.img__bASoj
              )}
              src={image49X6ZsC5Ww5}
            />
          }
        >
          {"New artboard"}
        </AddDrawerItem>
        <AddDrawerItem
          actions={
            <React.Fragment>
              <IconButton
                data-plasmic-name={"prependButton4"}
                data-plasmic-override={overrides.prependButton4}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__kepNs)}
                    role={"img"}
                  />
                }
              >
                <BeforeIcon
                  className={classNames(projectcss.all, sty.svg__nyGis)}
                  role={"img"}
                />
              </IconButton>
              <IconButton
                data-plasmic-name={"appendButton4"}
                data-plasmic-override={overrides.appendButton4}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__vmap4)}
                    role={"img"}
                  />
                }
                className={classNames("__wab_instance", sty.appendButton4)}
              >
                <AfterIcon
                  className={classNames(projectcss.all, sty.svg___7Jk2M)}
                  role={"img"}
                />
              </IconButton>
            </React.Fragment>
          }
          className={classNames("__wab_instance", sty.addDrawerItem__puRcm)}
          icon={
            <ComponentsvgIcon
              className={classNames(projectcss.all, sty.svg___2B51B)}
              role={"img"}
            />
          }
          previewImage={
            <img
              alt={""}
              className={classNames(
                projectcss.all,
                projectcss.img,
                sty.img__nZbJg
              )}
              src={image49X6ZsC5Ww5}
            />
          }
        >
          {"New component"}
        </AddDrawerItem>
        <ListSectionSeparator
          className={classNames(
            "__wab_instance",
            sty.listSectionSeparator__j3E6B
          )}
        />

        <ListSectionHeader
          actions={
            <IconButton
              children2={
                <ChevronDownsvgIcon
                  className={classNames(projectcss.all, sty.svg___4LsbT)}
                  role={"img"}
                />
              }
              className={classNames("__wab_instance", sty.iconButton__q40Hb)}
            >
              <PlusCircleIcon
                className={classNames(projectcss.all, sty.svg__ivzBx)}
                role={"img"}
              />
            </IconButton>
          }
          className={classNames("__wab_instance", sty.listSectionHeader__apqiq)}
          icon={
            <VariantGroupIcon
              className={classNames(projectcss.all, sty.svg__fnabx)}
              role={"img"}
            />
          }
        >
          {"Basics"}
        </ListSectionHeader>
        <AddDrawerItem
          actions={
            <React.Fragment>
              <IconButton
                data-plasmic-name={"prependButton5"}
                data-plasmic-override={overrides.prependButton5}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__jGw6J)}
                    role={"img"}
                  />
                }
              >
                <BeforeIcon
                  className={classNames(projectcss.all, sty.svg___1PI6)}
                  role={"img"}
                />
              </IconButton>
              <IconButton
                data-plasmic-name={"appendButton5"}
                data-plasmic-override={overrides.appendButton5}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__p0Cez)}
                    role={"img"}
                  />
                }
                className={classNames("__wab_instance", sty.appendButton5)}
              >
                <AfterIcon
                  className={classNames(projectcss.all, sty.svg__zkBfo)}
                  role={"img"}
                />
              </IconButton>
            </React.Fragment>
          }
          className={classNames("__wab_instance", sty.addDrawerItem__uneki)}
          icon={
            <SquaresvgIcon
              className={classNames(projectcss.all, sty.svg__gApJy)}
              role={"img"}
            />
          }
          previewImage={
            <img
              alt={""}
              className={classNames(
                projectcss.all,
                projectcss.img,
                sty.img__ujRrB
              )}
              src={image49X6ZsC5Ww5}
            />
          }
        >
          {"Free box"}
        </AddDrawerItem>
        <AddDrawerItem
          actions={
            <React.Fragment>
              <IconButton
                data-plasmic-name={"prependButton6"}
                data-plasmic-override={overrides.prependButton6}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__wopGh)}
                    role={"img"}
                  />
                }
              >
                <BeforeIcon
                  className={classNames(projectcss.all, sty.svg__jLk0)}
                  role={"img"}
                />
              </IconButton>
              <IconButton
                data-plasmic-name={"appendButton6"}
                data-plasmic-override={overrides.appendButton6}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__lKqxo)}
                    role={"img"}
                  />
                }
                className={classNames("__wab_instance", sty.appendButton6)}
              >
                <AfterIcon
                  className={classNames(projectcss.all, sty.svg__xdcy0)}
                  role={"img"}
                />
              </IconButton>
            </React.Fragment>
          }
          className={classNames("__wab_instance", sty.addDrawerItem__cKDgv)}
          icon={
            <HStackBlockIcon
              className={classNames(projectcss.all, sty.svg__nS43H)}
              role={"img"}
            />
          }
          previewImage={
            <img
              alt={""}
              className={classNames(
                projectcss.all,
                projectcss.img,
                sty.img__gTwXj
              )}
              src={image49X6ZsC5Ww5}
            />
          }
        >
          {"Horizontal stack"}
        </AddDrawerItem>
        <AddDrawerItem
          actions={
            <React.Fragment>
              <IconButton
                data-plasmic-name={"prependButton7"}
                data-plasmic-override={overrides.prependButton7}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__lZ2AT)}
                    role={"img"}
                  />
                }
              >
                <BeforeIcon
                  className={classNames(projectcss.all, sty.svg__zRb2K)}
                  role={"img"}
                />
              </IconButton>
              <IconButton
                data-plasmic-name={"appendButton7"}
                data-plasmic-override={overrides.appendButton7}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__mXehT)}
                    role={"img"}
                  />
                }
                className={classNames("__wab_instance", sty.appendButton7)}
              >
                <AfterIcon
                  className={classNames(projectcss.all, sty.svg___8Vc)}
                  role={"img"}
                />
              </IconButton>
            </React.Fragment>
          }
          className={classNames("__wab_instance", sty.addDrawerItem__kVRlW)}
          icon={
            <VStackBlockIcon
              className={classNames(projectcss.all, sty.svg__cwWf2)}
              role={"img"}
            />
          }
          previewImage={
            <img
              alt={""}
              className={classNames(
                projectcss.all,
                projectcss.img,
                sty.img__ryk0M
              )}
              src={image49X6ZsC5Ww5}
            />
          }
        >
          {"Vertical stack"}
        </AddDrawerItem>
        <AddDrawerItem
          actions={
            <React.Fragment>
              <IconButton
                data-plasmic-name={"prependButton8"}
                data-plasmic-override={overrides.prependButton8}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__nmAk6)}
                    role={"img"}
                  />
                }
              >
                <BeforeIcon
                  className={classNames(projectcss.all, sty.svg__juccb)}
                  role={"img"}
                />
              </IconButton>
              <IconButton
                data-plasmic-name={"appendButton8"}
                data-plasmic-override={overrides.appendButton8}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg___0W3Np)}
                    role={"img"}
                  />
                }
                className={classNames("__wab_instance", sty.appendButton8)}
              >
                <AfterIcon
                  className={classNames(projectcss.all, sty.svg__ty8M)}
                  role={"img"}
                />
              </IconButton>
            </React.Fragment>
          }
          className={classNames("__wab_instance", sty.addDrawerItem___1H8V2)}
          icon={
            <TextBlockIcon
              className={classNames(projectcss.all, sty.svg__jZGd)}
              role={"img"}
            />
          }
          previewImage={
            <img
              alt={""}
              className={classNames(
                projectcss.all,
                projectcss.img,
                sty.img__sbx8A
              )}
              src={image49X6ZsC5Ww5}
            />
          }
        >
          {"Text"}
        </AddDrawerItem>
        <AddDrawerItem
          actions={
            <React.Fragment>
              <IconButton
                data-plasmic-name={"prependButton9"}
                data-plasmic-override={overrides.prependButton9}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__iRhT)}
                    role={"img"}
                  />
                }
              >
                <BeforeIcon
                  className={classNames(projectcss.all, sty.svg__zQkT)}
                  role={"img"}
                />
              </IconButton>
              <IconButton
                data-plasmic-name={"appendButton9"}
                data-plasmic-override={overrides.appendButton9}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__k42PM)}
                    role={"img"}
                  />
                }
                className={classNames("__wab_instance", sty.appendButton9)}
              >
                <AfterIcon
                  className={classNames(projectcss.all, sty.svg__iNaB8)}
                  role={"img"}
                />
              </IconButton>
            </React.Fragment>
          }
          className={classNames("__wab_instance", sty.addDrawerItem___48Dz0)}
          icon={
            <ImageBlockIcon
              className={classNames(projectcss.all, sty.svg__i31M3)}
              role={"img"}
            />
          }
          previewImage={
            <img
              alt={""}
              className={classNames(
                projectcss.all,
                projectcss.img,
                sty.img___5KrVx
              )}
              src={image49X6ZsC5Ww5}
            />
          }
        >
          {"Image"}
        </AddDrawerItem>
        <AddDrawerItem
          actions={
            <React.Fragment>
              <IconButton
                data-plasmic-name={"prependButton10"}
                data-plasmic-override={overrides.prependButton10}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__mW5)}
                    role={"img"}
                  />
                }
              >
                <BeforeIcon
                  className={classNames(projectcss.all, sty.svg__zlgcs)}
                  role={"img"}
                />
              </IconButton>
              <IconButton
                data-plasmic-name={"appendButton10"}
                data-plasmic-override={overrides.appendButton10}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__gQfes)}
                    role={"img"}
                  />
                }
                className={classNames("__wab_instance", sty.appendButton10)}
              >
                <AfterIcon
                  className={classNames(projectcss.all, sty.svg__uqenk)}
                  role={"img"}
                />
              </IconButton>
            </React.Fragment>
          }
          className={classNames("__wab_instance", sty.addDrawerItem__pTnHo)}
          icon={
            <IconsvgIcon
              className={classNames(projectcss.all, sty.svg__z4I7O)}
              role={"img"}
            />
          }
          previewImage={
            <img
              alt={""}
              className={classNames(
                projectcss.all,
                projectcss.img,
                sty.img__utFlq
              )}
              src={image49X6ZsC5Ww5}
            />
          }
        >
          {"Icon"}
        </AddDrawerItem>
        <ListSectionSeparator
          className={classNames(
            "__wab_instance",
            sty.listSectionSeparator__ujiKh
          )}
        />

        <ListSectionHeader
          actions={
            <IconButton
              children2={
                <ChevronDownsvgIcon
                  className={classNames(projectcss.all, sty.svg__hrkmq)}
                  role={"img"}
                />
              }
              className={classNames("__wab_instance", sty.iconButton__lo1B)}
            >
              <PlusCircleIcon
                className={classNames(projectcss.all, sty.svg__w9AgV)}
                role={"img"}
              />
            </IconButton>
          }
          className={classNames("__wab_instance", sty.listSectionHeader__usl78)}
          icon={
            <VariantGroupIcon
              className={classNames(projectcss.all, sty.svg__vnUGb)}
              role={"img"}
            />
          }
        >
          {"Project Components"}
        </ListSectionHeader>
        <AddDrawerItem
          actions={
            <React.Fragment>
              <IconButton
                data-plasmic-name={"prependButton11"}
                data-plasmic-override={overrides.prependButton11}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__wljh1)}
                    role={"img"}
                  />
                }
              >
                <BeforeIcon
                  className={classNames(projectcss.all, sty.svg__vOtk9)}
                  role={"img"}
                />
              </IconButton>
              <IconButton
                data-plasmic-name={"appendButton11"}
                data-plasmic-override={overrides.appendButton11}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg___9PD6N)}
                    role={"img"}
                  />
                }
                className={classNames("__wab_instance", sty.appendButton11)}
              >
                <AfterIcon
                  className={classNames(projectcss.all, sty.svg___7Rk4C)}
                  role={"img"}
                />
              </IconButton>
            </React.Fragment>
          }
          className={classNames("__wab_instance", sty.addDrawerItem__cm1O0)}
          icon={
            <ComponentsvgIcon
              className={classNames(projectcss.all, sty.svg__itfpM)}
              role={"img"}
            />
          }
          previewImage={
            <img
              alt={""}
              className={classNames(
                projectcss.all,
                projectcss.img,
                sty.img__gAqZh
              )}
              src={image49X6ZsC5Ww5}
            />
          }
        >
          {"Component 1"}
        </AddDrawerItem>
        <AddDrawerItem
          actions={
            <React.Fragment>
              <IconButton
                data-plasmic-name={"prependButton12"}
                data-plasmic-override={overrides.prependButton12}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__s1K48)}
                    role={"img"}
                  />
                }
              >
                <BeforeIcon
                  className={classNames(projectcss.all, sty.svg__suWqm)}
                  role={"img"}
                />
              </IconButton>
              <IconButton
                data-plasmic-name={"appendButton12"}
                data-plasmic-override={overrides.appendButton12}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__hsiQ6)}
                    role={"img"}
                  />
                }
                className={classNames("__wab_instance", sty.appendButton12)}
              >
                <AfterIcon
                  className={classNames(projectcss.all, sty.svg__j22Hr)}
                  role={"img"}
                />
              </IconButton>
            </React.Fragment>
          }
          className={classNames("__wab_instance", sty.addDrawerItem__n7GSu)}
          icon={
            <ComponentsvgIcon
              className={classNames(projectcss.all, sty.svg__fFxM)}
              role={"img"}
            />
          }
          previewImage={
            <img
              alt={""}
              className={classNames(
                projectcss.all,
                projectcss.img,
                sty.img__f1X
              )}
              src={image49X6ZsC5Ww5}
            />
          }
        >
          {"Component 2"}
        </AddDrawerItem>
        <ListSectionSeparator
          className={classNames(
            "__wab_instance",
            sty.listSectionSeparator___2MeZx
          )}
        />

        <ListSectionHeader
          actions={
            <IconButton
              children2={
                <ChevronDownsvgIcon
                  className={classNames(projectcss.all, sty.svg__llYmg)}
                  role={"img"}
                />
              }
              className={classNames("__wab_instance", sty.iconButton__fHBy)}
            >
              <PlusCircleIcon
                className={classNames(projectcss.all, sty.svg__cWsA)}
                role={"img"}
              />
            </IconButton>
          }
          className={classNames(
            "__wab_instance",
            sty.listSectionHeader___2PVsY
          )}
          icon={
            <VariantGroupIcon
              className={classNames(projectcss.all, sty.svg__pCzfg)}
              role={"img"}
            />
          }
        >
          {"Unstyled Elements"}
        </ListSectionHeader>
        <AddDrawerItem
          actions={
            <React.Fragment>
              <IconButton
                data-plasmic-name={"prependButton13"}
                data-plasmic-override={overrides.prependButton13}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg___1B8C)}
                    role={"img"}
                  />
                }
              >
                <BeforeIcon
                  className={classNames(projectcss.all, sty.svg__fuSq4)}
                  role={"img"}
                />
              </IconButton>
              <IconButton
                data-plasmic-name={"appendButton13"}
                data-plasmic-override={overrides.appendButton13}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg___7JDf0)}
                    role={"img"}
                  />
                }
                className={classNames("__wab_instance", sty.appendButton13)}
              >
                <AfterIcon
                  className={classNames(projectcss.all, sty.svg__jdpFd)}
                  role={"img"}
                />
              </IconButton>
            </React.Fragment>
          }
          className={classNames("__wab_instance", sty.addDrawerItem__lU1N)}
          icon={
            <ButtonInputIcon
              className={classNames(projectcss.all, sty.svg__jwdyh)}
              role={"img"}
            />
          }
          previewImage={
            <img
              alt={""}
              className={classNames(
                projectcss.all,
                projectcss.img,
                sty.img___44JQz
              )}
              src={image49X6ZsC5Ww5}
            />
          }
        >
          {"Button"}
        </AddDrawerItem>
        <AddDrawerItem
          actions={
            <React.Fragment>
              <IconButton
                data-plasmic-name={"prependButton14"}
                data-plasmic-override={overrides.prependButton14}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__lImIv)}
                    role={"img"}
                  />
                }
              >
                <BeforeIcon
                  className={classNames(projectcss.all, sty.svg__jwBjq)}
                  role={"img"}
                />
              </IconButton>
              <IconButton
                data-plasmic-name={"appendButton14"}
                data-plasmic-override={overrides.appendButton14}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__tmxMa)}
                    role={"img"}
                  />
                }
                className={classNames("__wab_instance", sty.appendButton14)}
              >
                <AfterIcon
                  className={classNames(projectcss.all, sty.svg__piMsT)}
                  role={"img"}
                />
              </IconButton>
            </React.Fragment>
          }
          className={classNames("__wab_instance", sty.addDrawerItem___8YL8B)}
          icon={
            <LinksvgIcon
              className={classNames(projectcss.all, sty.svg__ipL9U)}
              role={"img"}
            />
          }
          previewImage={
            <img
              alt={""}
              className={classNames(
                projectcss.all,
                projectcss.img,
                sty.img__wyKs
              )}
              src={image49X6ZsC5Ww5}
            />
          }
        >
          {"Text input"}
        </AddDrawerItem>
        <AddDrawerItem
          actions={
            <React.Fragment>
              <IconButton
                data-plasmic-name={"prependButton15"}
                data-plasmic-override={overrides.prependButton15}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__mp1Rg)}
                    role={"img"}
                  />
                }
              >
                <BeforeIcon
                  className={classNames(projectcss.all, sty.svg__eRk8J)}
                  role={"img"}
                />
              </IconButton>
              <IconButton
                data-plasmic-name={"appendButton15"}
                data-plasmic-override={overrides.appendButton15}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__mSz02)}
                    role={"img"}
                  />
                }
                className={classNames("__wab_instance", sty.appendButton15)}
              >
                <AfterIcon
                  className={classNames(projectcss.all, sty.svg__toI5)}
                  role={"img"}
                />
              </IconButton>
            </React.Fragment>
          }
          className={classNames("__wab_instance", sty.addDrawerItem__q5Al)}
          icon={
            <PasswordsvgIcon
              className={classNames(projectcss.all, sty.svg___2I7VR)}
              role={"img"}
            />
          }
          previewImage={
            <img
              alt={""}
              className={classNames(
                projectcss.all,
                projectcss.img,
                sty.img___89Dtt
              )}
              src={image49X6ZsC5Ww5}
            />
          }
        >
          {"Password input"}
        </AddDrawerItem>
        <AddDrawerItem
          actions={
            <React.Fragment>
              <IconButton
                data-plasmic-name={"prependButton16"}
                data-plasmic-override={overrides.prependButton16}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__jckH)}
                    role={"img"}
                  />
                }
              >
                <BeforeIcon
                  className={classNames(projectcss.all, sty.svg__bDe3D)}
                  role={"img"}
                />
              </IconButton>
              <IconButton
                data-plasmic-name={"appendButton16"}
                data-plasmic-override={overrides.appendButton16}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg___6Xfne)}
                    role={"img"}
                  />
                }
                className={classNames("__wab_instance", sty.appendButton16)}
              >
                <AfterIcon
                  className={classNames(projectcss.all, sty.svg___3BcHl)}
                  role={"img"}
                />
              </IconButton>
            </React.Fragment>
          }
          className={classNames("__wab_instance", sty.addDrawerItem__pRnE9)}
          icon={
            <AreaInputIcon
              className={classNames(projectcss.all, sty.svg___3SpJk)}
              role={"img"}
            />
          }
          previewImage={
            <img
              alt={""}
              className={classNames(
                projectcss.all,
                projectcss.img,
                sty.img___5R4Mh
              )}
              src={image49X6ZsC5Ww5}
            />
          }
        >
          {"Multiline text input"}
        </AddDrawerItem>
        <AddDrawerItem
          actions={
            <React.Fragment>
              <IconButton
                data-plasmic-name={"prependButton17"}
                data-plasmic-override={overrides.prependButton17}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__rsNvJ)}
                    role={"img"}
                  />
                }
              >
                <BeforeIcon
                  className={classNames(projectcss.all, sty.svg__fqe53)}
                  role={"img"}
                />
              </IconButton>
              <IconButton
                data-plasmic-name={"appendButton17"}
                data-plasmic-override={overrides.appendButton17}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__kIGoB)}
                    role={"img"}
                  />
                }
                className={classNames("__wab_instance", sty.appendButton17)}
              >
                <AfterIcon
                  className={classNames(projectcss.all, sty.svg__dok6R)}
                  role={"img"}
                />
              </IconButton>
            </React.Fragment>
          }
          className={classNames("__wab_instance", sty.addDrawerItem__obbHk)}
          icon={
            <LinksvgIcon
              className={classNames(projectcss.all, sty.svg__dy7RD)}
              role={"img"}
            />
          }
          previewImage={
            <img
              alt={""}
              className={classNames(
                projectcss.all,
                projectcss.img,
                sty.img___243Qb
              )}
              src={image49X6ZsC5Ww5}
            />
          }
        >
          {"Link"}
        </AddDrawerItem>
        <AddDrawerItem
          actions={
            <React.Fragment>
              <IconButton
                data-plasmic-name={"prependButton18"}
                data-plasmic-override={overrides.prependButton18}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__gyayJ)}
                    role={"img"}
                  />
                }
              >
                <BeforeIcon
                  className={classNames(projectcss.all, sty.svg__l5De)}
                  role={"img"}
                />
              </IconButton>
              <IconButton
                data-plasmic-name={"appendButton18"}
                data-plasmic-override={overrides.appendButton18}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg___3Ers4)}
                    role={"img"}
                  />
                }
                className={classNames("__wab_instance", sty.appendButton18)}
              >
                <AfterIcon
                  className={classNames(projectcss.all, sty.svg__pvuZ4)}
                  role={"img"}
                />
              </IconButton>
            </React.Fragment>
          }
          className={classNames("__wab_instance", sty.addDrawerItem__bXzDe)}
          icon={
            <HeadingsvgIcon
              className={classNames(projectcss.all, sty.svg___56DaA)}
              role={"img"}
            />
          }
          previewImage={
            <img
              alt={""}
              className={classNames(
                projectcss.all,
                projectcss.img,
                sty.img__nS1Lb
              )}
              src={image49X6ZsC5Ww5}
            />
          }
        >
          {"Heading"}
        </AddDrawerItem>
        <ListSectionSeparator
          className={classNames(
            "__wab_instance",
            sty.listSectionSeparator___6HUsk
          )}
        />

        <ListSectionHeader
          actions={
            <IconButton
              children2={
                <ChevronDownsvgIcon
                  className={classNames(projectcss.all, sty.svg___6BSgL)}
                  role={"img"}
                />
              }
              className={classNames("__wab_instance", sty.iconButton__q4H8L)}
            >
              <PlusCircleIcon
                className={classNames(projectcss.all, sty.svg__bvO2B)}
                role={"img"}
              />
            </IconButton>
          }
          className={classNames(
            "__wab_instance",
            sty.listSectionHeader___5VVf3
          )}
          icon={
            <VariantGroupIcon
              className={classNames(projectcss.all, sty.svg__helRg)}
              role={"img"}
            />
          }
        >
          {"Icons"}
        </ListSectionHeader>
        <AddDrawerItem
          actions={
            <React.Fragment>
              <IconButton
                data-plasmic-name={"prependButton"}
                data-plasmic-override={overrides.prependButton}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__rs1Eo)}
                    role={"img"}
                  />
                }
              >
                <BeforeIcon
                  className={classNames(projectcss.all, sty.svg__kJvSt)}
                  role={"img"}
                />
              </IconButton>
              <IconButton
                data-plasmic-name={"appendButton"}
                data-plasmic-override={overrides.appendButton}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg___1LAf)}
                    role={"img"}
                  />
                }
                className={classNames("__wab_instance", sty.appendButton)}
              >
                <AfterIcon
                  className={classNames(projectcss.all, sty.svg__mPQea)}
                  role={"img"}
                />
              </IconButton>
            </React.Fragment>
          }
          className={classNames("__wab_instance", sty.addDrawerItem__bMtal)}
          icon={
            <LinksvgIcon
              className={classNames(projectcss.all, sty.svg__mN6Q)}
              role={"img"}
            />
          }
          previewImage={
            <img
              alt={""}
              className={classNames(
                projectcss.all,
                projectcss.img,
                sty.img__oj7M0
              )}
              src={image49X6ZsC5Ww5}
            />
          }
        >
          {"Link"}
        </AddDrawerItem>
        <ListSectionSeparator
          className={classNames(
            "__wab_instance",
            sty.listSectionSeparator__aHo2T
          )}
        />

        <ListSectionHeader
          actions={
            <IconButton
              children2={
                <ChevronDownsvgIcon
                  className={classNames(projectcss.all, sty.svg__jIeb)}
                  role={"img"}
                />
              }
              className={classNames("__wab_instance", sty.iconButton__gfBI)}
            >
              <PlusCircleIcon
                className={classNames(projectcss.all, sty.svg__kJblK)}
                role={"img"}
              />
            </IconButton>
          }
          className={classNames("__wab_instance", sty.listSectionHeader__tdWbk)}
          icon={
            <VariantGroupIcon
              className={classNames(projectcss.all, sty.svg__vfPvX)}
              role={"img"}
            />
          }
        >
          {"Images"}
        </ListSectionHeader>
        <AddDrawerItem
          actions={
            <React.Fragment>
              <IconButton
                data-plasmic-name={"prependButton232222222222322"}
                data-plasmic-override={overrides.prependButton232222222222322}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__xMsEt)}
                    role={"img"}
                  />
                }
              >
                <BeforeIcon
                  className={classNames(projectcss.all, sty.svg__tBkk4)}
                  role={"img"}
                />
              </IconButton>
              <IconButton
                data-plasmic-name={"appendButton232222222222322"}
                data-plasmic-override={overrides.appendButton232222222222322}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__ugkP)}
                    role={"img"}
                  />
                }
                className={classNames(
                  "__wab_instance",
                  sty.appendButton232222222222322
                )}
              >
                <AfterIcon
                  className={classNames(projectcss.all, sty.svg__jmaUm)}
                  role={"img"}
                />
              </IconButton>
            </React.Fragment>
          }
          className={classNames("__wab_instance", sty.addDrawerItem___9O8XK)}
          icon={
            <LinksvgIcon
              className={classNames(projectcss.all, sty.svg__juSOi)}
              role={"img"}
            />
          }
          previewImage={
            <img
              alt={""}
              className={classNames(
                projectcss.all,
                projectcss.img,
                sty.img__nvTgZ
              )}
              src={image49X6ZsC5Ww5}
            />
          }
        >
          {"Link"}
        </AddDrawerItem>
        <AddDrawerItem
          actions={
            <React.Fragment>
              <IconButton
                data-plasmic-name={"prependButton2322222222223222"}
                data-plasmic-override={overrides.prependButton2322222222223222}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__kuRn2)}
                    role={"img"}
                  />
                }
              >
                <BeforeIcon
                  className={classNames(projectcss.all, sty.svg__qOpMj)}
                  role={"img"}
                />
              </IconButton>
              <IconButton
                data-plasmic-name={"appendButton2322222222223222"}
                data-plasmic-override={overrides.appendButton2322222222223222}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__xLxWp)}
                    role={"img"}
                  />
                }
                className={classNames(
                  "__wab_instance",
                  sty.appendButton2322222222223222
                )}
              >
                <AfterIcon
                  className={classNames(projectcss.all, sty.svg__cCwci)}
                  role={"img"}
                />
              </IconButton>
            </React.Fragment>
          }
          className={classNames("__wab_instance", sty.addDrawerItem___3FKOi)}
          icon={
            <LinksvgIcon
              className={classNames(projectcss.all, sty.svg__lJmqf)}
              role={"img"}
            />
          }
          previewImage={
            <img
              alt={""}
              className={classNames(
                projectcss.all,
                projectcss.img,
                sty.img__rbBfy
              )}
              src={image49X6ZsC5Ww5}
            />
          }
        >
          {"Link"}
        </AddDrawerItem>
        <AddDrawerItem
          actions={
            <React.Fragment>
              <IconButton
                data-plasmic-name={"prependButton23222222222232222"}
                data-plasmic-override={overrides.prependButton23222222222232222}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__nnaln)}
                    role={"img"}
                  />
                }
              >
                <BeforeIcon
                  className={classNames(projectcss.all, sty.svg__caNvZ)}
                  role={"img"}
                />
              </IconButton>
              <IconButton
                data-plasmic-name={"appendButton23222222222232222"}
                data-plasmic-override={overrides.appendButton23222222222232222}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__r9Pfs)}
                    role={"img"}
                  />
                }
                className={classNames(
                  "__wab_instance",
                  sty.appendButton23222222222232222
                )}
              >
                <AfterIcon
                  className={classNames(projectcss.all, sty.svg__slPl)}
                  role={"img"}
                />
              </IconButton>
            </React.Fragment>
          }
          className={classNames("__wab_instance", sty.addDrawerItem__oIwH)}
          icon={
            <LinksvgIcon
              className={classNames(projectcss.all, sty.svg__e4MX)}
              role={"img"}
            />
          }
          previewImage={
            <img
              alt={""}
              className={classNames(
                projectcss.all,
                projectcss.img,
                sty.img__vKlvL
              )}
              src={image49X6ZsC5Ww5}
            />
          }
        >
          {"Link"}
        </AddDrawerItem>
        <AddDrawerItem
          actions={
            <React.Fragment>
              <IconButton
                data-plasmic-name={"prependButton232222222222322222"}
                data-plasmic-override={
                  overrides.prependButton232222222222322222
                }
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__xg7Ij)}
                    role={"img"}
                  />
                }
              >
                <BeforeIcon
                  className={classNames(projectcss.all, sty.svg__nrb5Q)}
                  role={"img"}
                />
              </IconButton>
              <IconButton
                data-plasmic-name={"appendButton232222222222322222"}
                data-plasmic-override={overrides.appendButton232222222222322222}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__kMh2D)}
                    role={"img"}
                  />
                }
                className={classNames(
                  "__wab_instance",
                  sty.appendButton232222222222322222
                )}
              >
                <AfterIcon
                  className={classNames(projectcss.all, sty.svg__pZqA0)}
                  role={"img"}
                />
              </IconButton>
            </React.Fragment>
          }
          className={classNames("__wab_instance", sty.addDrawerItem__a0CwM)}
          icon={
            <LinksvgIcon
              className={classNames(projectcss.all, sty.svg__pkkEk)}
              role={"img"}
            />
          }
          previewImage={
            <img
              alt={""}
              className={classNames(
                projectcss.all,
                projectcss.img,
                sty.img___0FmDw
              )}
              src={image49X6ZsC5Ww5}
            />
          }
        >
          {"Link"}
        </AddDrawerItem>
        <AddDrawerItem
          actions={
            <React.Fragment>
              <IconButton
                data-plasmic-name={"prependButton23222222222232"}
                data-plasmic-override={overrides.prependButton23222222222232}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__xIvK)}
                    role={"img"}
                  />
                }
              >
                <BeforeIcon
                  className={classNames(projectcss.all, sty.svg__o0Mpg)}
                  role={"img"}
                />
              </IconButton>
              <IconButton
                data-plasmic-name={"appendButton23222222222232"}
                data-plasmic-override={overrides.appendButton23222222222232}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg___07CjN)}
                    role={"img"}
                  />
                }
                className={classNames(
                  "__wab_instance",
                  sty.appendButton23222222222232
                )}
              >
                <AfterIcon
                  className={classNames(projectcss.all, sty.svg__eGaVv)}
                  role={"img"}
                />
              </IconButton>
            </React.Fragment>
          }
          className={classNames("__wab_instance", sty.addDrawerItem__uHqmq)}
          icon={
            <LinksvgIcon
              className={classNames(projectcss.all, sty.svg__v7Plc)}
              role={"img"}
            />
          }
          previewImage={
            <img
              alt={""}
              className={classNames(
                projectcss.all,
                projectcss.img,
                sty.img__ksokA
              )}
              src={image49X6ZsC5Ww5}
            />
          }
        >
          {"Whatevs"}
        </AddDrawerItem>
        <AddDrawerItem
          actions={
            <React.Fragment>
              <IconButton
                data-plasmic-name={"prependButton232222222222"}
                data-plasmic-override={overrides.prependButton232222222222}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__kTmg3)}
                    role={"img"}
                  />
                }
              >
                <BeforeIcon
                  className={classNames(projectcss.all, sty.svg__kpw8L)}
                  role={"img"}
                />
              </IconButton>
              <IconButton
                data-plasmic-name={"appendButton232222222222"}
                data-plasmic-override={overrides.appendButton232222222222}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__ih3Vu)}
                    role={"img"}
                  />
                }
                className={classNames(
                  "__wab_instance",
                  sty.appendButton232222222222
                )}
              >
                <AfterIcon
                  className={classNames(projectcss.all, sty.svg___42RMg)}
                  role={"img"}
                />
              </IconButton>
            </React.Fragment>
          }
          className={classNames("__wab_instance", sty.addDrawerItem__vfxpC)}
          icon={
            <LinksvgIcon
              className={classNames(projectcss.all, sty.svg__v0Z8N)}
              role={"img"}
            />
          }
          previewImage={
            <img
              alt={""}
              className={classNames(
                projectcss.all,
                projectcss.img,
                sty.img__dGf68
              )}
              src={image49X6ZsC5Ww5}
            />
          }
        >
          {"Link"}
        </AddDrawerItem>
        <AddDrawerItem
          actions={
            <React.Fragment>
              <IconButton
                data-plasmic-name={"prependButton22"}
                data-plasmic-override={overrides.prependButton22}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__hwrDg)}
                    role={"img"}
                  />
                }
              >
                <BeforeIcon
                  className={classNames(projectcss.all, sty.svg__cF1KO)}
                  role={"img"}
                />
              </IconButton>
              <IconButton
                data-plasmic-name={"appendButton22"}
                data-plasmic-override={overrides.appendButton22}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__ksw7C)}
                    role={"img"}
                  />
                }
                className={classNames("__wab_instance", sty.appendButton22)}
              >
                <AfterIcon
                  className={classNames(projectcss.all, sty.svg__oxKn)}
                  role={"img"}
                />
              </IconButton>
            </React.Fragment>
          }
          className={classNames("__wab_instance", sty.addDrawerItem__ysAsM)}
          icon={
            <LinksvgIcon
              className={classNames(projectcss.all, sty.svg__sllnn)}
              role={"img"}
            />
          }
          previewImage={
            <img
              alt={""}
              className={classNames(
                projectcss.all,
                projectcss.img,
                sty.img__mfix
              )}
              src={image49X6ZsC5Ww5}
            />
          }
        >
          {"Link"}
        </AddDrawerItem>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "freeBox",
    "placementOptions",
    "placeInside",
    "placeBefore",
    "placeAfter",
    "text",
    "leftSearchPanel",
    "content",
    "prependButton2",
    "appendButton2",
    "prependButton3",
    "appendButton3",
    "prependButton4",
    "appendButton4",
    "prependButton5",
    "appendButton5",
    "prependButton6",
    "appendButton6",
    "prependButton7",
    "appendButton7",
    "prependButton8",
    "appendButton8",
    "prependButton9",
    "appendButton9",
    "prependButton10",
    "appendButton10",
    "prependButton11",
    "appendButton11",
    "prependButton12",
    "appendButton12",
    "prependButton13",
    "appendButton13",
    "prependButton14",
    "appendButton14",
    "prependButton15",
    "appendButton15",
    "prependButton16",
    "appendButton16",
    "prependButton17",
    "appendButton17",
    "prependButton18",
    "appendButton18",
    "prependButton",
    "appendButton",
    "prependButton232222222222322",
    "appendButton232222222222322",
    "prependButton2322222222223222",
    "appendButton2322222222223222",
    "prependButton23222222222232222",
    "appendButton23222222222232222",
    "prependButton232222222222322222",
    "appendButton232222222222322222",
    "prependButton23222222222232",
    "appendButton23222222222232",
    "prependButton232222222222",
    "appendButton232222222222",
    "prependButton22",
    "appendButton22",
  ],
  freeBox: [
    "freeBox",
    "placementOptions",
    "placeInside",
    "placeBefore",
    "placeAfter",
    "text",
  ],
  placementOptions: [
    "placementOptions",
    "placeInside",
    "placeBefore",
    "placeAfter",
    "text",
  ],
  placeInside: ["placeInside"],
  placeBefore: ["placeBefore"],
  placeAfter: ["placeAfter", "text"],
  text: ["text"],
  leftSearchPanel: ["leftSearchPanel"],
  content: [
    "content",
    "prependButton2",
    "appendButton2",
    "prependButton3",
    "appendButton3",
    "prependButton4",
    "appendButton4",
    "prependButton5",
    "appendButton5",
    "prependButton6",
    "appendButton6",
    "prependButton7",
    "appendButton7",
    "prependButton8",
    "appendButton8",
    "prependButton9",
    "appendButton9",
    "prependButton10",
    "appendButton10",
    "prependButton11",
    "appendButton11",
    "prependButton12",
    "appendButton12",
    "prependButton13",
    "appendButton13",
    "prependButton14",
    "appendButton14",
    "prependButton15",
    "appendButton15",
    "prependButton16",
    "appendButton16",
    "prependButton17",
    "appendButton17",
    "prependButton18",
    "appendButton18",
    "prependButton",
    "appendButton",
    "prependButton232222222222322",
    "appendButton232222222222322",
    "prependButton2322222222223222",
    "appendButton2322222222223222",
    "prependButton23222222222232222",
    "appendButton23222222222232222",
    "prependButton232222222222322222",
    "appendButton232222222222322222",
    "prependButton23222222222232",
    "appendButton23222222222232",
    "prependButton232222222222",
    "appendButton232222222222",
    "prependButton22",
    "appendButton22",
  ],
  prependButton2: ["prependButton2"],
  appendButton2: ["appendButton2"],
  prependButton3: ["prependButton3"],
  appendButton3: ["appendButton3"],
  prependButton4: ["prependButton4"],
  appendButton4: ["appendButton4"],
  prependButton5: ["prependButton5"],
  appendButton5: ["appendButton5"],
  prependButton6: ["prependButton6"],
  appendButton6: ["appendButton6"],
  prependButton7: ["prependButton7"],
  appendButton7: ["appendButton7"],
  prependButton8: ["prependButton8"],
  appendButton8: ["appendButton8"],
  prependButton9: ["prependButton9"],
  appendButton9: ["appendButton9"],
  prependButton10: ["prependButton10"],
  appendButton10: ["appendButton10"],
  prependButton11: ["prependButton11"],
  appendButton11: ["appendButton11"],
  prependButton12: ["prependButton12"],
  appendButton12: ["appendButton12"],
  prependButton13: ["prependButton13"],
  appendButton13: ["appendButton13"],
  prependButton14: ["prependButton14"],
  appendButton14: ["appendButton14"],
  prependButton15: ["prependButton15"],
  appendButton15: ["appendButton15"],
  prependButton16: ["prependButton16"],
  appendButton16: ["appendButton16"],
  prependButton17: ["prependButton17"],
  appendButton17: ["appendButton17"],
  prependButton18: ["prependButton18"],
  appendButton18: ["appendButton18"],
  prependButton: ["prependButton"],
  appendButton: ["appendButton"],
  prependButton232222222222322: ["prependButton232222222222322"],
  appendButton232222222222322: ["appendButton232222222222322"],
  prependButton2322222222223222: ["prependButton2322222222223222"],
  appendButton2322222222223222: ["appendButton2322222222223222"],
  prependButton23222222222232222: ["prependButton23222222222232222"],
  appendButton23222222222232222: ["appendButton23222222222232222"],
  prependButton232222222222322222: ["prependButton232222222222322222"],
  appendButton232222222222322222: ["appendButton232222222222322222"],
  prependButton23222222222232: ["prependButton23222222222232"],
  appendButton23222222222232: ["appendButton23222222222232"],
  prependButton232222222222: ["prependButton232222222222"],
  appendButton232222222222: ["appendButton232222222222"],
  prependButton22: ["prependButton22"],
  appendButton22: ["appendButton22"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  placementOptions: "div";
  placeInside: typeof InlineInsertionPosition;
  placeBefore: typeof InlineInsertionPosition;
  placeAfter: typeof InlineInsertionPosition;
  text: "div";
  leftSearchPanel: typeof LeftSearchPanel;
  content: "div";
  prependButton2: typeof IconButton;
  appendButton2: typeof IconButton;
  prependButton3: typeof IconButton;
  appendButton3: typeof IconButton;
  prependButton4: typeof IconButton;
  appendButton4: typeof IconButton;
  prependButton5: typeof IconButton;
  appendButton5: typeof IconButton;
  prependButton6: typeof IconButton;
  appendButton6: typeof IconButton;
  prependButton7: typeof IconButton;
  appendButton7: typeof IconButton;
  prependButton8: typeof IconButton;
  appendButton8: typeof IconButton;
  prependButton9: typeof IconButton;
  appendButton9: typeof IconButton;
  prependButton10: typeof IconButton;
  appendButton10: typeof IconButton;
  prependButton11: typeof IconButton;
  appendButton11: typeof IconButton;
  prependButton12: typeof IconButton;
  appendButton12: typeof IconButton;
  prependButton13: typeof IconButton;
  appendButton13: typeof IconButton;
  prependButton14: typeof IconButton;
  appendButton14: typeof IconButton;
  prependButton15: typeof IconButton;
  appendButton15: typeof IconButton;
  prependButton16: typeof IconButton;
  appendButton16: typeof IconButton;
  prependButton17: typeof IconButton;
  appendButton17: typeof IconButton;
  prependButton18: typeof IconButton;
  appendButton18: typeof IconButton;
  prependButton: typeof IconButton;
  appendButton: typeof IconButton;
  prependButton232222222222322: typeof IconButton;
  appendButton232222222222322: typeof IconButton;
  prependButton2322222222223222: typeof IconButton;
  appendButton2322222222223222: typeof IconButton;
  prependButton23222222222232222: typeof IconButton;
  appendButton23222222222232222: typeof IconButton;
  prependButton232222222222322222: typeof IconButton;
  appendButton232222222222322222: typeof IconButton;
  prependButton23222222222232: typeof IconButton;
  appendButton23222222222232: typeof IconButton;
  prependButton232222222222: typeof IconButton;
  appendButton232222222222: typeof IconButton;
  prependButton22: typeof IconButton;
  appendButton22: typeof IconButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInlineAddDrawer__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInlineAddDrawer__VariantsArgs;
    args?: PlasmicInlineAddDrawer__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicInlineAddDrawer__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicInlineAddDrawer__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicInlineAddDrawer__ArgProps,
          internalVariantPropNames: PlasmicInlineAddDrawer__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicInlineAddDrawer__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInlineAddDrawer";
  } else {
    func.displayName = `PlasmicInlineAddDrawer.${nodeName}`;
  }
  return func;
}

export const PlasmicInlineAddDrawer = Object.assign(
  // Top-level PlasmicInlineAddDrawer renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    placementOptions: makeNodeComponent("placementOptions"),
    placeInside: makeNodeComponent("placeInside"),
    placeBefore: makeNodeComponent("placeBefore"),
    placeAfter: makeNodeComponent("placeAfter"),
    text: makeNodeComponent("text"),
    leftSearchPanel: makeNodeComponent("leftSearchPanel"),
    content: makeNodeComponent("content"),
    prependButton2: makeNodeComponent("prependButton2"),
    appendButton2: makeNodeComponent("appendButton2"),
    prependButton3: makeNodeComponent("prependButton3"),
    appendButton3: makeNodeComponent("appendButton3"),
    prependButton4: makeNodeComponent("prependButton4"),
    appendButton4: makeNodeComponent("appendButton4"),
    prependButton5: makeNodeComponent("prependButton5"),
    appendButton5: makeNodeComponent("appendButton5"),
    prependButton6: makeNodeComponent("prependButton6"),
    appendButton6: makeNodeComponent("appendButton6"),
    prependButton7: makeNodeComponent("prependButton7"),
    appendButton7: makeNodeComponent("appendButton7"),
    prependButton8: makeNodeComponent("prependButton8"),
    appendButton8: makeNodeComponent("appendButton8"),
    prependButton9: makeNodeComponent("prependButton9"),
    appendButton9: makeNodeComponent("appendButton9"),
    prependButton10: makeNodeComponent("prependButton10"),
    appendButton10: makeNodeComponent("appendButton10"),
    prependButton11: makeNodeComponent("prependButton11"),
    appendButton11: makeNodeComponent("appendButton11"),
    prependButton12: makeNodeComponent("prependButton12"),
    appendButton12: makeNodeComponent("appendButton12"),
    prependButton13: makeNodeComponent("prependButton13"),
    appendButton13: makeNodeComponent("appendButton13"),
    prependButton14: makeNodeComponent("prependButton14"),
    appendButton14: makeNodeComponent("appendButton14"),
    prependButton15: makeNodeComponent("prependButton15"),
    appendButton15: makeNodeComponent("appendButton15"),
    prependButton16: makeNodeComponent("prependButton16"),
    appendButton16: makeNodeComponent("appendButton16"),
    prependButton17: makeNodeComponent("prependButton17"),
    appendButton17: makeNodeComponent("appendButton17"),
    prependButton18: makeNodeComponent("prependButton18"),
    appendButton18: makeNodeComponent("appendButton18"),
    prependButton: makeNodeComponent("prependButton"),
    appendButton: makeNodeComponent("appendButton"),
    prependButton232222222222322: makeNodeComponent(
      "prependButton232222222222322"
    ),
    appendButton232222222222322: makeNodeComponent(
      "appendButton232222222222322"
    ),
    prependButton2322222222223222: makeNodeComponent(
      "prependButton2322222222223222"
    ),
    appendButton2322222222223222: makeNodeComponent(
      "appendButton2322222222223222"
    ),
    prependButton23222222222232222: makeNodeComponent(
      "prependButton23222222222232222"
    ),
    appendButton23222222222232222: makeNodeComponent(
      "appendButton23222222222232222"
    ),
    prependButton232222222222322222: makeNodeComponent(
      "prependButton232222222222322222"
    ),
    appendButton232222222222322222: makeNodeComponent(
      "appendButton232222222222322222"
    ),
    prependButton23222222222232: makeNodeComponent(
      "prependButton23222222222232"
    ),
    appendButton23222222222232: makeNodeComponent("appendButton23222222222232"),
    prependButton232222222222: makeNodeComponent("prependButton232222222222"),
    appendButton232222222222: makeNodeComponent("appendButton232222222222"),
    prependButton22: makeNodeComponent("prependButton22"),
    appendButton22: makeNodeComponent("appendButton22"),

    // Metadata about props expected for PlasmicInlineAddDrawer
    internalVariantProps: PlasmicInlineAddDrawer__VariantProps,
    internalArgProps: PlasmicInlineAddDrawer__ArgProps,
  }
);

export default PlasmicInlineAddDrawer;
/* prettier-ignore-end */
