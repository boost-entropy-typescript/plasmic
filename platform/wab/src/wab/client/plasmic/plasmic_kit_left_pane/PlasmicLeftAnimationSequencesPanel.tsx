/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aukbrhkegRkQ6KizvhdUPT
// Component: ORzNrJx0uEH6

import * as React from "react";

import {
  Flex as Flex__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import LeftPaneHeader from "../../components/studio/LeftPaneHeader"; // plasmic-import: XLa52PvduIy/component
import LeftSearchPanel from "../../components/studio/LeftSearchPanel"; // plasmic-import: TqAPn0srTq/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component
import { _useStyleTokens as useStyleTokens_plasmic_kit_color_tokens } from "../plasmic_kit_color_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_kit_design_system } from "../plasmic_kit_design_system/PlasmicStyleTokensProvider"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_kit_style_controls } from "../plasmic_kit_style_controls/PlasmicStyleTokensProvider"; // plasmic-import: gYEVvAzCcLMHDVPvuYxkFh/styleTokensProvider
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: aukbrhkegRkQ6KizvhdUPT/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../PP__plasmickit_left_pane.module.css"; // plasmic-import: aukbrhkegRkQ6KizvhdUPT/projectcss
import sty from "./PlasmicLeftAnimationSequencesPanel.module.css"; // plasmic-import: ORzNrJx0uEH6/css

import PlusIcon from "../plasmic_kit/PlasmicIcon__Plus"; // plasmic-import: -k064DlQ8k8-L/icon
import ChevronDownSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon

createPlasmicElementProxy;

export type PlasmicLeftAnimationSequencesPanel__VariantMembers = {};
export type PlasmicLeftAnimationSequencesPanel__VariantsArgs = {};
type VariantPropType = keyof PlasmicLeftAnimationSequencesPanel__VariantsArgs;
export const PlasmicLeftAnimationSequencesPanel__VariantProps =
  new Array<VariantPropType>();

export type PlasmicLeftAnimationSequencesPanel__ArgsType = {};
type ArgPropType = keyof PlasmicLeftAnimationSequencesPanel__ArgsType;
export const PlasmicLeftAnimationSequencesPanel__ArgProps =
  new Array<ArgPropType>();

export type PlasmicLeftAnimationSequencesPanel__OverridesType = {
  root?: Flex__<"div">;
  leftSearchPanel?: Flex__<typeof LeftSearchPanel>;
  animationSequencesHeader?: Flex__<typeof LeftPaneHeader>;
  newAnimationSequenceButton?: Flex__<typeof Button>;
  content?: Flex__<"div">;
};

export interface DefaultLeftAnimationSequencesPanelProps {
  className?: string;
}

const $$ = {};

function PlasmicLeftAnimationSequencesPanel__RenderFunc(props: {
  variants: PlasmicLeftAnimationSequencesPanel__VariantsArgs;
  args: PlasmicLeftAnimationSequencesPanel__ArgsType;
  overrides: PlasmicLeftAnimationSequencesPanel__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_plasmic_kit_design_system =
    useStyleTokens_plasmic_kit_design_system();
  const styleTokensClassNames_plasmic_kit_color_tokens =
    useStyleTokens_plasmic_kit_color_tokens();
  const styleTokensClassNames_plasmic_kit_style_controls =
    useStyleTokens_plasmic_kit_style_controls();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_plasmic_kit_design_system,
        styleTokensClassNames_plasmic_kit_color_tokens,
        styleTokensClassNames_plasmic_kit_style_controls,
        sty.root
      )}
    >
      <LeftSearchPanel
        data-plasmic-name={"leftSearchPanel"}
        data-plasmic-override={overrides.leftSearchPanel}
        className={classNames("__wab_instance", sty.leftSearchPanel)}
        rightOptions={"filterControls"}
      />

      <LeftPaneHeader
        data-plasmic-name={"animationSequencesHeader"}
        data-plasmic-override={overrides.animationSequencesHeader}
        actions={
          <Button
            data-plasmic-name={"newAnimationSequenceButton"}
            data-plasmic-override={overrides.newAnimationSequenceButton}
            endIcon={
              <ChevronDownSvgIcon
                className={classNames(projectcss.all, sty.svg__uxN86)}
                role={"img"}
              />
            }
            size={"wide"}
            startIcon={
              <PlusIcon
                className={classNames(projectcss.all, sty.svg__vTvci)}
                role={"img"}
              />
            }
            type={["secondary"]}
            withIcons={["startIcon"]}
          >
            {"New animation sequence"}
          </Button>
        }
        className={classNames("__wab_instance", sty.animationSequencesHeader)}
        description={
          "Animation sequences are bundles of animation keyframe styles that you can link to any animation on element. You might create animation sequences to define consistent styles set of keyframes to be reused in multiple animations."
        }
        title={"Animation sequences"}
      />

      <div
        data-plasmic-name={"content"}
        data-plasmic-override={overrides.content}
        className={classNames(projectcss.all, sty.content)}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "leftSearchPanel",
    "animationSequencesHeader",
    "newAnimationSequenceButton",
    "content",
  ],
  leftSearchPanel: ["leftSearchPanel"],
  animationSequencesHeader: [
    "animationSequencesHeader",
    "newAnimationSequenceButton",
  ],
  newAnimationSequenceButton: ["newAnimationSequenceButton"],
  content: ["content"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  leftSearchPanel: typeof LeftSearchPanel;
  animationSequencesHeader: typeof LeftPaneHeader;
  newAnimationSequenceButton: typeof Button;
  content: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLeftAnimationSequencesPanel__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLeftAnimationSequencesPanel__VariantsArgs;
    args?: PlasmicLeftAnimationSequencesPanel__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<
    // Specify variants directly as props
    PlasmicLeftAnimationSequencesPanel__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<PlasmicLeftAnimationSequencesPanel__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLeftAnimationSequencesPanel__ArgProps,
          internalVariantPropNames:
            PlasmicLeftAnimationSequencesPanel__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicLeftAnimationSequencesPanel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLeftAnimationSequencesPanel";
  } else {
    func.displayName = `PlasmicLeftAnimationSequencesPanel.${nodeName}`;
  }
  return func;
}

export const PlasmicLeftAnimationSequencesPanel = Object.assign(
  // Top-level PlasmicLeftAnimationSequencesPanel renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    leftSearchPanel: makeNodeComponent("leftSearchPanel"),
    animationSequencesHeader: makeNodeComponent("animationSequencesHeader"),
    newAnimationSequenceButton: makeNodeComponent("newAnimationSequenceButton"),
    content: makeNodeComponent("content"),

    // Metadata about props expected for PlasmicLeftAnimationSequencesPanel
    internalVariantProps: PlasmicLeftAnimationSequencesPanel__VariantProps,
    internalArgProps: PlasmicLeftAnimationSequencesPanel__ArgProps,
  }
);

export default PlasmicLeftAnimationSequencesPanel;
/* prettier-ignore-end */
