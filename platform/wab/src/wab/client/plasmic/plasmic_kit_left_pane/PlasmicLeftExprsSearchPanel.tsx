/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aukbrhkegRkQ6KizvhdUPT
// Component: TcSQ7HIQUWt9

import * as React from "react";

import {
  Flex as Flex__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  renderPlasmicSlot,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import LeftSearchPanel from "../../components/studio/LeftSearchPanel"; // plasmic-import: TqAPn0srTq/component
import IconButton from "../../components/widgets/IconButton"; // plasmic-import: LPry-TF4j22a/component
import { _useStyleTokens as useStyleTokens_plasmic_kit_color_tokens } from "../plasmic_kit_color_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_kit_design_system } from "../plasmic_kit_design_system/PlasmicStyleTokensProvider"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_kit_style_controls } from "../plasmic_kit_style_controls/PlasmicStyleTokensProvider"; // plasmic-import: gYEVvAzCcLMHDVPvuYxkFh/styleTokensProvider
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: aukbrhkegRkQ6KizvhdUPT/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../PP__plasmickit_left_pane.module.css"; // plasmic-import: aukbrhkegRkQ6KizvhdUPT/projectcss
import sty from "./PlasmicLeftExprsSearchPanel.module.css"; // plasmic-import: TcSQ7HIQUWt9/css

import RefreshSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__RefreshSvg"; // plasmic-import: PEaq_S7gQ/icon

createPlasmicElementProxy;

export type PlasmicLeftExprsSearchPanel__VariantMembers = {};
export type PlasmicLeftExprsSearchPanel__VariantsArgs = {};
type VariantPropType = keyof PlasmicLeftExprsSearchPanel__VariantsArgs;
export const PlasmicLeftExprsSearchPanel__VariantProps =
  new Array<VariantPropType>();

export type PlasmicLeftExprsSearchPanel__ArgsType = {
  exprsText?: string;
  typeFilter?: React.ReactNode;
  groupBy?: React.ReactNode;
  exprsLabel?: React.ReactNode;
  refreshIcon?: React.ReactNode;
};
type ArgPropType = keyof PlasmicLeftExprsSearchPanel__ArgsType;
export const PlasmicLeftExprsSearchPanel__ArgProps = new Array<ArgPropType>(
  "exprsText",
  "typeFilter",
  "groupBy",
  "exprsLabel",
  "refreshIcon"
);

export type PlasmicLeftExprsSearchPanel__OverridesType = {
  root?: Flex__<"div">;
  leftSearchPanel?: Flex__<typeof LeftSearchPanel>;
  exprsFilter?: Flex__<"div">;
  content?: Flex__<"div">;
};

export interface DefaultLeftExprsSearchPanelProps {
  exprsText?: string;
  typeFilter?: React.ReactNode;
  groupBy?: React.ReactNode;
  exprsLabel?: React.ReactNode;
  refreshIcon?: React.ReactNode;
  className?: string;
}

const $$ = {};

function PlasmicLeftExprsSearchPanel__RenderFunc(props: {
  variants: PlasmicLeftExprsSearchPanel__VariantsArgs;
  args: PlasmicLeftExprsSearchPanel__ArgsType;
  overrides: PlasmicLeftExprsSearchPanel__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          exprsText: "Found 6 Expressions",
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_plasmic_kit_design_system =
    useStyleTokens_plasmic_kit_design_system();
  const styleTokensClassNames_plasmic_kit_color_tokens =
    useStyleTokens_plasmic_kit_color_tokens();
  const styleTokensClassNames_plasmic_kit_style_controls =
    useStyleTokens_plasmic_kit_style_controls();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_plasmic_kit_design_system,
        styleTokensClassNames_plasmic_kit_color_tokens,
        styleTokensClassNames_plasmic_kit_style_controls,
        sty.root
      )}
    >
      <LeftSearchPanel
        data-plasmic-name={"leftSearchPanel"}
        data-plasmic-override={overrides.leftSearchPanel}
        className={classNames("__wab_instance", sty.leftSearchPanel)}
      />

      <div
        data-plasmic-name={"exprsFilter"}
        data-plasmic-override={overrides.exprsFilter}
        className={classNames(projectcss.all, sty.exprsFilter)}
      >
        <div className={classNames(projectcss.all, sty.freeBox___0U0Rm)}>
          <div className={classNames(projectcss.all, sty.freeBox__hAVe)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__krNmH
              )}
            >
              {"Expression Type"}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__dPZaC)}>
              {renderPlasmicSlot({
                defaultContents: null,
                value: args.typeFilter,
              })}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__x3LJf)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mcRf7
              )}
            >
              {"Group By"}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__z3H89)}>
              {renderPlasmicSlot({
                defaultContents: null,
                value: args.groupBy,
              })}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__sJUjo)}>
            {renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.exprsText;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Found 6 Expressions";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              ),
              value: args.exprsLabel,
              className: classNames(sty.slotTargetExprsLabel),
            })}
            {renderPlasmicSlot({
              defaultContents: (
                <IconButton
                  children2={
                    <svg
                      className={classNames(projectcss.all, sty.svg__jj8Qm)}
                      role={"img"}
                    />
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.iconButton___2VWmd
                  )}
                  type={["seamless"]}
                >
                  <RefreshSvgIcon
                    className={classNames(projectcss.all, sty.svg__qgd5)}
                    onClick={async (event) => {
                      const $steps = {};
                    }}
                    role={"img"}
                  />
                </IconButton>
              ),
              value: args.refreshIcon,
            })}
          </div>
        </div>
      </div>
      <div
        data-plasmic-name={"content"}
        data-plasmic-override={overrides.content}
        className={classNames(projectcss.all, sty.content)}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "leftSearchPanel", "exprsFilter", "content"],
  leftSearchPanel: ["leftSearchPanel"],
  exprsFilter: ["exprsFilter"],
  content: ["content"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  leftSearchPanel: typeof LeftSearchPanel;
  exprsFilter: "div";
  content: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLeftExprsSearchPanel__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLeftExprsSearchPanel__VariantsArgs;
    args?: PlasmicLeftExprsSearchPanel__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLeftExprsSearchPanel__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLeftExprsSearchPanel__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLeftExprsSearchPanel__ArgProps,
          internalVariantPropNames: PlasmicLeftExprsSearchPanel__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicLeftExprsSearchPanel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLeftExprsSearchPanel";
  } else {
    func.displayName = `PlasmicLeftExprsSearchPanel.${nodeName}`;
  }
  return func;
}

export const PlasmicLeftExprsSearchPanel = Object.assign(
  // Top-level PlasmicLeftExprsSearchPanel renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    leftSearchPanel: makeNodeComponent("leftSearchPanel"),
    exprsFilter: makeNodeComponent("exprsFilter"),
    content: makeNodeComponent("content"),

    // Metadata about props expected for PlasmicLeftExprsSearchPanel
    internalVariantProps: PlasmicLeftExprsSearchPanel__VariantProps,
    internalArgProps: PlasmicLeftExprsSearchPanel__ArgProps,
  }
);

export default PlasmicLeftExprsSearchPanel;
/* prettier-ignore-end */
