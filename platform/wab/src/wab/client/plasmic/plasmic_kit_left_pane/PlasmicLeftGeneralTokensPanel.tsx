// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aukbrhkegRkQ6KizvhdUPT
// Component: bDbzY5jXLz

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import LeftSearchPanel from "../../components/studio/LeftSearchPanel"; // plasmic-import: TqAPn0srTq/component
import LeftPaneHeader from "../../components/studio/LeftPaneHeader"; // plasmic-import: XLa52PvduIy/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component
import TextWithInfo from "../../../../TextWithInfo"; // plasmic-import: -EsDm7v023/component
import Select from "../../components/widgets/Select"; // plasmic-import: j_4IQyOWK2b/component
import Select__Option from "../../components/widgets/Select__Option"; // plasmic-import: rr-LWdMni2G/component
import TokenTypeHeader from "../../components/sidebar/TokenTypeHeader"; // plasmic-import: eMjSZ8G7mG/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_new_design_system_former_style_controls_css from "../plasmic_kit_style_controls/plasmic_plasmic_kit_styles_pane.module.css"; // plasmic-import: gYEVvAzCcLMHDVPvuYxkFh/projectcss
import projectcss from "../PP__plasmickit_left_pane.module.css"; // plasmic-import: aukbrhkegRkQ6KizvhdUPT/projectcss
import sty from "./PlasmicLeftGeneralTokensPanel.module.css"; // plasmic-import: bDbzY5jXLz/css

import DownloadsvgIcon from "../q_4_icons/icons/PlasmicIcon__Downloadsvg"; // plasmic-import: Bu7POPssl/icon
import ChevronDownsvgIcon from "../q_4_icons/icons/PlasmicIcon__ChevronDownsvg"; // plasmic-import: xZrB9_0ir/icon
import PlussvgIcon from "../q_4_icons/icons/PlasmicIcon__Plussvg"; // plasmic-import: sQKgd2GNr/icon

createPlasmicElementProxy;

export type PlasmicLeftGeneralTokensPanel__VariantMembers = {
  isTargeting: "isTargeting";
};
export type PlasmicLeftGeneralTokensPanel__VariantsArgs = {
  isTargeting?: SingleBooleanChoiceArg<"isTargeting">;
};
type VariantPropType = keyof PlasmicLeftGeneralTokensPanel__VariantsArgs;
export const PlasmicLeftGeneralTokensPanel__VariantProps =
  new Array<VariantPropType>("isTargeting");

export type PlasmicLeftGeneralTokensPanel__ArgsType = {};
type ArgPropType = keyof PlasmicLeftGeneralTokensPanel__ArgsType;
export const PlasmicLeftGeneralTokensPanel__ArgProps = new Array<ArgPropType>();

export type PlasmicLeftGeneralTokensPanel__OverridesType = {
  root?: p.Flex<"div">;
  leftSearchPanel?: p.Flex<typeof LeftSearchPanel>;
  leftPaneHeader?: p.Flex<typeof LeftPaneHeader>;
  importTokensButton?: p.Flex<typeof Button>;
  globalVariantsSelectContainer?: p.Flex<"div">;
  globalVariantSelect?: p.Flex<typeof Select>;
  option?: p.Flex<typeof Select__Option>;
  freeBox?: p.Flex<"div">;
  colorTokenHeader?: p.Flex<typeof TokenTypeHeader>;
  colorTokens?: p.Flex<"div">;
  spacingTokenHeader?: p.Flex<typeof TokenTypeHeader>;
  spacingTokens?: p.Flex<"div">;
  fontFamilyTokenHeader?: p.Flex<typeof TokenTypeHeader>;
  fontFamilyTokens?: p.Flex<"div">;
  fontSizeTokenHeader?: p.Flex<typeof TokenTypeHeader>;
  fontSizeTokens?: p.Flex<"div">;
  lineHeightTokenHeader?: p.Flex<typeof TokenTypeHeader>;
  lineHeightTokens?: p.Flex<"div">;
  opacityTokenHeader?: p.Flex<typeof TokenTypeHeader>;
  opacityTokens?: p.Flex<"div">;
};

export interface DefaultLeftGeneralTokensPanelProps {
  isTargeting?: SingleBooleanChoiceArg<"isTargeting">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicLeftGeneralTokensPanel__RenderFunc(props: {
  variants: PlasmicLeftGeneralTokensPanel__VariantsArgs;
  args: PlasmicLeftGeneralTokensPanel__ArgsType;
  overrides: PlasmicLeftGeneralTokensPanel__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isTargeting",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isTargeting,
      },
      {
        path: "globalVariantSelect.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        plasmic_plasmic_kit_new_design_system_former_style_controls_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootisTargeting]: hasVariant(
            $state,
            "isTargeting",
            "isTargeting"
          ),
        }
      )}
    >
      <LeftSearchPanel
        data-plasmic-name={"leftSearchPanel"}
        data-plasmic-override={overrides.leftSearchPanel}
        className={classNames("__wab_instance", sty.leftSearchPanel, {
          [sty.leftSearchPanelisTargeting]: hasVariant(
            $state,
            "isTargeting",
            "isTargeting"
          ),
        })}
        hasFilter={true}
      />

      <LeftPaneHeader
        data-plasmic-name={"leftPaneHeader"}
        data-plasmic-override={overrides.leftPaneHeader}
        actions={
          <Button
            data-plasmic-name={"importTokensButton"}
            data-plasmic-override={overrides.importTokensButton}
            endIcon={
              <ChevronDownsvgIcon
                className={classNames(projectcss.all, sty.svg__o0O5S)}
                role={"img"}
              />
            }
            size={"wide" as const}
            startIcon={
              <DownloadsvgIcon
                className={classNames(projectcss.all, sty.svg__e3TfD)}
                role={"img"}
              />
            }
            type={["secondary"]}
            withIcons={["startIcon"]}
          >
            {"Import tokens"}
          </Button>
        }
        className={classNames("__wab_instance", sty.leftPaneHeader, {
          [sty.leftPaneHeaderisTargeting]: hasVariant(
            $state,
            "isTargeting",
            "isTargeting"
          ),
        })}
        description={
          "Create tokens for colors, spacing, and more. Tokens can reference other tokens."
        }
        hasTitleActions={true}
        title={"Style Tokens"}
        titleActions={
          true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"globalVariantsSelectContainer"}
              data-plasmic-override={overrides.globalVariantsSelectContainer}
              hasGap={true}
              className={classNames(
                projectcss.all,
                sty.globalVariantsSelectContainer
              )}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__h2R,
                  {
                    [sty.textisTargeting__h2RWy5IQ]: hasVariant(
                      $state,
                      "isTargeting",
                      "isTargeting"
                    ),
                  }
                )}
              >
                {"Target:"}
              </div>
              <Select
                data-plasmic-name={"globalVariantSelect"}
                data-plasmic-override={overrides.globalVariantSelect}
                className={classNames(
                  "__wab_instance",
                  sty.globalVariantSelect
                )}
                icon={
                  true ? (
                    <PlussvgIcon
                      className={classNames(projectcss.all, sty.svg__ugBmB)}
                      role={"img"}
                    />
                  ) : null
                }
                name={"" as const}
                onChange={(...eventArgs) => {
                  p.generateStateOnChangeProp($state, [
                    "globalVariantSelect",
                    "value",
                  ])(eventArgs[0]);
                }}
                placeholder={
                  true ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hDqR6
                      )}
                    >
                      {"Base"}
                    </div>
                  ) : null
                }
                size={"tiny" as const}
                value={p.generateStateValueProp($state, [
                  "globalVariantSelect",
                  "value",
                ])}
              >
                <Select__Option
                  data-plasmic-name={"option"}
                  data-plasmic-override={overrides.option}
                  className={classNames("__wab_instance", sty.option)}
                  value={"base" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qa0Lm
                    )}
                  >
                    {"Base"}
                  </div>
                </Select__Option>
              </Select>
            </p.Stack>
          ) : null
        }
      />

      {true ? (
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox, {
            [sty.freeBoxisTargeting]: hasVariant(
              $state,
              "isTargeting",
              "isTargeting"
            ),
          })}
        >
          <TokenTypeHeader
            data-plasmic-name={"colorTokenHeader"}
            data-plasmic-override={overrides.colorTokenHeader}
            tokenType={"Colors"}
          />

          <div
            data-plasmic-name={"colorTokens"}
            data-plasmic-override={overrides.colorTokens}
            className={classNames(projectcss.all, sty.colorTokens)}
          />

          <TokenTypeHeader
            data-plasmic-name={"spacingTokenHeader"}
            data-plasmic-override={overrides.spacingTokenHeader}
            className={classNames("__wab_instance", sty.spacingTokenHeader)}
            tokenType={"Spaces"}
          />

          <div
            data-plasmic-name={"spacingTokens"}
            data-plasmic-override={overrides.spacingTokens}
            className={classNames(projectcss.all, sty.spacingTokens)}
          />

          <TokenTypeHeader
            data-plasmic-name={"fontFamilyTokenHeader"}
            data-plasmic-override={overrides.fontFamilyTokenHeader}
            className={classNames("__wab_instance", sty.fontFamilyTokenHeader)}
            tokenType={"Font Families"}
          />

          <div
            data-plasmic-name={"fontFamilyTokens"}
            data-plasmic-override={overrides.fontFamilyTokens}
            className={classNames(projectcss.all, sty.fontFamilyTokens)}
          />

          <TokenTypeHeader
            data-plasmic-name={"fontSizeTokenHeader"}
            data-plasmic-override={overrides.fontSizeTokenHeader}
            className={classNames("__wab_instance", sty.fontSizeTokenHeader)}
            tokenType={"Font Sizes"}
          />

          <div
            data-plasmic-name={"fontSizeTokens"}
            data-plasmic-override={overrides.fontSizeTokens}
            className={classNames(projectcss.all, sty.fontSizeTokens)}
          />

          <TokenTypeHeader
            data-plasmic-name={"lineHeightTokenHeader"}
            data-plasmic-override={overrides.lineHeightTokenHeader}
            className={classNames("__wab_instance", sty.lineHeightTokenHeader)}
            tokenType={"Line Heights"}
          />

          <div
            data-plasmic-name={"lineHeightTokens"}
            data-plasmic-override={overrides.lineHeightTokens}
            className={classNames(projectcss.all, sty.lineHeightTokens)}
          />

          <TokenTypeHeader
            data-plasmic-name={"opacityTokenHeader"}
            data-plasmic-override={overrides.opacityTokenHeader}
            className={classNames("__wab_instance", sty.opacityTokenHeader)}
            tokenType={"Opacities"}
          />

          <div
            data-plasmic-name={"opacityTokens"}
            data-plasmic-override={overrides.opacityTokens}
            className={classNames(projectcss.all, sty.opacityTokens)}
          />
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "leftSearchPanel",
    "leftPaneHeader",
    "importTokensButton",
    "globalVariantsSelectContainer",
    "globalVariantSelect",
    "option",
    "freeBox",
    "colorTokenHeader",
    "colorTokens",
    "spacingTokenHeader",
    "spacingTokens",
    "fontFamilyTokenHeader",
    "fontFamilyTokens",
    "fontSizeTokenHeader",
    "fontSizeTokens",
    "lineHeightTokenHeader",
    "lineHeightTokens",
    "opacityTokenHeader",
    "opacityTokens",
  ],
  leftSearchPanel: ["leftSearchPanel"],
  leftPaneHeader: [
    "leftPaneHeader",
    "importTokensButton",
    "globalVariantsSelectContainer",
    "globalVariantSelect",
    "option",
  ],
  importTokensButton: ["importTokensButton"],
  globalVariantsSelectContainer: [
    "globalVariantsSelectContainer",
    "globalVariantSelect",
    "option",
  ],
  globalVariantSelect: ["globalVariantSelect", "option"],
  option: ["option"],
  freeBox: [
    "freeBox",
    "colorTokenHeader",
    "colorTokens",
    "spacingTokenHeader",
    "spacingTokens",
    "fontFamilyTokenHeader",
    "fontFamilyTokens",
    "fontSizeTokenHeader",
    "fontSizeTokens",
    "lineHeightTokenHeader",
    "lineHeightTokens",
    "opacityTokenHeader",
    "opacityTokens",
  ],
  colorTokenHeader: ["colorTokenHeader"],
  colorTokens: ["colorTokens"],
  spacingTokenHeader: ["spacingTokenHeader"],
  spacingTokens: ["spacingTokens"],
  fontFamilyTokenHeader: ["fontFamilyTokenHeader"],
  fontFamilyTokens: ["fontFamilyTokens"],
  fontSizeTokenHeader: ["fontSizeTokenHeader"],
  fontSizeTokens: ["fontSizeTokens"],
  lineHeightTokenHeader: ["lineHeightTokenHeader"],
  lineHeightTokens: ["lineHeightTokens"],
  opacityTokenHeader: ["opacityTokenHeader"],
  opacityTokens: ["opacityTokens"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  leftSearchPanel: typeof LeftSearchPanel;
  leftPaneHeader: typeof LeftPaneHeader;
  importTokensButton: typeof Button;
  globalVariantsSelectContainer: "div";
  globalVariantSelect: typeof Select;
  option: typeof Select__Option;
  freeBox: "div";
  colorTokenHeader: typeof TokenTypeHeader;
  colorTokens: "div";
  spacingTokenHeader: typeof TokenTypeHeader;
  spacingTokens: "div";
  fontFamilyTokenHeader: typeof TokenTypeHeader;
  fontFamilyTokens: "div";
  fontSizeTokenHeader: typeof TokenTypeHeader;
  fontSizeTokens: "div";
  lineHeightTokenHeader: typeof TokenTypeHeader;
  lineHeightTokens: "div";
  opacityTokenHeader: typeof TokenTypeHeader;
  opacityTokens: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLeftGeneralTokensPanel__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLeftGeneralTokensPanel__VariantsArgs;
    args?: PlasmicLeftGeneralTokensPanel__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLeftGeneralTokensPanel__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLeftGeneralTokensPanel__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicLeftGeneralTokensPanel__ArgProps,
          internalVariantPropNames: PlasmicLeftGeneralTokensPanel__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicLeftGeneralTokensPanel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLeftGeneralTokensPanel";
  } else {
    func.displayName = `PlasmicLeftGeneralTokensPanel.${nodeName}`;
  }
  return func;
}

export const PlasmicLeftGeneralTokensPanel = Object.assign(
  // Top-level PlasmicLeftGeneralTokensPanel renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    leftSearchPanel: makeNodeComponent("leftSearchPanel"),
    leftPaneHeader: makeNodeComponent("leftPaneHeader"),
    importTokensButton: makeNodeComponent("importTokensButton"),
    globalVariantsSelectContainer: makeNodeComponent(
      "globalVariantsSelectContainer"
    ),
    globalVariantSelect: makeNodeComponent("globalVariantSelect"),
    option: makeNodeComponent("option"),
    freeBox: makeNodeComponent("freeBox"),
    colorTokenHeader: makeNodeComponent("colorTokenHeader"),
    colorTokens: makeNodeComponent("colorTokens"),
    spacingTokenHeader: makeNodeComponent("spacingTokenHeader"),
    spacingTokens: makeNodeComponent("spacingTokens"),
    fontFamilyTokenHeader: makeNodeComponent("fontFamilyTokenHeader"),
    fontFamilyTokens: makeNodeComponent("fontFamilyTokens"),
    fontSizeTokenHeader: makeNodeComponent("fontSizeTokenHeader"),
    fontSizeTokens: makeNodeComponent("fontSizeTokens"),
    lineHeightTokenHeader: makeNodeComponent("lineHeightTokenHeader"),
    lineHeightTokens: makeNodeComponent("lineHeightTokens"),
    opacityTokenHeader: makeNodeComponent("opacityTokenHeader"),
    opacityTokens: makeNodeComponent("opacityTokens"),

    // Metadata about props expected for PlasmicLeftGeneralTokensPanel
    internalVariantProps: PlasmicLeftGeneralTokensPanel__VariantProps,
    internalArgProps: PlasmicLeftGeneralTokensPanel__ArgProps,
  }
);

export default PlasmicLeftGeneralTokensPanel;
/* prettier-ignore-end */
