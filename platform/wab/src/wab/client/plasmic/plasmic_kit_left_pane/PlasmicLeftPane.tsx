// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aukbrhkegRkQ6KizvhdUPT
// Component: avrERxAp81S

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import LeftTabStrip from "../../components/studio/LeftTabStrip"; // plasmic-import: l7y_rhJyMt2/component
import LeftTabButton from "../../components/studio/LeftTabButton"; // plasmic-import: 1q_JapBg7U/component
import { OutlineTab as LeftOutlinePanel } from "../../components/sidebar-tabs/outline-tab"; // plasmic-import: OXltm_7BbQ/component
import LeftGeneralTokensPanel from "../../components/sidebar/LeftGeneralTokensPanel"; // plasmic-import: bDbzY5jXLz/component
import { MixinsPanel as LeftMixinsPanel } from "../../components/sidebar/MixinControls"; // plasmic-import: ZsFxxgE4E8/component
import { ImageAssetsPanel as LeftImagesPanel } from "../../components/sidebar/image-asset-controls"; // plasmic-import: ECu8FUyP0f3/component
import LeftThemesPanel from "../../components/sidebar/ThemesControls"; // plasmic-import: 9I47RGPv62/component
import { UserManagedFontsPanel as LeftFontsPanel } from "../../components/sidebar/UserManagedFonts"; // plasmic-import: 5oz1qmvGBe/component
import { ProjectDependenciesPanel as LeftImportsPanel } from "../../components/sidebar/ProjectDependencies"; // plasmic-import: MeRxD_0BtJ/component
import { VersionsTab as LeftVersionsPanel } from "../../components/sidebar-tabs/versions-tab"; // plasmic-import: YldGgVsq6N/component
import LeftComponentsPanel from "../../components/sidebar/LeftComponentsPanel"; // plasmic-import: 7Wsvgu6cRd/component
import LeftPagesPanel from "../../components/sidebar/LeftPagesPanel"; // plasmic-import: wXKvVcr82I/component
import LeftSettingsPanel from "../../components/sidebar/LeftSettingsPanel"; // plasmic-import: EeT-6P6YTW/component
import LeftSplitsPanel from "../../components/sidebar/LeftSplitsPanel"; // plasmic-import: OzaoSbFLbl/component
import LeftLintIssuesPanel from "../../components/sidebar/LeftLintIssuesPanel"; // plasmic-import: xymZo1AIeU/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_new_design_system_former_style_controls_css from "../plasmic_kit_style_controls/plasmic_plasmic_kit_styles_pane.module.css"; // plasmic-import: gYEVvAzCcLMHDVPvuYxkFh/projectcss
import projectcss from "../PP__plasmickit_left_pane.module.css"; // plasmic-import: aukbrhkegRkQ6KizvhdUPT/projectcss
import sty from "./PlasmicLeftPane.module.css"; // plasmic-import: avrERxAp81S/css

import WarningTrianglesvgIcon from "../q_4_icons/icons/PlasmicIcon__WarningTrianglesvg"; // plasmic-import: S0L-xosWD/icon
import TreeIcon from "../plasmic_kit/PlasmicIcon__Tree"; // plasmic-import: 4KZjuPY_m0VTb/icon
import ComponentssvgIcon from "../q_4_icons/icons/PlasmicIcon__Componentssvg"; // plasmic-import: coPzxnFyi/icon
import GearIcon from "../plasmic_kit/PlasmicIcon__Gear"; // plasmic-import: ZmVZmXEc9f_SR/icon
import DotsHorizontalCirclesvgIcon from "../q_4_icons/icons/PlasmicIcon__DotsHorizontalCirclesvg"; // plasmic-import: xdn8wiJBv/icon

createPlasmicElementProxy;

export type PlasmicLeftPane__VariantMembers = {
  type:
    | "outline"
    | "tokens"
    | "mixins"
    | "images"
    | "themes"
    | "fonts"
    | "imports"
    | "versions"
    | "components"
    | "pages"
    | "responsiveness"
    | "settings"
    | "splits"
    | "endpoints"
    | "copilot"
    | "lint";
};
export type PlasmicLeftPane__VariantsArgs = {
  type?: SingleChoiceArg<
    | "outline"
    | "tokens"
    | "mixins"
    | "images"
    | "themes"
    | "fonts"
    | "imports"
    | "versions"
    | "components"
    | "pages"
    | "responsiveness"
    | "settings"
    | "splits"
    | "endpoints"
    | "copilot"
    | "lint"
  >;
};
type VariantPropType = keyof PlasmicLeftPane__VariantsArgs;
export const PlasmicLeftPane__VariantProps = new Array<VariantPropType>("type");

export type PlasmicLeftPane__ArgsType = {};
type ArgPropType = keyof PlasmicLeftPane__ArgsType;
export const PlasmicLeftPane__ArgProps = new Array<ArgPropType>();

export type PlasmicLeftPane__OverridesType = {
  root?: p.Flex<"div">;
  leftTabStrip?: p.Flex<typeof LeftTabStrip>;
  paneContainer?: p.Flex<"div">;
  paneContent?: p.Flex<"div">;
  leftOutlinePanel?: p.Flex<typeof LeftOutlinePanel>;
  leftGeneralTokensPanel?: p.Flex<typeof LeftGeneralTokensPanel>;
  leftMixinsPanel?: p.Flex<typeof LeftMixinsPanel>;
  leftImagesPanel?: p.Flex<typeof LeftImagesPanel>;
  leftThemesPanel?: p.Flex<typeof LeftThemesPanel>;
  leftFontsPanel?: p.Flex<typeof LeftFontsPanel>;
  leftImportsPanel?: p.Flex<typeof LeftImportsPanel>;
  leftVersionsPanel?: p.Flex<typeof LeftVersionsPanel>;
  leftComponentsPanel?: p.Flex<typeof LeftComponentsPanel>;
  leftPagesPanel?: p.Flex<typeof LeftPagesPanel>;
  leftSettingsPanel?: p.Flex<typeof LeftSettingsPanel>;
  leftSplitsPanel?: p.Flex<typeof LeftSplitsPanel>;
  leftLintIssuesPanel?: p.Flex<typeof LeftLintIssuesPanel>;
};

export interface DefaultLeftPaneProps {
  type?: SingleChoiceArg<
    | "outline"
    | "tokens"
    | "mixins"
    | "images"
    | "themes"
    | "fonts"
    | "imports"
    | "versions"
    | "components"
    | "pages"
    | "responsiveness"
    | "settings"
    | "splits"
    | "endpoints"
    | "copilot"
    | "lint"
  >;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicLeftPane__RenderFunc(props: {
  variants: PlasmicLeftPane__VariantsArgs;
  args: PlasmicLeftPane__ArgsType;
  overrides: PlasmicLeftPane__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "type",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.type,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        plasmic_plasmic_kit_new_design_system_former_style_controls_css.plasmic_tokens,
        sty.root,
        {
          [sty.roottype_components]: hasVariant($state, "type", "components"),
          [sty.roottype_imports]: hasVariant($state, "type", "imports"),
          [sty.roottype_mixins]: hasVariant($state, "type", "mixins"),
          [sty.roottype_outline]: hasVariant($state, "type", "outline"),
          [sty.roottype_pages]: hasVariant($state, "type", "pages"),
          [sty.roottype_settings]: hasVariant($state, "type", "settings"),
          [sty.roottype_tokens]: hasVariant($state, "type", "tokens"),
          [sty.roottype_versions]: hasVariant($state, "type", "versions"),
        }
      )}
    >
      <LeftTabStrip
        data-plasmic-name={"leftTabStrip"}
        data-plasmic-override={overrides.leftTabStrip}
        activeTab={
          hasVariant($state, "type", "lint")
            ? ("lint" as const)
            : hasVariant($state, "type", "endpoints")
            ? ("endpoints" as const)
            : hasVariant($state, "type", "splits")
            ? ("splits" as const)
            : hasVariant($state, "type", "pages")
            ? ("pages" as const)
            : hasVariant($state, "type", "components")
            ? ("components" as const)
            : hasVariant($state, "type", "versions")
            ? ("versions" as const)
            : hasVariant($state, "type", "fonts")
            ? ("fonts" as const)
            : hasVariant($state, "type", "themes")
            ? ("themes" as const)
            : hasVariant($state, "type", "images")
            ? ("images" as const)
            : hasVariant($state, "type", "mixins")
            ? ("mixins" as const)
            : hasVariant($state, "type", "tokens")
            ? ("tokens" as const)
            : hasVariant($state, "type", "outline")
            ? ("outline" as const)
            : undefined
        }
        className={classNames("__wab_instance", sty.leftTabStrip, {
          [sty.leftTabStriptype_components]: hasVariant(
            $state,
            "type",
            "components"
          ),
          [sty.leftTabStriptype_endpoints]: hasVariant(
            $state,
            "type",
            "endpoints"
          ),
          [sty.leftTabStriptype_fonts]: hasVariant($state, "type", "fonts"),
          [sty.leftTabStriptype_images]: hasVariant($state, "type", "images"),
          [sty.leftTabStriptype_imports]: hasVariant($state, "type", "imports"),
          [sty.leftTabStriptype_lint]: hasVariant($state, "type", "lint"),
          [sty.leftTabStriptype_mixins]: hasVariant($state, "type", "mixins"),
          [sty.leftTabStriptype_outline]: hasVariant($state, "type", "outline"),
          [sty.leftTabStriptype_pages]: hasVariant($state, "type", "pages"),
          [sty.leftTabStriptype_responsiveness]: hasVariant(
            $state,
            "type",
            "responsiveness"
          ),
          [sty.leftTabStriptype_splits]: hasVariant($state, "type", "splits"),
          [sty.leftTabStriptype_themes]: hasVariant($state, "type", "themes"),
          [sty.leftTabStriptype_tokens]: hasVariant($state, "type", "tokens"),
          [sty.leftTabStriptype_versions]: hasVariant(
            $state,
            "type",
            "versions"
          ),
        })}
      />

      <div
        data-plasmic-name={"paneContainer"}
        data-plasmic-override={overrides.paneContainer}
        className={classNames(projectcss.all, sty.paneContainer, {
          [sty.paneContainertype_components]: hasVariant(
            $state,
            "type",
            "components"
          ),
          [sty.paneContainertype_fonts]: hasVariant($state, "type", "fonts"),
          [sty.paneContainertype_images]: hasVariant($state, "type", "images"),
          [sty.paneContainertype_imports]: hasVariant(
            $state,
            "type",
            "imports"
          ),
          [sty.paneContainertype_mixins]: hasVariant($state, "type", "mixins"),
          [sty.paneContainertype_outline]: hasVariant(
            $state,
            "type",
            "outline"
          ),
          [sty.paneContainertype_pages]: hasVariant($state, "type", "pages"),
          [sty.paneContainertype_responsiveness]: hasVariant(
            $state,
            "type",
            "responsiveness"
          ),
          [sty.paneContainertype_settings]: hasVariant(
            $state,
            "type",
            "settings"
          ),
          [sty.paneContainertype_themes]: hasVariant($state, "type", "themes"),
          [sty.paneContainertype_tokens]: hasVariant($state, "type", "tokens"),
          [sty.paneContainertype_versions]: hasVariant(
            $state,
            "type",
            "versions"
          ),
        })}
      >
        <div
          data-plasmic-name={"paneContent"}
          data-plasmic-override={overrides.paneContent}
          className={classNames(projectcss.all, sty.paneContent, {
            [sty.paneContenttype_components]: hasVariant(
              $state,
              "type",
              "components"
            ),
            [sty.paneContenttype_endpoints]: hasVariant(
              $state,
              "type",
              "endpoints"
            ),
            [sty.paneContenttype_fonts]: hasVariant($state, "type", "fonts"),
            [sty.paneContenttype_images]: hasVariant($state, "type", "images"),
            [sty.paneContenttype_imports]: hasVariant(
              $state,
              "type",
              "imports"
            ),
            [sty.paneContenttype_lint]: hasVariant($state, "type", "lint"),
            [sty.paneContenttype_mixins]: hasVariant($state, "type", "mixins"),
            [sty.paneContenttype_outline]: hasVariant(
              $state,
              "type",
              "outline"
            ),
            [sty.paneContenttype_pages]: hasVariant($state, "type", "pages"),
            [sty.paneContenttype_responsiveness]: hasVariant(
              $state,
              "type",
              "responsiveness"
            ),
            [sty.paneContenttype_settings]: hasVariant(
              $state,
              "type",
              "settings"
            ),
            [sty.paneContenttype_themes]: hasVariant($state, "type", "themes"),
            [sty.paneContenttype_tokens]: hasVariant($state, "type", "tokens"),
            [sty.paneContenttype_versions]: hasVariant(
              $state,
              "type",
              "versions"
            ),
          })}
        >
          {(hasVariant($state, "type", "outline") ? true : false) ? (
            <LeftOutlinePanel
              data-plasmic-name={"leftOutlinePanel"}
              data-plasmic-override={overrides.leftOutlinePanel}
              className={classNames("__wab_instance", sty.leftOutlinePanel, {
                [sty.leftOutlinePaneltype_mixins]: hasVariant(
                  $state,
                  "type",
                  "mixins"
                ),
                [sty.leftOutlinePaneltype_outline]: hasVariant(
                  $state,
                  "type",
                  "outline"
                ),
                [sty.leftOutlinePaneltype_responsiveness]: hasVariant(
                  $state,
                  "type",
                  "responsiveness"
                ),
                [sty.leftOutlinePaneltype_tokens]: hasVariant(
                  $state,
                  "type",
                  "tokens"
                ),
              })}
            />
          ) : null}
          {(hasVariant($state, "type", "tokens") ? true : false) ? (
            <LeftGeneralTokensPanel
              data-plasmic-name={"leftGeneralTokensPanel"}
              data-plasmic-override={overrides.leftGeneralTokensPanel}
              className={classNames(
                "__wab_instance",
                sty.leftGeneralTokensPanel,
                {
                  [sty.leftGeneralTokensPaneltype_responsiveness]: hasVariant(
                    $state,
                    "type",
                    "responsiveness"
                  ),
                  [sty.leftGeneralTokensPaneltype_tokens]: hasVariant(
                    $state,
                    "type",
                    "tokens"
                  ),
                }
              )}
            />
          ) : null}
          {(hasVariant($state, "type", "mixins") ? true : false) ? (
            <LeftMixinsPanel
              data-plasmic-name={"leftMixinsPanel"}
              data-plasmic-override={overrides.leftMixinsPanel}
              className={classNames("__wab_instance", sty.leftMixinsPanel, {
                [sty.leftMixinsPaneltype_mixins]: hasVariant(
                  $state,
                  "type",
                  "mixins"
                ),
              })}
            />
          ) : null}
          {(hasVariant($state, "type", "images") ? true : false) ? (
            <LeftImagesPanel
              data-plasmic-name={"leftImagesPanel"}
              data-plasmic-override={overrides.leftImagesPanel}
              className={classNames("__wab_instance", sty.leftImagesPanel, {
                [sty.leftImagesPaneltype_images]: hasVariant(
                  $state,
                  "type",
                  "images"
                ),
              })}
            />
          ) : null}
          {(hasVariant($state, "type", "themes") ? true : false) ? (
            <LeftThemesPanel
              data-plasmic-name={"leftThemesPanel"}
              data-plasmic-override={overrides.leftThemesPanel}
              className={classNames("__wab_instance", sty.leftThemesPanel, {
                [sty.leftThemesPaneltype_themes]: hasVariant(
                  $state,
                  "type",
                  "themes"
                ),
              })}
            />
          ) : null}
          {(hasVariant($state, "type", "fonts") ? true : false) ? (
            <LeftFontsPanel
              data-plasmic-name={"leftFontsPanel"}
              data-plasmic-override={overrides.leftFontsPanel}
              className={classNames("__wab_instance", sty.leftFontsPanel, {
                [sty.leftFontsPaneltype_fonts]: hasVariant(
                  $state,
                  "type",
                  "fonts"
                ),
              })}
            />
          ) : null}
          {(hasVariant($state, "type", "imports") ? true : false) ? (
            <LeftImportsPanel
              data-plasmic-name={"leftImportsPanel"}
              data-plasmic-override={overrides.leftImportsPanel}
              className={classNames("__wab_instance", sty.leftImportsPanel, {
                [sty.leftImportsPaneltype_fonts]: hasVariant(
                  $state,
                  "type",
                  "fonts"
                ),
                [sty.leftImportsPaneltype_images]: hasVariant(
                  $state,
                  "type",
                  "images"
                ),
                [sty.leftImportsPaneltype_imports]: hasVariant(
                  $state,
                  "type",
                  "imports"
                ),
                [sty.leftImportsPaneltype_mixins]: hasVariant(
                  $state,
                  "type",
                  "mixins"
                ),
                [sty.leftImportsPaneltype_outline]: hasVariant(
                  $state,
                  "type",
                  "outline"
                ),
                [sty.leftImportsPaneltype_pages]: hasVariant(
                  $state,
                  "type",
                  "pages"
                ),
                [sty.leftImportsPaneltype_themes]: hasVariant(
                  $state,
                  "type",
                  "themes"
                ),
                [sty.leftImportsPaneltype_tokens]: hasVariant(
                  $state,
                  "type",
                  "tokens"
                ),
              })}
            />
          ) : null}
          {(hasVariant($state, "type", "versions") ? true : false) ? (
            <LeftVersionsPanel
              data-plasmic-name={"leftVersionsPanel"}
              data-plasmic-override={overrides.leftVersionsPanel}
              className={classNames("__wab_instance", sty.leftVersionsPanel, {
                [sty.leftVersionsPaneltype_pages]: hasVariant(
                  $state,
                  "type",
                  "pages"
                ),
                [sty.leftVersionsPaneltype_versions]: hasVariant(
                  $state,
                  "type",
                  "versions"
                ),
              })}
            />
          ) : null}
          {(hasVariant($state, "type", "components") ? true : false) ? (
            <LeftComponentsPanel
              data-plasmic-name={"leftComponentsPanel"}
              data-plasmic-override={overrides.leftComponentsPanel}
              className={classNames("__wab_instance", sty.leftComponentsPanel, {
                [sty.leftComponentsPaneltype_components]: hasVariant(
                  $state,
                  "type",
                  "components"
                ),
                [sty.leftComponentsPaneltype_pages]: hasVariant(
                  $state,
                  "type",
                  "pages"
                ),
              })}
            />
          ) : null}
          {(
            hasVariant($state, "type", "settings")
              ? true
              : hasVariant($state, "type", "pages")
              ? true
              : false
          ) ? (
            <LeftPagesPanel
              data-plasmic-name={"leftPagesPanel"}
              data-plasmic-override={overrides.leftPagesPanel}
              className={classNames("__wab_instance", sty.leftPagesPanel, {
                [sty.leftPagesPaneltype_pages]: hasVariant(
                  $state,
                  "type",
                  "pages"
                ),
                [sty.leftPagesPaneltype_settings]: hasVariant(
                  $state,
                  "type",
                  "settings"
                ),
              })}
            />
          ) : null}
          {(hasVariant($state, "type", "settings") ? true : true) ? (
            <LeftSettingsPanel
              data-plasmic-name={"leftSettingsPanel"}
              data-plasmic-override={overrides.leftSettingsPanel}
              className={classNames("__wab_instance", sty.leftSettingsPanel, {
                [sty.leftSettingsPaneltype_settings]: hasVariant(
                  $state,
                  "type",
                  "settings"
                ),
              })}
            />
          ) : null}
          {(hasVariant($state, "type", "splits") ? true : true) ? (
            <LeftSplitsPanel
              data-plasmic-name={"leftSplitsPanel"}
              data-plasmic-override={overrides.leftSplitsPanel}
              className={classNames("__wab_instance", sty.leftSplitsPanel, {
                [sty.leftSplitsPaneltype_splits]: hasVariant(
                  $state,
                  "type",
                  "splits"
                ),
              })}
            />
          ) : null}
          {(hasVariant($state, "type", "lint") ? true : false) ? (
            <LeftLintIssuesPanel
              data-plasmic-name={"leftLintIssuesPanel"}
              data-plasmic-override={overrides.leftLintIssuesPanel}
              className={classNames("__wab_instance", sty.leftLintIssuesPanel, {
                [sty.leftLintIssuesPaneltype_lint]: hasVariant(
                  $state,
                  "type",
                  "lint"
                ),
              })}
            />
          ) : null}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "leftTabStrip",
    "paneContainer",
    "paneContent",
    "leftOutlinePanel",
    "leftGeneralTokensPanel",
    "leftMixinsPanel",
    "leftImagesPanel",
    "leftThemesPanel",
    "leftFontsPanel",
    "leftImportsPanel",
    "leftVersionsPanel",
    "leftComponentsPanel",
    "leftPagesPanel",
    "leftSettingsPanel",
    "leftSplitsPanel",
    "leftLintIssuesPanel",
  ],
  leftTabStrip: ["leftTabStrip"],
  paneContainer: [
    "paneContainer",
    "paneContent",
    "leftOutlinePanel",
    "leftGeneralTokensPanel",
    "leftMixinsPanel",
    "leftImagesPanel",
    "leftThemesPanel",
    "leftFontsPanel",
    "leftImportsPanel",
    "leftVersionsPanel",
    "leftComponentsPanel",
    "leftPagesPanel",
    "leftSettingsPanel",
    "leftSplitsPanel",
    "leftLintIssuesPanel",
  ],
  paneContent: [
    "paneContent",
    "leftOutlinePanel",
    "leftGeneralTokensPanel",
    "leftMixinsPanel",
    "leftImagesPanel",
    "leftThemesPanel",
    "leftFontsPanel",
    "leftImportsPanel",
    "leftVersionsPanel",
    "leftComponentsPanel",
    "leftPagesPanel",
    "leftSettingsPanel",
    "leftSplitsPanel",
    "leftLintIssuesPanel",
  ],
  leftOutlinePanel: ["leftOutlinePanel"],
  leftGeneralTokensPanel: ["leftGeneralTokensPanel"],
  leftMixinsPanel: ["leftMixinsPanel"],
  leftImagesPanel: ["leftImagesPanel"],
  leftThemesPanel: ["leftThemesPanel"],
  leftFontsPanel: ["leftFontsPanel"],
  leftImportsPanel: ["leftImportsPanel"],
  leftVersionsPanel: ["leftVersionsPanel"],
  leftComponentsPanel: ["leftComponentsPanel"],
  leftPagesPanel: ["leftPagesPanel"],
  leftSettingsPanel: ["leftSettingsPanel"],
  leftSplitsPanel: ["leftSplitsPanel"],
  leftLintIssuesPanel: ["leftLintIssuesPanel"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  leftTabStrip: typeof LeftTabStrip;
  paneContainer: "div";
  paneContent: "div";
  leftOutlinePanel: typeof LeftOutlinePanel;
  leftGeneralTokensPanel: typeof LeftGeneralTokensPanel;
  leftMixinsPanel: typeof LeftMixinsPanel;
  leftImagesPanel: typeof LeftImagesPanel;
  leftThemesPanel: typeof LeftThemesPanel;
  leftFontsPanel: typeof LeftFontsPanel;
  leftImportsPanel: typeof LeftImportsPanel;
  leftVersionsPanel: typeof LeftVersionsPanel;
  leftComponentsPanel: typeof LeftComponentsPanel;
  leftPagesPanel: typeof LeftPagesPanel;
  leftSettingsPanel: typeof LeftSettingsPanel;
  leftSplitsPanel: typeof LeftSplitsPanel;
  leftLintIssuesPanel: typeof LeftLintIssuesPanel;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLeftPane__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLeftPane__VariantsArgs;
    args?: PlasmicLeftPane__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLeftPane__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLeftPane__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicLeftPane__ArgProps,
          internalVariantPropNames: PlasmicLeftPane__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicLeftPane__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLeftPane";
  } else {
    func.displayName = `PlasmicLeftPane.${nodeName}`;
  }
  return func;
}

export const PlasmicLeftPane = Object.assign(
  // Top-level PlasmicLeftPane renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    leftTabStrip: makeNodeComponent("leftTabStrip"),
    paneContainer: makeNodeComponent("paneContainer"),
    paneContent: makeNodeComponent("paneContent"),
    leftOutlinePanel: makeNodeComponent("leftOutlinePanel"),
    leftGeneralTokensPanel: makeNodeComponent("leftGeneralTokensPanel"),
    leftMixinsPanel: makeNodeComponent("leftMixinsPanel"),
    leftImagesPanel: makeNodeComponent("leftImagesPanel"),
    leftThemesPanel: makeNodeComponent("leftThemesPanel"),
    leftFontsPanel: makeNodeComponent("leftFontsPanel"),
    leftImportsPanel: makeNodeComponent("leftImportsPanel"),
    leftVersionsPanel: makeNodeComponent("leftVersionsPanel"),
    leftComponentsPanel: makeNodeComponent("leftComponentsPanel"),
    leftPagesPanel: makeNodeComponent("leftPagesPanel"),
    leftSettingsPanel: makeNodeComponent("leftSettingsPanel"),
    leftSplitsPanel: makeNodeComponent("leftSplitsPanel"),
    leftLintIssuesPanel: makeNodeComponent("leftLintIssuesPanel"),

    // Metadata about props expected for PlasmicLeftPane
    internalVariantProps: PlasmicLeftPane__VariantProps,
    internalArgProps: PlasmicLeftPane__ArgProps,
  }
);

export default PlasmicLeftPane;
/* prettier-ignore-end */
