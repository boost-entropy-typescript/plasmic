/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aukbrhkegRkQ6KizvhdUPT
// Component: gk9PlJXwjeDP

import * as React from "react";

import {
  Flex as Flex__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import LeftPaneHeader from "../../components/studio/LeftPaneHeader"; // plasmic-import: XLa52PvduIy/component
import { _useStyleTokens as useStyleTokens_plasmic_kit_color_tokens } from "../plasmic_kit_color_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_kit_design_system } from "../plasmic_kit_design_system/PlasmicStyleTokensProvider"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_kit_style_controls } from "../plasmic_kit_style_controls/PlasmicStyleTokensProvider"; // plasmic-import: gYEVvAzCcLMHDVPvuYxkFh/styleTokensProvider
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: aukbrhkegRkQ6KizvhdUPT/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../PP__plasmickit_left_pane.module.css"; // plasmic-import: aukbrhkegRkQ6KizvhdUPT/projectcss
import sty from "./PlasmicLeftRevisionsPanel.module.css"; // plasmic-import: gk9PlJXwjeDP/css

createPlasmicElementProxy;

export type PlasmicLeftRevisionsPanel__VariantMembers = {};
export type PlasmicLeftRevisionsPanel__VariantsArgs = {};
type VariantPropType = keyof PlasmicLeftRevisionsPanel__VariantsArgs;
export const PlasmicLeftRevisionsPanel__VariantProps =
  new Array<VariantPropType>();

export type PlasmicLeftRevisionsPanel__ArgsType = {};
type ArgPropType = keyof PlasmicLeftRevisionsPanel__ArgsType;
export const PlasmicLeftRevisionsPanel__ArgProps = new Array<ArgPropType>();

export type PlasmicLeftRevisionsPanel__OverridesType = {
  root?: Flex__<"div">;
  revisionsHeader?: Flex__<typeof LeftPaneHeader>;
  content?: Flex__<"div">;
};

export interface DefaultLeftRevisionsPanelProps {
  className?: string;
}

const $$ = {};

function PlasmicLeftRevisionsPanel__RenderFunc(props: {
  variants: PlasmicLeftRevisionsPanel__VariantsArgs;
  args: PlasmicLeftRevisionsPanel__ArgsType;
  overrides: PlasmicLeftRevisionsPanel__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_plasmic_kit_design_system =
    useStyleTokens_plasmic_kit_design_system();
  const styleTokensClassNames_plasmic_kit_color_tokens =
    useStyleTokens_plasmic_kit_color_tokens();
  const styleTokensClassNames_plasmic_kit_style_controls =
    useStyleTokens_plasmic_kit_style_controls();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_plasmic_kit_design_system,
        styleTokensClassNames_plasmic_kit_color_tokens,
        styleTokensClassNames_plasmic_kit_style_controls,
        sty.root
      )}
    >
      <LeftPaneHeader
        data-plasmic-name={"revisionsHeader"}
        data-plasmic-override={overrides.revisionsHeader}
        actions={null}
        className={classNames("__wab_instance", sty.revisionsHeader)}
        description={"A history of unpublished changes."}
        title={"Revisions"}
      />

      <div
        data-plasmic-name={"content"}
        data-plasmic-override={overrides.content}
        className={classNames(projectcss.all, sty.content)}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "revisionsHeader", "content"],
  revisionsHeader: ["revisionsHeader"],
  content: ["content"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  revisionsHeader: typeof LeftPaneHeader;
  content: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLeftRevisionsPanel__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLeftRevisionsPanel__VariantsArgs;
    args?: PlasmicLeftRevisionsPanel__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLeftRevisionsPanel__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLeftRevisionsPanel__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLeftRevisionsPanel__ArgProps,
          internalVariantPropNames: PlasmicLeftRevisionsPanel__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicLeftRevisionsPanel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLeftRevisionsPanel";
  } else {
    func.displayName = `PlasmicLeftRevisionsPanel.${nodeName}`;
  }
  return func;
}

export const PlasmicLeftRevisionsPanel = Object.assign(
  // Top-level PlasmicLeftRevisionsPanel renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    revisionsHeader: makeNodeComponent("revisionsHeader"),
    content: makeNodeComponent("content"),

    // Metadata about props expected for PlasmicLeftRevisionsPanel
    internalVariantProps: PlasmicLeftRevisionsPanel__VariantProps,
    internalArgProps: PlasmicLeftRevisionsPanel__ArgProps,
  }
);

export default PlasmicLeftRevisionsPanel;
/* prettier-ignore-end */
