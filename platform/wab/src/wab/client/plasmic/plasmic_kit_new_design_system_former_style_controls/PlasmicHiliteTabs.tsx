// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gYEVvAzCcLMHDVPvuYxkFh
// Component: a0-WHzk-U8

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import HiliteTabButton from "../../components/widgets/HiliteTabButton"; // plasmic-import: lHRivspQeB/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "../plasmic_kit_style_controls/plasmic_plasmic_kit_styles_pane.module.css"; // plasmic-import: gYEVvAzCcLMHDVPvuYxkFh/projectcss
import sty from "./PlasmicHiliteTabs.module.css"; // plasmic-import: a0-WHzk-U8/css

createPlasmicElementProxy;

export type PlasmicHiliteTabs__VariantMembers = {};
export type PlasmicHiliteTabs__VariantsArgs = {};
type VariantPropType = keyof PlasmicHiliteTabs__VariantsArgs;
export const PlasmicHiliteTabs__VariantProps = new Array<VariantPropType>();

export type PlasmicHiliteTabs__ArgsType = {
  selectedTabKey?: string;
  tabs?: any;
  onSelectedTabKeyChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicHiliteTabs__ArgsType;
export const PlasmicHiliteTabs__ArgProps = new Array<ArgPropType>(
  "selectedTabKey",
  "tabs",
  "onSelectedTabKeyChange"
);

export type PlasmicHiliteTabs__OverridesType = {
  root?: p.Flex<"div">;
  hiliteTabButton?: p.Flex<typeof HiliteTabButton>;
};

export interface DefaultHiliteTabsProps {
  selectedTabKey?: string;
  tabs?: any;
  onSelectedTabKeyChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function PlasmicHiliteTabs__RenderFunc(props: {
  variants: PlasmicHiliteTabs__VariantsArgs;
  args: PlasmicHiliteTabs__ArgsType;
  overrides: PlasmicHiliteTabs__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          tabs: [
            { tabKey: "tab1", content: "Tab 1" },
            { tabKey: "tab2", content: "Tab 2" },
            { tabKey: "tab3", content: "Tab 3" },
          ],
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "selectedTabKey",
        type: "writable",
        variableType: "text",

        valueProp: "selectedTabKey",
        onChangeProp: "onSelectedTabKeyChange",
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root
      )}
      role={"tablist"}
    >
      {((_par) => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
        (() => {
          try {
            return $props.tabs;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()
      ).map((__plasmic_item_0, __plasmic_idx_0) => {
        const currentItem = __plasmic_item_0;
        const currentIndex = __plasmic_idx_0;
        return (
          <HiliteTabButton
            data-plasmic-name={"hiliteTabButton"}
            data-plasmic-override={overrides.hiliteTabButton}
            className={classNames("__wab_instance", sty.hiliteTabButton)}
            isSelected={currentItem.tabKey === $state.selectedTabKey}
            key={currentIndex}
            onTabSelected={async (tabKey) => {
              const $steps = {};

              $steps["setSelectedTabKey"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["selectedTabKey"],
                      },
                      operation: 0,
                      value: currentItem.tabKey,
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      p.set(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                typeof $steps["setSelectedTabKey"] === "object" &&
                typeof $steps["setSelectedTabKey"].then === "function"
              ) {
                $steps["setSelectedTabKey"] = await $steps["setSelectedTabKey"];
              }
            }}
            tabKey={currentItem.tabKey}
          >
            <React.Fragment>
              {(() => {
                try {
                  return currentItem.content;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Tab";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </HiliteTabButton>
        );
      })}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "hiliteTabButton"],
  hiliteTabButton: ["hiliteTabButton"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  hiliteTabButton: typeof HiliteTabButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHiliteTabs__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHiliteTabs__VariantsArgs;
    args?: PlasmicHiliteTabs__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHiliteTabs__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHiliteTabs__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHiliteTabs__ArgProps,
          internalVariantPropNames: PlasmicHiliteTabs__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicHiliteTabs__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHiliteTabs";
  } else {
    func.displayName = `PlasmicHiliteTabs.${nodeName}`;
  }
  return func;
}

export const PlasmicHiliteTabs = Object.assign(
  // Top-level PlasmicHiliteTabs renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    hiliteTabButton: makeNodeComponent("hiliteTabButton"),

    // Metadata about props expected for PlasmicHiliteTabs
    internalVariantProps: PlasmicHiliteTabs__VariantProps,
    internalArgProps: PlasmicHiliteTabs__ArgProps,
  }
);

export default PlasmicHiliteTabs;
/* prettier-ignore-end */
