// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gYEVvAzCcLMHDVPvuYxkFh
// Component: -L2zZ5Mvmr

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import TextboxLike from "../../components/TextboxLike"; // plasmic-import: 1OCmfT86EB3/component
import MenuButton from "../../components/widgets/MenuButton"; // plasmic-import: h69wHrrKtL/component
import Indicator from "../../components/style-controls/Indicator"; // plasmic-import: KRNHR6lpj1/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "../plasmic_kit_style_controls/plasmic_plasmic_kit_styles_pane.module.css"; // plasmic-import: gYEVvAzCcLMHDVPvuYxkFh/projectcss
import sty from "./PlasmicListItem.module.css"; // plasmic-import: -L2zZ5Mvmr/css

import GripsvgIcon from "../plasmic_kit_q_4_icons/icons/PlasmicIcon__Gripsvg"; // plasmic-import: jxIRSIMqs/icon
import TrashIcon from "../plasmic_kit/PlasmicIcon__Trash"; // plasmic-import: 7bxap5bzcUODa/icon

createPlasmicElementProxy;

export type PlasmicListItem__VariantMembers = {
  valueSetState: "isSet" | "isInherited" | "isUnset";
  noLabel: "noLabel";
  indicatorState: "isSet" | "isInherited" | "hasError";
  autoLabelWidth: "autoLabelWidth";
  draggable: "draggable";
  dragging: "dragging";
  deletable: "deletable";
  clickable: "clickable";
  padded: "padded";
  withMenu: "withMenu";
  nesting: "simple" | "double";
};
export type PlasmicListItem__VariantsArgs = {
  valueSetState?: SingleChoiceArg<"isSet" | "isInherited" | "isUnset">;
  noLabel?: SingleBooleanChoiceArg<"noLabel">;
  indicatorState?: SingleChoiceArg<"isSet" | "isInherited" | "hasError">;
  autoLabelWidth?: SingleBooleanChoiceArg<"autoLabelWidth">;
  draggable?: SingleBooleanChoiceArg<"draggable">;
  dragging?: SingleBooleanChoiceArg<"dragging">;
  deletable?: SingleBooleanChoiceArg<"deletable">;
  clickable?: SingleBooleanChoiceArg<"clickable">;
  padded?: SingleBooleanChoiceArg<"padded">;
  withMenu?: SingleBooleanChoiceArg<"withMenu">;
  nesting?: SingleChoiceArg<"simple" | "double">;
};
type VariantPropType = keyof PlasmicListItem__VariantsArgs;
export const PlasmicListItem__VariantProps = new Array<VariantPropType>(
  "valueSetState",
  "noLabel",
  "indicatorState",
  "autoLabelWidth",
  "draggable",
  "dragging",
  "deletable",
  "clickable",
  "padded",
  "withMenu",
  "nesting"
);

export type PlasmicListItem__ArgsType = {
  label?: React.ReactNode;
  styleProp?: string;
  onDeletionRequest?: () => void;
  onClick?: () => void;
  menuButton?: React.ReactNode;
  value?: React.ReactNode;
  children?: React.ReactNode;
  subtitle?: React.ReactNode;
};
type ArgPropType = keyof PlasmicListItem__ArgsType;
export const PlasmicListItem__ArgProps = new Array<ArgPropType>(
  "label",
  "styleProp",
  "onDeletionRequest",
  "onClick",
  "menuButton",
  "value",
  "children",
  "subtitle"
);

export type PlasmicListItem__OverridesType = {
  root?: p.Flex<"div">;
  labelContainer?: p.Flex<"div">;
  textboxLike?: p.Flex<typeof TextboxLike>;
  indicatorContainer?: p.Flex<"div">;
  indicator?: p.Flex<typeof Indicator>;
};

export interface DefaultListItemProps {
  label?: React.ReactNode;
  styleProp?: string;
  onDeletionRequest?: () => void;
  onClick?: () => void;
  menuButton?: React.ReactNode;
  value?: React.ReactNode;
  children?: React.ReactNode;
  subtitle?: React.ReactNode;
  valueSetState?: SingleChoiceArg<"isSet" | "isInherited" | "isUnset">;
  noLabel?: SingleBooleanChoiceArg<"noLabel">;
  indicatorState?: SingleChoiceArg<"isSet" | "isInherited" | "hasError">;
  autoLabelWidth?: SingleBooleanChoiceArg<"autoLabelWidth">;
  draggable?: SingleBooleanChoiceArg<"draggable">;
  dragging?: SingleBooleanChoiceArg<"dragging">;
  deletable?: SingleBooleanChoiceArg<"deletable">;
  clickable?: SingleBooleanChoiceArg<"clickable">;
  padded?: SingleBooleanChoiceArg<"padded">;
  withMenu?: SingleBooleanChoiceArg<"withMenu">;
  nesting?: SingleChoiceArg<"simple" | "double">;
  className?: string;
}

const $$ = {};

function PlasmicListItem__RenderFunc(props: {
  variants: PlasmicListItem__VariantsArgs;
  args: PlasmicListItem__ArgsType;
  overrides: PlasmicListItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          styleProp: "",
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "valueSetState",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.valueSetState,
      },
      {
        path: "noLabel",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noLabel,
      },
      {
        path: "indicatorState",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.indicatorState,
      },
      {
        path: "autoLabelWidth",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.autoLabelWidth,
      },
      {
        path: "draggable",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.draggable,
      },
      {
        path: "deletable",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          typeof $props.onDeletionRequest === "function" ?? $props.deletable,
      },
      {
        path: "dragging",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.dragging,
      },
      {
        path: "clickable",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          typeof $props.onClick === "function" ?? $props.clickable,
      },
      {
        path: "padded",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.padded,
      },
      {
        path: "withMenu",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          !!$props.menuButton ?? $props.withMenu,
      },
      {
        path: "nesting",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.nesting,
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "",
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootclickable]: hasVariant($state, "clickable", "clickable"),
          [sty.rootdeletable]: hasVariant($state, "deletable", "deletable"),
          [sty.rootdraggable]: hasVariant($state, "draggable", "draggable"),
          [sty.rootdragging]: hasVariant($state, "dragging", "dragging"),
          [sty.rootindicatorState_isSet]: hasVariant(
            $state,
            "indicatorState",
            "isSet"
          ),
          [sty.rootnesting_double]: hasVariant($state, "nesting", "double"),
          [sty.rootnesting_simple]: hasVariant($state, "nesting", "simple"),
          [sty.rootnesting_simple_padded]:
            hasVariant($state, "padded", "padded") &&
            hasVariant($state, "nesting", "simple"),
          [sty.rootnoLabel]: hasVariant($state, "noLabel", "noLabel"),
          [sty.rootpadded]: hasVariant($state, "padded", "padded"),
          [sty.rootpadded_nesting_double]:
            hasVariant($state, "padded", "padded") &&
            hasVariant($state, "nesting", "double"),
          [sty.rootvalueSetState_isSet]: hasVariant(
            $state,
            "valueSetState",
            "isSet"
          ),
          [sty.rootwithMenu]: hasVariant($state, "withMenu", "withMenu"),
        }
      )}
      onClick={async (event) => {
        const $steps = {};

        $steps["invokeOnClick"] = true
          ? (() => {
              const actionArgs = { eventRef: $props["onClick"] };
              return (({ eventRef, args }) => {
                return eventRef?.(...(args ?? []));
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["invokeOnClick"] != null &&
          typeof $steps["invokeOnClick"] === "object" &&
          typeof $steps["invokeOnClick"].then === "function"
        ) {
          $steps["invokeOnClick"] = await $steps["invokeOnClick"];
        }
      }}
    >
      <GripsvgIcon
        className={classNames(projectcss.all, sty.svg__hRdcl, {
          [sty.svgdraggable__hRdclT6NO]: hasVariant(
            $state,
            "draggable",
            "draggable"
          ),
          [sty.svgdragging__hRdclw1XCq]: hasVariant(
            $state,
            "dragging",
            "dragging"
          ),
        })}
        role={"img"}
      />

      {(hasVariant($state, "noLabel", "noLabel") ? false : true) ? (
        <div
          data-plasmic-name={"labelContainer"}
          data-plasmic-override={overrides.labelContainer}
          className={classNames(projectcss.all, sty.labelContainer, {
            [sty.labelContainerautoLabelWidth]: hasVariant(
              $state,
              "autoLabelWidth",
              "autoLabelWidth"
            ),
            [sty.labelContainerdeletable]: hasVariant(
              $state,
              "deletable",
              "deletable"
            ),
            [sty.labelContainerdraggable]: hasVariant(
              $state,
              "draggable",
              "draggable"
            ),
            [sty.labelContainerdragging]: hasVariant(
              $state,
              "dragging",
              "dragging"
            ),
            [sty.labelContainerindicatorState_hasError]: hasVariant(
              $state,
              "indicatorState",
              "hasError"
            ),
            [sty.labelContainerindicatorState_isInherited]: hasVariant(
              $state,
              "indicatorState",
              "isInherited"
            ),
            [sty.labelContainerindicatorState_isSet]: hasVariant(
              $state,
              "indicatorState",
              "isSet"
            ),
            [sty.labelContainernesting_double]: hasVariant(
              $state,
              "nesting",
              "double"
            ),
            [sty.labelContainernesting_simple]: hasVariant(
              $state,
              "nesting",
              "simple"
            ),
            [sty.labelContainernoLabel]: hasVariant(
              $state,
              "noLabel",
              "noLabel"
            ),
            [sty.labelContainervalueSetState_isInherited]: hasVariant(
              $state,
              "valueSetState",
              "isInherited"
            ),
            [sty.labelContainervalueSetState_isSet]: hasVariant(
              $state,
              "valueSetState",
              "isSet"
            ),
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Label",
            value: args.label,
            className: classNames(sty.slotTargetLabel, {
              [sty.slotTargetLabeldeletable]: hasVariant(
                $state,
                "deletable",
                "deletable"
              ),
              [sty.slotTargetLabelnesting_double]: hasVariant(
                $state,
                "nesting",
                "double"
              ),
              [sty.slotTargetLabelnesting_simple]: hasVariant(
                $state,
                "nesting",
                "simple"
              ),
              [sty.slotTargetLabelpadded_nesting_double]:
                hasVariant($state, "padded", "padded") &&
                hasVariant($state, "nesting", "double"),
              [sty.slotTargetLabelvalueSetState_isInherited]: hasVariant(
                $state,
                "valueSetState",
                "isInherited"
              ),
              [sty.slotTargetLabelvalueSetState_isSet]: hasVariant(
                $state,
                "valueSetState",
                "isSet"
              ),
              [sty.slotTargetLabelvalueSetState_isUnset]: hasVariant(
                $state,
                "valueSetState",
                "isUnset"
              ),
              [sty.slotTargetLabelwithMenu]: hasVariant(
                $state,
                "withMenu",
                "withMenu"
              ),
            }),
          })}
          {(() => {
            try {
              return !!$props.subtitle;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })()
            ? p.renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__u1Jb1
                    )}
                  >
                    {"Enter some text"}
                  </div>
                ),
                value: args.subtitle,
                className: classNames(sty.slotTargetSubtitle),
              })
            : null}
        </div>
      ) : null}
      {(() => {
        try {
          return !!$props.children && !$props.value;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div className={classNames(projectcss.all, sty.freeBox___7YPaU)}>
          {p.renderPlasmicSlot({
            defaultContents: null,
            value: args.children,
          })}
        </div>
      ) : null}
      {(() => {
        try {
          return !!$props.value && !$props.children;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <TextboxLike
          data-plasmic-name={"textboxLike"}
          data-plasmic-override={overrides.textboxLike}
          className={classNames("__wab_instance", sty.textboxLike, {
            [sty.textboxLikeindicatorState_isSet]: hasVariant(
              $state,
              "indicatorState",
              "isSet"
            ),
          })}
          color={
            hasVariant($state, "indicatorState", "isSet") ? "purple" : undefined
          }
        >
          {p.renderPlasmicSlot({
            defaultContents: "Enter some text",
            value: args.value,
          })}
        </TextboxLike>
      ) : null}
      <TrashIcon
        className={classNames(projectcss.all, sty.svg__fh2Uu, {
          [sty.svgdeletable__fh2Uu0RIb5]: hasVariant(
            $state,
            "deletable",
            "deletable"
          ),
        })}
        onClick={async (event) => {
          const $steps = {};

          $steps["invokeOnDeletionRequest"] = true
            ? (() => {
                const actionArgs = { eventRef: $props["onDeletionRequest"] };
                return (({ eventRef, args }) => {
                  return eventRef?.(...(args ?? []));
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["invokeOnDeletionRequest"] != null &&
            typeof $steps["invokeOnDeletionRequest"] === "object" &&
            typeof $steps["invokeOnDeletionRequest"].then === "function"
          ) {
            $steps["invokeOnDeletionRequest"] = await $steps[
              "invokeOnDeletionRequest"
            ];
          }
        }}
        role={"img"}
      />

      <div
        className={classNames(projectcss.all, sty.freeBox__xF9F3, {
          [sty.freeBoxdeletable__xF9F30RIb5]: hasVariant(
            $state,
            "deletable",
            "deletable"
          ),
          [sty.freeBoxvalueSetState_isSet__xF9F3P5DRv]: hasVariant(
            $state,
            "valueSetState",
            "isSet"
          ),
          [sty.freeBoxwithMenu__xF9F3XDsyq]: hasVariant(
            $state,
            "withMenu",
            "withMenu"
          ),
        })}
      >
        {(hasVariant($state, "withMenu", "withMenu") ? true : false)
          ? p.renderPlasmicSlot({
              defaultContents: (
                <MenuButton
                  className={classNames(
                    "__wab_instance",
                    sty.menuButton__x1Lv6,
                    {
                      [sty.menuButtonwithMenu__x1Lv6XDsyq]: hasVariant(
                        $state,
                        "withMenu",
                        "withMenu"
                      ),
                    }
                  )}
                />
              ),

              value: args.menuButton,
            })
          : null}
      </div>
      {(
        hasVariant($state, "indicatorState", "hasError")
          ? true
          : hasVariant($state, "indicatorState", "isInherited")
          ? true
          : hasVariant($state, "indicatorState", "isSet")
          ? true
          : false
      ) ? (
        <div
          data-plasmic-name={"indicatorContainer"}
          data-plasmic-override={overrides.indicatorContainer}
          className={classNames(projectcss.all, sty.indicatorContainer, {
            [sty.indicatorContainerindicatorState_hasError]: hasVariant(
              $state,
              "indicatorState",
              "hasError"
            ),
            [sty.indicatorContainerindicatorState_isInherited]: hasVariant(
              $state,
              "indicatorState",
              "isInherited"
            ),
            [sty.indicatorContainerindicatorState_isSet]: hasVariant(
              $state,
              "indicatorState",
              "isSet"
            ),
            [sty.indicatorContainernoLabel]: hasVariant(
              $state,
              "noLabel",
              "noLabel"
            ),
          })}
        >
          <Indicator
            data-plasmic-name={"indicator"}
            data-plasmic-override={overrides.indicator}
            color={
              hasVariant($state, "indicatorState", "hasError")
                ? "red"
                : undefined
            }
          />
        </div>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "labelContainer",
    "textboxLike",
    "indicatorContainer",
    "indicator",
  ],
  labelContainer: ["labelContainer"],
  textboxLike: ["textboxLike"],
  indicatorContainer: ["indicatorContainer", "indicator"],
  indicator: ["indicator"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  labelContainer: "div";
  textboxLike: typeof TextboxLike;
  indicatorContainer: "div";
  indicator: typeof Indicator;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicListItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicListItem__VariantsArgs;
    args?: PlasmicListItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicListItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicListItem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicListItem__ArgProps,
          internalVariantPropNames: PlasmicListItem__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicListItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicListItem";
  } else {
    func.displayName = `PlasmicListItem.${nodeName}`;
  }
  return func;
}

export const PlasmicListItem = Object.assign(
  // Top-level PlasmicListItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    labelContainer: makeNodeComponent("labelContainer"),
    textboxLike: makeNodeComponent("textboxLike"),
    indicatorContainer: makeNodeComponent("indicatorContainer"),
    indicator: makeNodeComponent("indicator"),

    // Metadata about props expected for PlasmicListItem
    internalVariantProps: PlasmicListItem__VariantProps,
    internalArgProps: PlasmicListItem__ArgProps,
  }
);

export default PlasmicListItem;
/* prettier-ignore-end */
