// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fQPf2UiMEMhB52C8QQXwWe
// Component: paIlCoZKcm
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import OmnibarTabHeader from "../../components/omnibar/OmnibarTabHeader"; // plasmic-import: hrLkFMfsYv/component
import OmnibarCommandItem from "../../components/omnibar/OmnibarCommandItem"; // plasmic-import: A2li_iO_iw/component
import OmnibarGroup from "../../components/omnibar/OmnibarGroup"; // plasmic-import: qx4iENdAfF/component
import OmnibarAddItem from "../../components/omnibar/OmnibarAddItem"; // plasmic-import: KnUjAGcQKT/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "./plasmic_plasmic_kit_omnibar.module.css"; // plasmic-import: fQPf2UiMEMhB52C8QQXwWe/projectcss
import sty from "./PlasmicOmnibar.module.css"; // plasmic-import: paIlCoZKcm/css

import AddPageIcon from "../plasmic_kit_design_system/icons/PlasmicIcon__AddPage"; // plasmic-import: JuZ41tZRcH/icon
import BlockIcon from "../plasmic_kit_design_system/PlasmicIcon__Block"; // plasmic-import: DYyeu-AtoO/icon
import HStackBlockIcon from "../plasmic_kit/PlasmicIcon__HStackBlock"; // plasmic-import: vrE0GHgUiSGkm/icon
import VStackBlockIcon from "../plasmic_kit/PlasmicIcon__VStackBlock"; // plasmic-import: DTUk351ydDQGv/icon
import TextBlockIcon from "../plasmic_kit/PlasmicIcon__TextBlock"; // plasmic-import: nzc8B7oWFfsYG/icon
import IconIcon from "../plasmic_kit_design_system/PlasmicIcon__Icon"; // plasmic-import: mZMZr0AmTY/icon
import ArrowRightsvgIcon from "../q_4_icons/icons/PlasmicIcon__ArrowRightsvg"; // plasmic-import: 9Jv8jb253/icon
import ChevronDownsvgIcon from "../q_4_icons/icons/PlasmicIcon__ChevronDownsvg"; // plasmic-import: xZrB9_0ir/icon
import image49X6ZsC5Ww5 from "../plasmic_kit_design_system/images/image4.svg"; // plasmic-import: 9X6ZsC5ww5/picture

export type PlasmicOmnibar__VariantMembers = {
  tabless: "tabless";
};

export type PlasmicOmnibar__VariantsArgs = {
  tabless?: SingleBooleanChoiceArg<"tabless">;
};

type VariantPropType = keyof PlasmicOmnibar__VariantsArgs;
export const PlasmicOmnibar__VariantProps = new Array<VariantPropType>(
  "tabless"
);

export type PlasmicOmnibar__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicOmnibar__ArgsType;
export const PlasmicOmnibar__ArgProps = new Array<ArgPropType>("children");

export type PlasmicOmnibar__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<"div">;
  allTab?: p.Flex<typeof OmnibarTabHeader>;
  insertTab?: p.Flex<typeof OmnibarTabHeader>;
  focusTab?: p.Flex<typeof OmnibarTabHeader>;
  newTab?: p.Flex<typeof OmnibarTabHeader>;
  runTab?: p.Flex<typeof OmnibarTabHeader>;
  query?: p.Flex<"input">;
  text?: p.Flex<"div">;
  content?: p.Flex<"div">;
};

export interface DefaultOmnibarProps {
  children?: React.ReactNode;
  tabless?: SingleBooleanChoiceArg<"tabless">;
  className?: string;
}

function PlasmicOmnibar__RenderFunc(props: {
  variants: PlasmicOmnibar__VariantsArgs;
  args: PlasmicOmnibar__ArgsType;
  overrides: PlasmicOmnibar__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),

    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        { [sty.roottabless]: hasVariant(variants, "tabless", "tabless") }
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"header"}
        data-plasmic-override={overrides.header}
        hasGap={true}
        className={classNames(projectcss.all, sty.header, {
          [sty.headertabless]: hasVariant(variants, "tabless", "tabless"),
        })}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__noWrf, {
            [sty.freeBoxtabless__noWrfcgv56]: hasVariant(
              variants,
              "tabless",
              "tabless"
            ),
          })}
        >
          <OmnibarTabHeader
            data-plasmic-name={"allTab"}
            data-plasmic-override={overrides.allTab}
            className={classNames("__wab_instance", sty.allTab)}
          />

          <OmnibarTabHeader
            data-plasmic-name={"insertTab"}
            data-plasmic-override={overrides.insertTab}
            className={classNames("__wab_instance", sty.insertTab)}
            selected={true}
            title={"Insert"}
          />

          <OmnibarTabHeader
            data-plasmic-name={"focusTab"}
            data-plasmic-override={overrides.focusTab}
            className={classNames("__wab_instance", sty.focusTab)}
            title={"Focus"}
          />

          <OmnibarTabHeader
            data-plasmic-name={"newTab"}
            data-plasmic-override={overrides.newTab}
            className={classNames("__wab_instance", sty.newTab)}
            title={"New"}
          />

          <OmnibarTabHeader
            data-plasmic-name={"runTab"}
            data-plasmic-override={overrides.runTab}
            className={classNames("__wab_instance", sty.runTab)}
            title={"Run"}
          />
        </p.Stack>

        <div className={classNames(projectcss.all, sty.freeBox__ff5UQ)}>
          <input
            data-plasmic-name={"query"}
            data-plasmic-override={overrides.query}
            className={classNames(projectcss.all, projectcss.input, sty.query)}
            placeholder={"Element, template, component, or image..." as const}
            size={1 as const}
            type={"text" as const}
            value={"" as const}
          />
        </div>

        <div className={classNames(projectcss.all, sty.freeBox__tnBh)}>
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text,
              { [sty.texttabless]: hasVariant(variants, "tabless", "tabless") }
            )}
          >
            {"Use Tab to switch commands"}
          </div>
        </div>
      </p.Stack>

      <div
        data-plasmic-name={"content"}
        data-plasmic-override={overrides.content}
        className={classNames(projectcss.all, sty.content)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <OmnibarCommandItem
                className={classNames(
                  "__wab_instance",
                  sty.omnibarCommandItem__vcwtC
                )}
                icon={
                  <AddPageIcon
                    className={classNames(projectcss.all, sty.svg__qZeLr)}
                    role={"img"}
                  />
                }
              />

              <OmnibarCommandItem
                className={classNames(
                  "__wab_instance",
                  sty.omnibarCommandItem__hSt0S
                )}
                icon={
                  <AddPageIcon
                    className={classNames(projectcss.all, sty.svg__v4Zpn)}
                    role={"img"}
                  />
                }
              />

              <OmnibarCommandItem
                className={classNames(
                  "__wab_instance",
                  sty.omnibarCommandItem__aRiOz
                )}
                icon={
                  <AddPageIcon
                    className={classNames(projectcss.all, sty.svg__qvOcU)}
                    role={"img"}
                  />
                }
              />

              <OmnibarGroup
                addChildren={
                  <React.Fragment>
                    <OmnibarAddItem
                      className={classNames(
                        "__wab_instance",
                        sty.omnibarAddItem__gOhGs
                      )}
                      icon={
                        <BlockIcon
                          className={classNames(projectcss.all, sty.svg__nNc8D)}
                          role={"img"}
                        />
                      }
                      preview={"image" as const}
                      previewImage={
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__gX7KT)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          src={{
                            src: image49X6ZsC5Ww5,
                            fullWidth: 300,
                            fullHeight: 150,
                            aspectRatio: 2,
                          }}
                        />
                      }
                      title={"Free box"}
                    />

                    <OmnibarAddItem
                      className={classNames(
                        "__wab_instance",
                        sty.omnibarAddItem__jOsBv
                      )}
                      icon={
                        <HStackBlockIcon
                          className={classNames(projectcss.all, sty.svg__jtQgG)}
                          role={"img"}
                        />
                      }
                      preview={"image" as const}
                      previewImage={
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__qo26I)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          src={{
                            src: image49X6ZsC5Ww5,
                            fullWidth: 300,
                            fullHeight: 150,
                            aspectRatio: 2,
                          }}
                        />
                      }
                      title={"Row box"}
                    />

                    <OmnibarAddItem
                      className={classNames(
                        "__wab_instance",
                        sty.omnibarAddItem__uybsz
                      )}
                      icon={
                        <VStackBlockIcon
                          className={classNames(projectcss.all, sty.svg__oyf75)}
                          role={"img"}
                        />
                      }
                      preview={"image" as const}
                      previewImage={
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__taeCs)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          src={{
                            src: image49X6ZsC5Ww5,
                            fullWidth: 300,
                            fullHeight: 150,
                            aspectRatio: 2,
                          }}
                        />
                      }
                      title={"Column box"}
                    />

                    <OmnibarAddItem
                      className={classNames(
                        "__wab_instance",
                        sty.omnibarAddItem__wc6W7
                      )}
                      icon={
                        <TextBlockIcon
                          className={classNames(projectcss.all, sty.svg__vaAeb)}
                          role={"img"}
                        />
                      }
                      preview={"image" as const}
                      previewImage={
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__wKlZj)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          src={{
                            src: image49X6ZsC5Ww5,
                            fullWidth: 300,
                            fullHeight: 150,
                            aspectRatio: 2,
                          }}
                        />
                      }
                      title={"Textbox"}
                    />

                    <OmnibarAddItem
                      className={classNames(
                        "__wab_instance",
                        sty.omnibarAddItem__nNeLb
                      )}
                      icon={
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__icVrQ)}
                          role={"img"}
                        />
                      }
                      preview={"image" as const}
                      previewImage={
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__boDgF)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          src={{
                            src: image49X6ZsC5Ww5,
                            fullWidth: 300,
                            fullHeight: 150,
                            aspectRatio: 2,
                          }}
                        />
                      }
                      title={"Icon"}
                    />
                  </React.Fragment>
                }
                className={classNames(
                  "__wab_instance",
                  sty.omnibarGroup___7Vkx
                )}
                commandChildren={
                  <React.Fragment>
                    <OmnibarCommandItem
                      className={classNames(
                        "__wab_instance",
                        sty.omnibarCommandItem__ikYF
                      )}
                      icon={
                        <AddPageIcon
                          className={classNames(projectcss.all, sty.svg__cSYyV)}
                          role={"img"}
                        />
                      }
                    />

                    <OmnibarCommandItem
                      className={classNames(
                        "__wab_instance",
                        sty.omnibarCommandItem__ojdod
                      )}
                      icon={
                        <AddPageIcon
                          className={classNames(projectcss.all, sty.svg__nQexs)}
                          role={"img"}
                        />
                      }
                    />
                  </React.Fragment>
                }
              />

              <OmnibarGroup
                addChildren={
                  <React.Fragment>
                    <OmnibarAddItem
                      className={classNames(
                        "__wab_instance",
                        sty.omnibarAddItem__zjMtU
                      )}
                      icon={
                        <BlockIcon
                          className={classNames(projectcss.all, sty.svg__xbtdd)}
                          role={"img"}
                        />
                      }
                      previewImage={
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img___67P5X)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          src={{
                            src: image49X6ZsC5Ww5,
                            fullWidth: 300,
                            fullHeight: 150,
                            aspectRatio: 2,
                          }}
                        />
                      }
                      title={"Free box"}
                    />

                    <OmnibarAddItem
                      className={classNames(
                        "__wab_instance",
                        sty.omnibarAddItem__jq4NM
                      )}
                      icon={
                        <HStackBlockIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___6Wcrd
                          )}
                          role={"img"}
                        />
                      }
                      previewImage={
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__pQIvQ)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          src={{
                            src: image49X6ZsC5Ww5,
                            fullWidth: 300,
                            fullHeight: 150,
                            aspectRatio: 2,
                          }}
                        />
                      }
                      title={"Row box"}
                    />

                    <OmnibarAddItem
                      className={classNames(
                        "__wab_instance",
                        sty.omnibarAddItem__io56M
                      )}
                      icon={
                        <VStackBlockIcon
                          className={classNames(projectcss.all, sty.svg__nYQn)}
                          role={"img"}
                        />
                      }
                      previewImage={
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__cmKbc)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          src={{
                            src: image49X6ZsC5Ww5,
                            fullWidth: 300,
                            fullHeight: 150,
                            aspectRatio: 2,
                          }}
                        />
                      }
                      title={"Column box"}
                    />

                    <OmnibarAddItem
                      className={classNames(
                        "__wab_instance",
                        sty.omnibarAddItem__o21YS
                      )}
                      icon={
                        <TextBlockIcon
                          className={classNames(projectcss.all, sty.svg__vuEsV)}
                          role={"img"}
                        />
                      }
                      previewImage={
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__oiF9)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          src={{
                            src: image49X6ZsC5Ww5,
                            fullWidth: 300,
                            fullHeight: 150,
                            aspectRatio: 2,
                          }}
                        />
                      }
                      title={"Textbox"}
                    />

                    <OmnibarAddItem
                      className={classNames(
                        "__wab_instance",
                        sty.omnibarAddItem__czoEh
                      )}
                      icon={
                        <IconIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___3Dn3A
                          )}
                          role={"img"}
                        />
                      }
                      previewImage={
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__j59Mw)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          src={{
                            src: image49X6ZsC5Ww5,
                            fullWidth: 300,
                            fullHeight: 150,
                            aspectRatio: 2,
                          }}
                        />
                      }
                      title={"Icon"}
                    />
                  </React.Fragment>
                }
                className={classNames(
                  "__wab_instance",
                  sty.omnibarGroup__cSmrg
                )}
                commandChildren={
                  <React.Fragment>
                    <OmnibarCommandItem
                      className={classNames(
                        "__wab_instance",
                        sty.omnibarCommandItem__rtQs
                      )}
                      icon={
                        <AddPageIcon
                          className={classNames(projectcss.all, sty.svg__q0WLp)}
                          role={"img"}
                        />
                      }
                    />

                    <OmnibarCommandItem
                      className={classNames(
                        "__wab_instance",
                        sty.omnibarCommandItem__iJ240
                      )}
                      icon={
                        <AddPageIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___3Uemh
                          )}
                          role={"img"}
                        />
                      }
                    />
                  </React.Fragment>
                }
              />
            </React.Fragment>
          ),

          value: args.children,
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "allTab",
    "insertTab",
    "focusTab",
    "newTab",
    "runTab",
    "query",
    "text",
    "content",
  ],

  header: [
    "header",
    "allTab",
    "insertTab",
    "focusTab",
    "newTab",
    "runTab",
    "query",
    "text",
  ],

  allTab: ["allTab"],
  insertTab: ["insertTab"],
  focusTab: ["focusTab"],
  newTab: ["newTab"],
  runTab: ["runTab"],
  query: ["query"],
  text: ["text"],
  content: ["content"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  allTab: typeof OmnibarTabHeader;
  insertTab: typeof OmnibarTabHeader;
  focusTab: typeof OmnibarTabHeader;
  newTab: typeof OmnibarTabHeader;
  runTab: typeof OmnibarTabHeader;
  query: "input";
  text: "div";
  content: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOmnibar__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicOmnibar__VariantsArgs;
  args?: PlasmicOmnibar__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicOmnibar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicOmnibar__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicOmnibar__ArgProps,
          internalVariantPropNames: PlasmicOmnibar__VariantProps,
        }),

      [props, nodeName]
    );

    return PlasmicOmnibar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOmnibar";
  } else {
    func.displayName = `PlasmicOmnibar.${nodeName}`;
  }
  return func;
}

export const PlasmicOmnibar = Object.assign(
  // Top-level PlasmicOmnibar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    allTab: makeNodeComponent("allTab"),
    insertTab: makeNodeComponent("insertTab"),
    focusTab: makeNodeComponent("focusTab"),
    newTab: makeNodeComponent("newTab"),
    runTab: makeNodeComponent("runTab"),
    query: makeNodeComponent("query"),
    text: makeNodeComponent("text"),
    content: makeNodeComponent("content"),

    // Metadata about props expected for PlasmicOmnibar
    internalVariantProps: PlasmicOmnibar__VariantProps,
    internalArgProps: PlasmicOmnibar__ArgProps,
  }
);

export default PlasmicOmnibar;
/* prettier-ignore-end */
