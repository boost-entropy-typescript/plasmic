// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fQPf2UiMEMhB52C8QQXwWe
// Component: KnUjAGcQKT

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName,
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions,
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "./plasmic_plasmic_kit_omnibar.module.css"; // plasmic-import: fQPf2UiMEMhB52C8QQXwWe/projectcss
import sty from "./PlasmicOmnibarAddItem.module.css"; // plasmic-import: KnUjAGcQKT/css

import AreaInputIcon from "../plasmic_kit/PlasmicIcon__AreaInput"; // plasmic-import: BGTwDE0-XM3EQ/icon
import image49X6ZsC5Ww5 from "../plasmic_kit_design_system/images/image4.svg"; // plasmic-import: 9X6ZsC5ww5/picture

createPlasmicElementProxy;

export type PlasmicOmnibarAddItem__VariantMembers = {
  focused: "focused";
  size: "large";
  preview: "icon" | "image";
  grayImageBackground: "grayImageBackground";
  installOnly: "installOnly";
  _new: "_new";
};
export type PlasmicOmnibarAddItem__VariantsArgs = {
  focused?: SingleBooleanChoiceArg<"focused">;
  size?: SingleChoiceArg<"large">;
  preview?: SingleChoiceArg<"icon" | "image">;
  grayImageBackground?: SingleBooleanChoiceArg<"grayImageBackground">;
  installOnly?: SingleBooleanChoiceArg<"installOnly">;
  _new?: SingleBooleanChoiceArg<"_new">;
};
type VariantPropType = keyof PlasmicOmnibarAddItem__VariantsArgs;
export const PlasmicOmnibarAddItem__VariantProps = new Array<VariantPropType>(
  "focused",
  "size",
  "preview",
  "grayImageBackground",
  "installOnly",
  "_new"
);

export type PlasmicOmnibarAddItem__ArgsType = {
  title?: React.ReactNode;
  icon?: React.ReactNode;
  previewImage?: React.ReactNode;
  hoverText?: string;
};
type ArgPropType = keyof PlasmicOmnibarAddItem__ArgsType;
export const PlasmicOmnibarAddItem__ArgProps = new Array<ArgPropType>(
  "title",
  "icon",
  "previewImage",
  "hoverText"
);

export type PlasmicOmnibarAddItem__OverridesType = {
  root?: Flex__<"div">;
  imageBackground?: Flex__<"div">;
  titleBox?: Flex__<"div">;
};

export interface DefaultOmnibarAddItemProps {
  title?: React.ReactNode;
  icon?: React.ReactNode;
  previewImage?: React.ReactNode;
  hoverText?: string;
  focused?: SingleBooleanChoiceArg<"focused">;
  size?: SingleChoiceArg<"large">;
  preview?: SingleChoiceArg<"icon" | "image">;
  grayImageBackground?: SingleBooleanChoiceArg<"grayImageBackground">;
  installOnly?: SingleBooleanChoiceArg<"installOnly">;
  _new?: SingleBooleanChoiceArg<"_new">;
  className?: string;
}

const $$ = {};

function PlasmicOmnibarAddItem__RenderFunc(props: {
  variants: PlasmicOmnibarAddItem__VariantsArgs;
  args: PlasmicOmnibarAddItem__ArgsType;
  overrides: PlasmicOmnibarAddItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          hoverText: "Install package",
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "focused",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.focused,
      },
      {
        path: "size",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.size,
      },
      {
        path: "preview",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.preview,
      },
      {
        path: "grayImageBackground",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.grayImageBackground,
      },
      {
        path: "installOnly",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.installOnly,
      },
      {
        path: "_new",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props._new,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.root_new]: hasVariant($state, "_new", "_new"),
          [sty.root_new_preview_image]:
            hasVariant($state, "preview", "image") &&
            hasVariant($state, "_new", "_new"),
          [sty.rootfocused]: hasVariant($state, "focused", "focused"),
          [sty.rootgrayImageBackground]: hasVariant(
            $state,
            "grayImageBackground",
            "grayImageBackground"
          ),
          [sty.rootinstallOnly]: hasVariant(
            $state,
            "installOnly",
            "installOnly"
          ),
          [sty.rootinstallOnly_preview_image]:
            hasVariant($state, "installOnly", "installOnly") &&
            hasVariant($state, "preview", "image"),
          [sty.rootpreview_icon]: hasVariant($state, "preview", "icon"),
          [sty.rootpreview_image]: hasVariant($state, "preview", "image"),
          [sty.rootsize_large]: hasVariant($state, "size", "large"),
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__ncMfp, {
          [sty.freeBox_new_preview_image__ncMfpPk6FPBQn6F]:
            hasVariant($state, "preview", "image") &&
            hasVariant($state, "_new", "_new"),
        })}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___2WwvC
          )}
        >
          {"NEW"}
        </div>
      </div>
      {(hasVariant($state, "preview", "icon") ? true : false) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox___4Hmfb, {
            [sty.freeBoxpreview_icon___4HmfbqFxKu]: hasVariant(
              $state,
              "preview",
              "icon"
            ),
            [sty.freeBoxpreview_image___4HmfBbQn6F]: hasVariant(
              $state,
              "preview",
              "image"
            ),
          })}
        >
          <div className={classNames(projectcss.all, sty.freeBox__oVcj5)}>
            {renderPlasmicSlot({
              defaultContents: (
                <AreaInputIcon
                  className={classNames(projectcss.all, sty.svg__sFd4A)}
                  role={"img"}
                />
              ),

              value: args.icon,
              className: classNames(sty.slotTargetIcon),
            })}
          </div>
        </div>
      ) : null}
      {(hasVariant($state, "preview", "image") ? true : false) ? (
        <div
          data-plasmic-name={"imageBackground"}
          data-plasmic-override={overrides.imageBackground}
          className={classNames(projectcss.all, sty.imageBackground, {
            [sty.imageBackgroundgrayImageBackground_preview_image]:
              hasVariant(
                $state,
                "grayImageBackground",
                "grayImageBackground"
              ) && hasVariant($state, "preview", "image"),
            [sty.imageBackgroundinstallOnly_preview_image]:
              hasVariant($state, "installOnly", "installOnly") &&
              hasVariant($state, "preview", "image"),
            [sty.imageBackgroundpreview_image]: hasVariant(
              $state,
              "preview",
              "image"
            ),
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__mRf6Q)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={{
                  src: image49X6ZsC5Ww5,
                  fullWidth: 300,
                  fullHeight: 150,
                  aspectRatio: 2,
                }}
              />
            ),

            value: args.previewImage,
          })}
        </div>
      ) : null}
      <div
        className={classNames(projectcss.all, sty.freeBox__ssHQl, {
          [sty.freeBoxinstallOnly__ssHQlA84Vl]: hasVariant(
            $state,
            "installOnly",
            "installOnly"
          ),
          [sty.freeBoxinstallOnly_preview_image__ssHQlA84VlBQn6F]:
            hasVariant($state, "preview", "image") &&
            hasVariant($state, "installOnly", "installOnly"),
          [sty.freeBoxinstallOnly_preview_image_focused__ssHQlA84VlBQn6FPJrFk]:
            hasVariant($state, "focused", "focused") &&
            hasVariant($state, "installOnly", "installOnly") &&
            hasVariant($state, "preview", "image"),
          [sty.freeBoxpreview_icon__ssHQlQFxKu]: hasVariant(
            $state,
            "preview",
            "icon"
          ),
          [sty.freeBoxpreview_image__ssHQlbQn6F]: hasVariant(
            $state,
            "preview",
            "image"
          ),
        })}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__nsmVm,
            {
              [sty.text_new_preview_image__nsmVmPk6FPBQn6F]:
                hasVariant($state, "preview", "image") &&
                hasVariant($state, "_new", "_new"),
              [sty.textpreview_image__nsmVMbQn6F]: hasVariant(
                $state,
                "preview",
                "image"
              ),
            }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.hoverText;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Install package";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </div>
      <div
        data-plasmic-name={"titleBox"}
        data-plasmic-override={overrides.titleBox}
        className={classNames(projectcss.all, sty.titleBox, {
          [sty.titleBoxfocused]: hasVariant($state, "focused", "focused"),
          [sty.titleBoxgrayImageBackground]: hasVariant(
            $state,
            "grayImageBackground",
            "grayImageBackground"
          ),
          [sty.titleBoxinstallOnly_preview_image]:
            hasVariant($state, "installOnly", "installOnly") &&
            hasVariant($state, "preview", "image"),
          [sty.titleBoxpreview_image]: hasVariant($state, "preview", "image"),
          [sty.titleBoxsize_large]: hasVariant($state, "size", "large"),
        })}
      >
        {renderPlasmicSlot({
          defaultContents: "Title",
          value: args.title,
          className: classNames(sty.slotTargetTitle, {
            [sty.slotTargetTitle_new]: hasVariant($state, "_new", "_new"),
            [sty.slotTargetTitlefocused]: hasVariant(
              $state,
              "focused",
              "focused"
            ),
            [sty.slotTargetTitlegrayImageBackground]: hasVariant(
              $state,
              "grayImageBackground",
              "grayImageBackground"
            ),
            [sty.slotTargetTitlegrayImageBackground_preview_image]:
              hasVariant(
                $state,
                "grayImageBackground",
                "grayImageBackground"
              ) && hasVariant($state, "preview", "image"),
            [sty.slotTargetTitlepreview_image]: hasVariant(
              $state,
              "preview",
              "image"
            ),
            [sty.slotTargetTitlesize_large]: hasVariant(
              $state,
              "size",
              "large"
            ),
          }),
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "imageBackground", "titleBox"],
  imageBackground: ["imageBackground"],
  titleBox: ["titleBox"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  imageBackground: "div";
  titleBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOmnibarAddItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOmnibarAddItem__VariantsArgs;
    args?: PlasmicOmnibarAddItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicOmnibarAddItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicOmnibarAddItem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicOmnibarAddItem__ArgProps,
          internalVariantPropNames: PlasmicOmnibarAddItem__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicOmnibarAddItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOmnibarAddItem";
  } else {
    func.displayName = `PlasmicOmnibarAddItem.${nodeName}`;
  }
  return func;
}

export const PlasmicOmnibarAddItem = Object.assign(
  // Top-level PlasmicOmnibarAddItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    imageBackground: makeNodeComponent("imageBackground"),
    titleBox: makeNodeComponent("titleBox"),

    // Metadata about props expected for PlasmicOmnibarAddItem
    internalVariantProps: PlasmicOmnibarAddItem__VariantProps,
    internalArgProps: PlasmicOmnibarAddItem__ArgProps,
  }
);

export default PlasmicOmnibarAddItem;
/* prettier-ignore-end */
