// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fQPf2UiMEMhB52C8QQXwWe
// Component: KnUjAGcQKT
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "./plasmic_plasmic_kit_omnibar.module.css"; // plasmic-import: fQPf2UiMEMhB52C8QQXwWe/projectcss
import sty from "./PlasmicOmnibarAddItem.module.css"; // plasmic-import: KnUjAGcQKT/css

import AreaInputIcon from "../plasmic_kit/PlasmicIcon__AreaInput"; // plasmic-import: BGTwDE0-XM3EQ/icon
import image49X6ZsC5Ww5 from "../plasmic_kit_design_system/images/image4.svg"; // plasmic-import: 9X6ZsC5ww5/picture

export type PlasmicOmnibarAddItem__VariantMembers = {
  focused: "focused";
  size: "large";
  preview: "icon" | "image";
  grayImageBackground: "grayImageBackground";
  installOnly: "installOnly";
};

export type PlasmicOmnibarAddItem__VariantsArgs = {
  focused?: SingleBooleanChoiceArg<"focused">;
  size?: SingleChoiceArg<"large">;
  preview?: SingleChoiceArg<"icon" | "image">;
  grayImageBackground?: SingleBooleanChoiceArg<"grayImageBackground">;
  installOnly?: SingleBooleanChoiceArg<"installOnly">;
};

type VariantPropType = keyof PlasmicOmnibarAddItem__VariantsArgs;
export const PlasmicOmnibarAddItem__VariantProps = new Array<VariantPropType>(
  "focused",
  "size",
  "preview",
  "grayImageBackground",
  "installOnly"
);

export type PlasmicOmnibarAddItem__ArgsType = {
  title?: React.ReactNode;
  icon?: React.ReactNode;
  previewImage?: React.ReactNode;
};

type ArgPropType = keyof PlasmicOmnibarAddItem__ArgsType;
export const PlasmicOmnibarAddItem__ArgProps = new Array<ArgPropType>(
  "title",
  "icon",
  "previewImage"
);

export type PlasmicOmnibarAddItem__OverridesType = {
  root?: p.Flex<"div">;
  imageBackground?: p.Flex<"div">;
  text?: p.Flex<"div">;
  titleBox?: p.Flex<"div">;
};

export interface DefaultOmnibarAddItemProps {
  title?: React.ReactNode;
  icon?: React.ReactNode;
  previewImage?: React.ReactNode;
  focused?: SingleBooleanChoiceArg<"focused">;
  size?: SingleChoiceArg<"large">;
  preview?: SingleChoiceArg<"icon" | "image">;
  grayImageBackground?: SingleBooleanChoiceArg<"grayImageBackground">;
  installOnly?: SingleBooleanChoiceArg<"installOnly">;
  className?: string;
}

function PlasmicOmnibarAddItem__RenderFunc(props: {
  variants: PlasmicOmnibarAddItem__VariantsArgs;
  args: PlasmicOmnibarAddItem__ArgsType;
  overrides: PlasmicOmnibarAddItem__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),

    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootfocused]: hasVariant(variants, "focused", "focused"),
          [sty.rootgrayImageBackground]: hasVariant(
            variants,
            "grayImageBackground",
            "grayImageBackground"
          ),

          [sty.rootinstallOnly]: hasVariant(
            variants,
            "installOnly",
            "installOnly"
          ),

          [sty.rootinstallOnly_preview_image]:
            hasVariant(variants, "installOnly", "installOnly") &&
            hasVariant(variants, "preview", "image"),
          [sty.rootpreview_icon]: hasVariant(variants, "preview", "icon"),
          [sty.rootpreview_image]: hasVariant(variants, "preview", "image"),
          [sty.rootsize_large]: hasVariant(variants, "size", "large"),
        }
      )}
    >
      {(hasVariant(variants, "preview", "icon") ? true : false) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox___4Hmfb, {
            [sty.freeBoxpreview_icon___4HmfbqFxKu]: hasVariant(
              variants,
              "preview",
              "icon"
            ),

            [sty.freeBoxpreview_image___4HmfBbQn6F]: hasVariant(
              variants,
              "preview",
              "image"
            ),
          })}
        >
          <div className={classNames(projectcss.all, sty.freeBox__oVcj5)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <AreaInputIcon
                  className={classNames(projectcss.all, sty.svg__sFd4A)}
                  role={"img"}
                />
              ),

              value: args.icon,
              className: classNames(sty.slotTargetIcon),
            })}
          </div>
        </div>
      ) : null}
      {(hasVariant(variants, "preview", "image") ? true : false) ? (
        <div
          data-plasmic-name={"imageBackground"}
          data-plasmic-override={overrides.imageBackground}
          className={classNames(projectcss.all, sty.imageBackground, {
            [sty.imageBackgroundgrayImageBackground_preview_image]:
              hasVariant(
                variants,
                "grayImageBackground",
                "grayImageBackground"
              ) && hasVariant(variants, "preview", "image"),
            [sty.imageBackgroundinstallOnly_preview_image]:
              hasVariant(variants, "installOnly", "installOnly") &&
              hasVariant(variants, "preview", "image"),
            [sty.imageBackgroundpreview_image]: hasVariant(
              variants,
              "preview",
              "image"
            ),
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__mRf6Q)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                src={{
                  src: image49X6ZsC5Ww5,
                  fullWidth: 300,
                  fullHeight: 150,
                  aspectRatio: 2,
                }}
              />
            ),

            value: args.previewImage,
          })}
        </div>
      ) : null}

      <div
        className={classNames(projectcss.all, sty.freeBox__ssHQl, {
          [sty.freeBoxinstallOnly__ssHQlA84Vl]: hasVariant(
            variants,
            "installOnly",
            "installOnly"
          ),

          [sty.freeBoxinstallOnly_preview_image__ssHQlA84VlBQn6F]:
            hasVariant(variants, "preview", "image") &&
            hasVariant(variants, "installOnly", "installOnly"),
          [sty.freeBoxinstallOnly_preview_image_focused__ssHQlA84VlBQn6FPJrFk]:
            hasVariant(variants, "focused", "focused") &&
            hasVariant(variants, "installOnly", "installOnly") &&
            hasVariant(variants, "preview", "image"),
          [sty.freeBoxpreview_image__ssHQlbQn6F]: hasVariant(
            variants,
            "preview",
            "image"
          ),
        })}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text,
            {
              [sty.textpreview_image]: hasVariant(variants, "preview", "image"),
            }
          )}
        >
          {"Install package"}
        </div>
      </div>

      <div
        data-plasmic-name={"titleBox"}
        data-plasmic-override={overrides.titleBox}
        className={classNames(projectcss.all, sty.titleBox, {
          [sty.titleBoxfocused]: hasVariant(variants, "focused", "focused"),
          [sty.titleBoxgrayImageBackground]: hasVariant(
            variants,
            "grayImageBackground",
            "grayImageBackground"
          ),

          [sty.titleBoxinstallOnly_preview_image]:
            hasVariant(variants, "installOnly", "installOnly") &&
            hasVariant(variants, "preview", "image"),
          [sty.titleBoxpreview_image]: hasVariant(variants, "preview", "image"),
          [sty.titleBoxsize_large]: hasVariant(variants, "size", "large"),
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Title",
          value: args.title,
          className: classNames(sty.slotTargetTitle, {
            [sty.slotTargetTitlefocused]: hasVariant(
              variants,
              "focused",
              "focused"
            ),

            [sty.slotTargetTitlegrayImageBackground]: hasVariant(
              variants,
              "grayImageBackground",
              "grayImageBackground"
            ),

            [sty.slotTargetTitlegrayImageBackground_preview_image]:
              hasVariant(
                variants,
                "grayImageBackground",
                "grayImageBackground"
              ) && hasVariant(variants, "preview", "image"),
            [sty.slotTargetTitlepreview_image]: hasVariant(
              variants,
              "preview",
              "image"
            ),

            [sty.slotTargetTitlesize_large]: hasVariant(
              variants,
              "size",
              "large"
            ),
          }),
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "imageBackground", "text", "titleBox"],
  imageBackground: ["imageBackground"],
  text: ["text"],
  titleBox: ["titleBox"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  imageBackground: "div";
  text: "div";
  titleBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOmnibarAddItem__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicOmnibarAddItem__VariantsArgs;
  args?: PlasmicOmnibarAddItem__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicOmnibarAddItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicOmnibarAddItem__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicOmnibarAddItem__ArgProps,
          internalVariantPropNames: PlasmicOmnibarAddItem__VariantProps,
        }),

      [props, nodeName]
    );

    return PlasmicOmnibarAddItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOmnibarAddItem";
  } else {
    func.displayName = `PlasmicOmnibarAddItem.${nodeName}`;
  }
  return func;
}

export const PlasmicOmnibarAddItem = Object.assign(
  // Top-level PlasmicOmnibarAddItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    imageBackground: makeNodeComponent("imageBackground"),
    text: makeNodeComponent("text"),
    titleBox: makeNodeComponent("titleBox"),

    // Metadata about props expected for PlasmicOmnibarAddItem
    internalVariantProps: PlasmicOmnibarAddItem__VariantProps,
    internalArgProps: PlasmicOmnibarAddItem__ArgProps,
  }
);

export default PlasmicOmnibarAddItem;
/* prettier-ignore-end */
