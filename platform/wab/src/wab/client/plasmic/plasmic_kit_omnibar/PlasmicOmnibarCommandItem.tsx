// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fQPf2UiMEMhB52C8QQXwWe
// Component: A2li_iO_iw
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "./plasmic_plasmic_kit_omnibar.module.css"; // plasmic-import: fQPf2UiMEMhB52C8QQXwWe/projectcss
import sty from "./PlasmicOmnibarCommandItem.module.css"; // plasmic-import: A2li_iO_iw/css

import AddPageIcon from "../plasmic_kit_design_system/icons/PlasmicIcon__AddPage"; // plasmic-import: JuZ41tZRcH/icon

export type PlasmicOmnibarCommandItem__VariantMembers = {
  focused: "focused";
  withKeyboardShortcut: "withKeyboardShortcut";
};

export type PlasmicOmnibarCommandItem__VariantsArgs = {
  focused?: SingleBooleanChoiceArg<"focused">;
  withKeyboardShortcut?: SingleBooleanChoiceArg<"withKeyboardShortcut">;
};

type VariantPropType = keyof PlasmicOmnibarCommandItem__VariantsArgs;
export const PlasmicOmnibarCommandItem__VariantProps =
  new Array<VariantPropType>("focused", "withKeyboardShortcut");

export type PlasmicOmnibarCommandItem__ArgsType = {
  keyboardShortcut?: React.ReactNode;
  title?: React.ReactNode;
  icon?: React.ReactNode;
};

type ArgPropType = keyof PlasmicOmnibarCommandItem__ArgsType;
export const PlasmicOmnibarCommandItem__ArgProps = new Array<ArgPropType>(
  "keyboardShortcut",
  "title",
  "icon"
);

export type PlasmicOmnibarCommandItem__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultOmnibarCommandItemProps {
  keyboardShortcut?: React.ReactNode;
  title?: React.ReactNode;
  icon?: React.ReactNode;
  focused?: SingleBooleanChoiceArg<"focused">;
  withKeyboardShortcut?: SingleBooleanChoiceArg<"withKeyboardShortcut">;
  className?: string;
}

function PlasmicOmnibarCommandItem__RenderFunc(props: {
  variants: PlasmicOmnibarCommandItem__VariantsArgs;
  args: PlasmicOmnibarCommandItem__ArgsType;
  overrides: PlasmicOmnibarCommandItem__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),

    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootfocused]: hasVariant(variants, "focused", "focused"),
          [sty.rootwithKeyboardShortcut]: hasVariant(
            variants,
            "withKeyboardShortcut",
            "withKeyboardShortcut"
          ),
        }
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__mKbC)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <AddPageIcon
              className={classNames(projectcss.all, sty.svg__vTshG)}
              role={"img"}
            />
          ),

          value: args.icon,
        })}

        {p.renderPlasmicSlot({
          defaultContents: "New page...",
          value: args.title,
          className: classNames(sty.slotTargetTitle, {
            [sty.slotTargetTitlefocused]: hasVariant(
              variants,
              "focused",
              "focused"
            ),
          }),
        })}
      </p.Stack>

      {(
        hasVariant(variants, "withKeyboardShortcut", "withKeyboardShortcut")
          ? true
          : false
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__mYueg, {
            [sty.freeBoxwithKeyboardShortcut__mYuegxwuY7]: hasVariant(
              variants,
              "withKeyboardShortcut",
              "withKeyboardShortcut"
            ),
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "âŒ˜ + 1",
            value: args.keyboardShortcut,
            className: classNames(sty.slotTargetKeyboardShortcut),
          })}
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOmnibarCommandItem__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicOmnibarCommandItem__VariantsArgs;
  args?: PlasmicOmnibarCommandItem__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicOmnibarCommandItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicOmnibarCommandItem__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicOmnibarCommandItem__ArgProps,
          internalVariantPropNames: PlasmicOmnibarCommandItem__VariantProps,
        }),

      [props, nodeName]
    );

    return PlasmicOmnibarCommandItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOmnibarCommandItem";
  } else {
    func.displayName = `PlasmicOmnibarCommandItem.${nodeName}`;
  }
  return func;
}

export const PlasmicOmnibarCommandItem = Object.assign(
  // Top-level PlasmicOmnibarCommandItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicOmnibarCommandItem
    internalVariantProps: PlasmicOmnibarCommandItem__VariantProps,
    internalArgProps: PlasmicOmnibarCommandItem__ArgProps,
  }
);

export default PlasmicOmnibarCommandItem;
/* prettier-ignore-end */
