// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gtUDvxG6cmBbSzqLikNzoP
// Component: _1hAfQqnlz3
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import IconButton from "../../components/widgets/IconButton"; // plasmic-import: LPry-TF4j22a/component
import Textbox from "../../components/widgets/Textbox"; // plasmic-import: pA22NEzDCsn_/component
import ExperimentPanel from "../../components/splits/ExperimentPanel"; // plasmic-import: HtHxjHknmj_/component
import ExperimentEvents from "../../components/splits/ExperimentEvents"; // plasmic-import: SRI244k7gOA/component
import ExperimentEvent from "../../components/splits/ExperimentEvent"; // plasmic-import: fjdDZovo7S/component
import ExperimentEternalIds from "../../components/splits/ExperimentEternalIds"; // plasmic-import: APlN8dajrS9/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import plasmic_plasmic_kit_q_4_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "./plasmic_plasmic_kit_optimize.module.css"; // plasmic-import: gtUDvxG6cmBbSzqLikNzoP/projectcss
import sty from "./PlasmicExperimentModalWithSlots.module.css"; // plasmic-import: _1hAfQqnlz3/css

import RocketsvgIcon from "../q_4_icons/icons/PlasmicIcon__Rocketsvg"; // plasmic-import: uRQfbBjV9/icon
import CloseIcon from "../plasmic_kit/PlasmicIcon__Close"; // plasmic-import: hy7vKrgdAZwW4/icon
import ChevronDownsvgIcon from "../q_4_icons/icons/PlasmicIcon__ChevronDownsvg"; // plasmic-import: xZrB9_0ir/icon
import SearchsvgIcon from "../q_4_icons/icons/PlasmicIcon__Searchsvg"; // plasmic-import: R5DLz11OA/icon
import ClosesvgIcon from "../q_4_icons/icons/PlasmicIcon__Closesvg"; // plasmic-import: DhvEHyCHT/icon
import ArrowRightsvgIcon from "../q_4_icons/icons/PlasmicIcon__ArrowRightsvg"; // plasmic-import: 9Jv8jb253/icon

export type PlasmicExperimentModalWithSlots__VariantMembers = {
  isExternal: "isExternal";
  unnamedVariant: "unnamedVariant";
};

export type PlasmicExperimentModalWithSlots__VariantsArgs = {
  isExternal?: SingleBooleanChoiceArg<"isExternal">;
  unnamedVariant?: SingleBooleanChoiceArg<"unnamedVariant">;
};

type VariantPropType = keyof PlasmicExperimentModalWithSlots__VariantsArgs;
export const PlasmicExperimentModalWithSlots__VariantProps =
  new Array<VariantPropType>("isExternal", "unnamedVariant");

export type PlasmicExperimentModalWithSlots__ArgsType = {
  versions?: React.ReactNode;
  extraMetadataEditors?: React.ReactNode;
};

type ArgPropType = keyof PlasmicExperimentModalWithSlots__ArgsType;
export const PlasmicExperimentModalWithSlots__ArgProps = new Array<ArgPropType>(
  "versions",
  "extraMetadataEditors"
);

export type PlasmicExperimentModalWithSlots__OverridesType = {
  root?: p.Flex<"div">;
  testTitle?: p.Flex<"div">;
  testType?: p.Flex<"div">;
  testStatus?: p.Flex<"div">;
  closeButton?: p.Flex<typeof IconButton>;
  content?: p.Flex<"div">;
  descriptionInput?: p.Flex<typeof Textbox>;
  versions?: p.Flex<"div">;
  extraControls?: p.Flex<"div">;
  experimentEvents?: p.Flex<typeof ExperimentEvents>;
  experimentEternalIds?: p.Flex<typeof ExperimentEternalIds>;
  saveBtn?: p.Flex<typeof Button>;
};

export interface DefaultExperimentModalWithSlotsProps {
  versions?: React.ReactNode;
  extraMetadataEditors?: React.ReactNode;
  isExternal?: SingleBooleanChoiceArg<"isExternal">;
  unnamedVariant?: SingleBooleanChoiceArg<"unnamedVariant">;
  className?: string;
}

function PlasmicExperimentModalWithSlots__RenderFunc(props: {
  variants: PlasmicExperimentModalWithSlots__VariantsArgs;
  args: PlasmicExperimentModalWithSlots__ArgsType;
  overrides: PlasmicExperimentModalWithSlots__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootisExternal]: hasVariant(
            variants,
            "isExternal",
            "isExternal"
          ),
        }
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__fkn51)}
      >
        <RocketsvgIcon
          className={classNames(projectcss.all, sty.svg__ahWl)}
          role={"img"}
        />

        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox___5ROv)}>
            <div
              data-plasmic-name={"testTitle"}
              data-plasmic-override={overrides.testTitle}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.testTitle
              )}
            >
              {"Homepage A/B Test"}
            </div>

            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___5Qorm)}
              >
                <div
                  data-plasmic-name={"testType"}
                  data-plasmic-override={overrides.testType}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.testType
                  )}
                >
                  {"A/B Test"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__baCmI
                  )}
                >
                  {"âˆ™"}
                </div>

                <div
                  data-plasmic-name={"testStatus"}
                  data-plasmic-override={overrides.testStatus}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.testStatus
                  )}
                >
                  {"New"}
                </div>
              </p.Stack>
            ) : null}
          </div>
        ) : null}

        <IconButton
          data-plasmic-name={"closeButton"}
          data-plasmic-override={overrides.closeButton}
          children2={
            <ChevronDownsvgIcon
              className={classNames(projectcss.all, sty.svg___6H9YX)}
              role={"img"}
            />
          }
          className={classNames("__wab_instance", sty.closeButton)}
          size={"small" as const}
          type={["seamless"]}
        >
          <CloseIcon
            className={classNames(projectcss.all, sty.svg__mkt5I)}
            role={"img"}
          />
        </IconButton>
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"content"}
        data-plasmic-override={overrides.content}
        hasGap={true}
        className={classNames(projectcss.all, sty.content)}
      >
        <div className={classNames(projectcss.all, sty.freeBox___8YZ0)}>
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__wDxNb)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dne31
                )}
              >
                {"Description"}
              </div>
            </div>
          ) : null}

          <Textbox
            data-plasmic-name={"descriptionInput"}
            data-plasmic-override={overrides.descriptionInput}
            className={classNames("__wab_instance", sty.descriptionInput)}
            placeholder={"Enter (optional) ..." as const}
            styleType={["white", "bordered"]}
          />
        </div>

        {p.renderPlasmicSlot({
          defaultContents: null,
          value: args.extraMetadataEditors,
        })}

        {true ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"versions"}
            data-plasmic-override={overrides.versions}
            hasGap={true}
            className={classNames(projectcss.all, sty.versions)}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <ExperimentPanel
                    className={classNames(
                      "__wab_instance",
                      sty.experimentPanel___7Wit3
                    )}
                    isBase={true}
                    versionName={"Version A"}
                  />

                  <ExperimentPanel
                    className={classNames(
                      "__wab_instance",
                      sty.experimentPanel__haPkv
                    )}
                    versionName={"Version B"}
                  />
                </React.Fragment>
              ),

              value: args.versions,
            })}
          </p.Stack>
        ) : null}
      </p.Stack>

      {true ? (
        <div
          data-plasmic-name={"extraControls"}
          data-plasmic-override={overrides.extraControls}
          className={classNames(projectcss.all, sty.extraControls)}
        >
          {(hasVariant(variants, "isExternal", "isExternal") ? true : true) ? (
            <ExperimentEvents
              data-plasmic-name={"experimentEvents"}
              data-plasmic-override={overrides.experimentEvents}
              className={classNames("__wab_instance", sty.experimentEvents, {
                [sty.experimentEventsisExternal]: hasVariant(
                  variants,
                  "isExternal",
                  "isExternal"
                ),
              })}
            />
          ) : null}
          {(hasVariant(variants, "isExternal", "isExternal") ? true : true) ? (
            <ExperimentEternalIds
              data-plasmic-name={"experimentEternalIds"}
              data-plasmic-override={overrides.experimentEternalIds}
              className={classNames(
                "__wab_instance",
                sty.experimentEternalIds,
                {
                  [sty.experimentEternalIdsisExternal]: hasVariant(
                    variants,
                    "isExternal",
                    "isExternal"
                  ),
                }
              )}
            />
          ) : null}
        </div>
      ) : null}

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__wxWEf)}
      >
        <Button
          data-plasmic-name={"saveBtn"}
          data-plasmic-override={overrides.saveBtn}
          className={classNames("__wab_instance", sty.saveBtn, {
            [sty.saveBtnisExternal]: hasVariant(
              variants,
              "isExternal",
              "isExternal"
            ),
          })}
          endIcon={
            <ChevronDownsvgIcon
              className={classNames(projectcss.all, sty.svg__o7Vjf)}
              role={"img"}
            />
          }
          size={"wide" as const}
          startIcon={
            <ArrowRightsvgIcon
              className={classNames(projectcss.all, sty.svg__kubdL)}
              role={"img"}
            />
          }
          type={"primary" as const}
        >
          {"Save"}
        </Button>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "testTitle",
    "testType",
    "testStatus",
    "closeButton",
    "content",
    "descriptionInput",
    "versions",
    "extraControls",
    "experimentEvents",
    "experimentEternalIds",
    "saveBtn",
  ],

  testTitle: ["testTitle"],
  testType: ["testType"],
  testStatus: ["testStatus"],
  closeButton: ["closeButton"],
  content: ["content", "descriptionInput", "versions"],
  descriptionInput: ["descriptionInput"],
  versions: ["versions"],
  extraControls: ["extraControls", "experimentEvents", "experimentEternalIds"],
  experimentEvents: ["experimentEvents"],
  experimentEternalIds: ["experimentEternalIds"],
  saveBtn: ["saveBtn"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  testTitle: "div";
  testType: "div";
  testStatus: "div";
  closeButton: typeof IconButton;
  content: "div";
  descriptionInput: typeof Textbox;
  versions: "div";
  extraControls: "div";
  experimentEvents: typeof ExperimentEvents;
  experimentEternalIds: typeof ExperimentEternalIds;
  saveBtn: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicExperimentModalWithSlots__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicExperimentModalWithSlots__VariantsArgs;
    args?: PlasmicExperimentModalWithSlots__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicExperimentModalWithSlots__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicExperimentModalWithSlots__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicExperimentModalWithSlots__ArgProps,
      internalVariantPropNames: PlasmicExperimentModalWithSlots__VariantProps,
    });

    return PlasmicExperimentModalWithSlots__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicExperimentModalWithSlots";
  } else {
    func.displayName = `PlasmicExperimentModalWithSlots.${nodeName}`;
  }
  return func;
}

export const PlasmicExperimentModalWithSlots = Object.assign(
  // Top-level PlasmicExperimentModalWithSlots renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    testTitle: makeNodeComponent("testTitle"),
    testType: makeNodeComponent("testType"),
    testStatus: makeNodeComponent("testStatus"),
    closeButton: makeNodeComponent("closeButton"),
    content: makeNodeComponent("content"),
    descriptionInput: makeNodeComponent("descriptionInput"),
    versions: makeNodeComponent("versions"),
    extraControls: makeNodeComponent("extraControls"),
    experimentEvents: makeNodeComponent("experimentEvents"),
    experimentEternalIds: makeNodeComponent("experimentEternalIds"),
    saveBtn: makeNodeComponent("saveBtn"),

    // Metadata about props expected for PlasmicExperimentModalWithSlots
    internalVariantProps: PlasmicExperimentModalWithSlots__VariantProps,
    internalArgProps: PlasmicExperimentModalWithSlots__ArgProps,
  }
);

export default PlasmicExperimentModalWithSlots;
/* prettier-ignore-end */
