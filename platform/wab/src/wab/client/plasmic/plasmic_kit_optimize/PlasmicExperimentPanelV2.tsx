// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gtUDvxG6cmBbSzqLikNzoP
// Component: W5L82dKVj3d
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import plasmic_plasmic_kit_q_4_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "./plasmic_plasmic_kit_optimize.module.css"; // plasmic-import: gtUDvxG6cmBbSzqLikNzoP/projectcss
import sty from "./PlasmicExperimentPanelV2.module.css"; // plasmic-import: W5L82dKVj3d/css

import ArrowRightsvgIcon from "../q_4_icons/icons/PlasmicIcon__ArrowRightsvg"; // plasmic-import: 9Jv8jb253/icon
import ClosesvgIcon from "../q_4_icons/icons/PlasmicIcon__Closesvg"; // plasmic-import: DhvEHyCHT/icon
import ChevronDownsvgIcon from "../q_4_icons/icons/PlasmicIcon__ChevronDownsvg"; // plasmic-import: xZrB9_0ir/icon

export type PlasmicExperimentPanelV2__VariantMembers = {
  isBase: "isBase";
  isEditing: "isEditing";
  type: "schedule" | "segment";
};

export type PlasmicExperimentPanelV2__VariantsArgs = {
  isBase?: SingleBooleanChoiceArg<"isBase">;
  isEditing?: SingleBooleanChoiceArg<"isEditing">;
  type?: SingleChoiceArg<"schedule" | "segment">;
};

type VariantPropType = keyof PlasmicExperimentPanelV2__VariantsArgs;
export const PlasmicExperimentPanelV2__VariantProps =
  new Array<VariantPropType>("isBase", "isEditing", "type");

export type PlasmicExperimentPanelV2__ArgsType = {
  versionName?: React.ReactNode;
  controlContainer?: React.ReactNode;
};

type ArgPropType = keyof PlasmicExperimentPanelV2__ArgsType;
export const PlasmicExperimentPanelV2__ArgProps = new Array<ArgPropType>(
  "versionName",
  "controlContainer"
);

export type PlasmicExperimentPanelV2__OverridesType = {
  root?: p.Flex<"div">;
  variantName?: p.Flex<"div">;
  actionBtn?: p.Flex<typeof Button>;
  svg?: p.Flex<"svg">;
  text?: p.Flex<"div">;
  distribution?: p.Flex<"div">;
  control?: p.Flex<"div">;
  percentage?: p.Flex<"div">;
  controlContainer?: p.Flex<"div">;
};

export interface DefaultExperimentPanelV2Props {
  versionName?: React.ReactNode;
  controlContainer?: React.ReactNode;
  isBase?: SingleBooleanChoiceArg<"isBase">;
  isEditing?: SingleBooleanChoiceArg<"isEditing">;
  type?: SingleChoiceArg<"schedule" | "segment">;
  className?: string;
}

function PlasmicExperimentPanelV2__RenderFunc(props: {
  variants: PlasmicExperimentPanelV2__VariantsArgs;
  args: PlasmicExperimentPanelV2__ArgsType;
  overrides: PlasmicExperimentPanelV2__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootisEditing]: hasVariant(variants, "isEditing", "isEditing"),
          [sty.roottype_schedule]: hasVariant(variants, "type", "schedule"),
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__bM1Qx, {
          [sty.freeBoxisEditing__bM1QxCzmIj]: hasVariant(
            variants,
            "isEditing",
            "isEditing"
          ),

          [sty.freeBoxtype_schedule__bM1QxRdOsA]: hasVariant(
            variants,
            "type",
            "schedule"
          ),
        })}
      >
        {true ? (
          <div
            className={classNames(projectcss.all, sty.freeBox___08Ti3, {
              [sty.freeBoxisBase___08Ti3QDbUc]: hasVariant(
                variants,
                "isBase",
                "isBase"
              ),

              [sty.freeBoxisEditing___08Ti3CzmIj]: hasVariant(
                variants,
                "isEditing",
                "isEditing"
              ),
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__s4C4T, {
                [sty.freeBoxisBase__s4C4TqDbUc]: hasVariant(
                  variants,
                  "isBase",
                  "isBase"
                ),
              })}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Version A",
                value: args.versionName,
                className: classNames(sty.slotTargetVersionName, {
                  [sty.slotTargetVersionNameisBase]: hasVariant(
                    variants,
                    "isBase",
                    "isBase"
                  ),
                }),
              })}
            </div>
          </div>
        ) : null}
        {(hasVariant(variants, "isBase", "isBase") ? true : true) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__zWYf, {
              [sty.freeBoxisBase__zWYFqDbUc]: hasVariant(
                variants,
                "isBase",
                "isBase"
              ),

              [sty.freeBoxisEditing__zWYfCzmIj]: hasVariant(
                variants,
                "isEditing",
                "isEditing"
              ),
            })}
          >
            {(hasVariant(variants, "isBase", "isBase") ? true : true) ? (
              <div
                data-plasmic-name={"variantName"}
                data-plasmic-override={overrides.variantName}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.variantName,
                  {
                    [sty.variantNameisBase]: hasVariant(
                      variants,
                      "isBase",
                      "isBase"
                    ),

                    [sty.variantNameisEditing]: hasVariant(
                      variants,
                      "isEditing",
                      "isEditing"
                    ),
                  }
                )}
              >
                {"Base"}
              </div>
            ) : null}
          </div>
        ) : null}
        {(hasVariant(variants, "isBase", "isBase") ? true : true) ? (
          <Button
            data-plasmic-name={"actionBtn"}
            data-plasmic-override={overrides.actionBtn}
            className={classNames("__wab_instance", sty.actionBtn, {
              [sty.actionBtnisBase]: hasVariant(variants, "isBase", "isBase"),
              [sty.actionBtnisEditing]: hasVariant(
                variants,
                "isEditing",
                "isEditing"
              ),
            })}
            startIcon={
              <p.PlasmicIcon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                PlasmicIconType={
                  hasVariant(variants, "isEditing", "isEditing")
                    ? ClosesvgIcon
                    : ArrowRightsvgIcon
                }
                className={classNames(projectcss.all, sty.svg, {
                  [sty.svgisEditing]: hasVariant(
                    variants,
                    "isEditing",
                    "isEditing"
                  ),
                })}
                role={"img"}
              />
            }
            type={
              hasVariant(variants, "isEditing", "isEditing")
                ? ("backlitError" as const)
                : ("secondary" as const)
            }
            withIcons={"startIcon" as const}
          >
            {hasVariant(variants, "isEditing", "isEditing") ? "Stop" : "Edit"}
          </Button>
        ) : null}
        {(hasVariant(variants, "isBase", "isBase") ? true : true) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__wiHm4, {
              [sty.freeBoxisBase__wiHm4QDbUc]: hasVariant(
                variants,
                "isBase",
                "isBase"
              ),

              [sty.freeBoxisEditing__wiHm4CzmIj]: hasVariant(
                variants,
                "isEditing",
                "isEditing"
              ),
            })}
          >
            {(hasVariant(variants, "isBase", "isBase") ? true : true) ? (
              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text,
                  { [sty.textisBase]: hasVariant(variants, "isBase", "isBase") }
                )}
              >
                {"Base"}
              </div>
            ) : null}
          </div>
        ) : null}
      </div>

      {(
        hasVariant(variants, "isBase", "isBase") &&
        hasVariant(variants, "type", "segment")
          ? true
          : hasVariant(variants, "isBase", "isBase") &&
            hasVariant(variants, "type", "schedule")
          ? true
          : hasVariant(variants, "type", "schedule")
          ? true
          : true
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox___1K6WT, {
            [sty.freeBoxtype_schedule___1K6WTRdOsA]: hasVariant(
              variants,
              "type",
              "schedule"
            ),

            [sty.freeBoxtype_schedule_isBase___1K6WTRdOsAQDbUc]:
              hasVariant(variants, "isBase", "isBase") &&
              hasVariant(variants, "type", "schedule"),
            [sty.freeBoxtype_segment_isBase___1K6WTdRNoMQDbUc]:
              hasVariant(variants, "isBase", "isBase") &&
              hasVariant(variants, "type", "segment"),
          })}
        >
          {(hasVariant(variants, "type", "segment") ? true : true) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox___2KpDd, {
                [sty.freeBoxisBase___2KpDDqDbUc]: hasVariant(
                  variants,
                  "isBase",
                  "isBase"
                ),

                [sty.freeBoxtype_schedule___2KpDdRdOsA]: hasVariant(
                  variants,
                  "type",
                  "schedule"
                ),

                [sty.freeBoxtype_schedule_isBase___2KpDdRdOsAQDbUc]:
                  hasVariant(variants, "isBase", "isBase") &&
                  hasVariant(variants, "type", "schedule"),
                [sty.freeBoxtype_segment___2KpDDdRNoM]: hasVariant(
                  variants,
                  "type",
                  "segment"
                ),

                [sty.freeBoxtype_segment_isBase___2KpDDdRNoMQDbUc]:
                  hasVariant(variants, "isBase", "isBase") &&
                  hasVariant(variants, "type", "segment"),
              })}
            >
              <div
                data-plasmic-name={"distribution"}
                data-plasmic-override={overrides.distribution}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.distribution,
                  {
                    [sty.distributionisBase]: hasVariant(
                      variants,
                      "isBase",
                      "isBase"
                    ),

                    [sty.distributiontype_schedule]: hasVariant(
                      variants,
                      "type",
                      "schedule"
                    ),

                    [sty.distributiontype_segment]: hasVariant(
                      variants,
                      "type",
                      "segment"
                    ),
                  }
                )}
              >
                {hasVariant(variants, "type", "segment")
                  ? "Condition"
                  : hasVariant(variants, "type", "schedule")
                  ? "Date range"
                  : "Distribution"}
              </div>
            </div>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"control"}
              data-plasmic-override={overrides.control}
              hasGap={true}
              className={classNames(projectcss.all, sty.control, {
                [sty.controlisEditing]: hasVariant(
                  variants,
                  "isEditing",
                  "isEditing"
                ),

                [sty.controltype_schedule]: hasVariant(
                  variants,
                  "type",
                  "schedule"
                ),

                [sty.controltype_schedule_isBase]:
                  hasVariant(variants, "isBase", "isBase") &&
                  hasVariant(variants, "type", "schedule"),
                [sty.controltype_segment]: hasVariant(
                  variants,
                  "type",
                  "segment"
                ),

                [sty.controltype_segment_isBase]:
                  hasVariant(variants, "isBase", "isBase") &&
                  hasVariant(variants, "type", "segment"),
              })}
            >
              {(
                hasVariant(variants, "type", "segment")
                  ? true
                  : hasVariant(variants, "type", "schedule")
                  ? true
                  : true
              ) ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox__bPpzk, {
                    [sty.freeBoxtype_schedule__bPpzkRdOsA]: hasVariant(
                      variants,
                      "type",
                      "schedule"
                    ),

                    [sty.freeBoxtype_segment__bPpzKdRNoM]: hasVariant(
                      variants,
                      "type",
                      "segment"
                    ),
                  })}
                >
                  {(hasVariant(variants, "type", "schedule") ? true : true) ? (
                    <div
                      data-plasmic-name={"percentage"}
                      data-plasmic-override={overrides.percentage}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.percentage,
                        {
                          [sty.percentagetype_schedule]: hasVariant(
                            variants,
                            "type",
                            "schedule"
                          ),
                        }
                      )}
                    >
                      {"50%"}
                    </div>
                  ) : null}
                </div>
              ) : null}

              <p.Stack
                as={"div"}
                data-plasmic-name={"controlContainer"}
                data-plasmic-override={overrides.controlContainer}
                hasGap={true}
                className={classNames(projectcss.all, sty.controlContainer, {
                  [sty.controlContainertype_schedule]: hasVariant(
                    variants,
                    "type",
                    "schedule"
                  ),

                  [sty.controlContainertype_segment]: hasVariant(
                    variants,
                    "type",
                    "segment"
                  ),
                })}
              >
                {p.renderPlasmicSlot({
                  defaultContents: null,
                  value: args.controlContainer,
                })}
              </p.Stack>
            </p.Stack>
          ) : null}
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "variantName",
    "actionBtn",
    "svg",
    "text",
    "distribution",
    "control",
    "percentage",
    "controlContainer",
  ],

  variantName: ["variantName"],
  actionBtn: ["actionBtn", "svg"],
  svg: ["svg"],
  text: ["text"],
  distribution: ["distribution"],
  control: ["control", "percentage", "controlContainer"],
  percentage: ["percentage"],
  controlContainer: ["controlContainer"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  variantName: "div";
  actionBtn: typeof Button;
  svg: "svg";
  text: "div";
  distribution: "div";
  control: "div";
  percentage: "div";
  controlContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicExperimentPanelV2__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicExperimentPanelV2__VariantsArgs;
    args?: PlasmicExperimentPanelV2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicExperimentPanelV2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicExperimentPanelV2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicExperimentPanelV2__ArgProps,
      internalVariantPropNames: PlasmicExperimentPanelV2__VariantProps,
    });

    return PlasmicExperimentPanelV2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicExperimentPanelV2";
  } else {
    func.displayName = `PlasmicExperimentPanelV2.${nodeName}`;
  }
  return func;
}

export const PlasmicExperimentPanelV2 = Object.assign(
  // Top-level PlasmicExperimentPanelV2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    variantName: makeNodeComponent("variantName"),
    actionBtn: makeNodeComponent("actionBtn"),
    svg: makeNodeComponent("svg"),
    text: makeNodeComponent("text"),
    distribution: makeNodeComponent("distribution"),
    control: makeNodeComponent("control"),
    percentage: makeNodeComponent("percentage"),
    controlContainer: makeNodeComponent("controlContainer"),

    // Metadata about props expected for PlasmicExperimentPanelV2
    internalVariantProps: PlasmicExperimentPanelV2__VariantProps,
    internalArgProps: PlasmicExperimentPanelV2__ArgProps,
  }
);

export default PlasmicExperimentPanelV2;
/* prettier-ignore-end */
