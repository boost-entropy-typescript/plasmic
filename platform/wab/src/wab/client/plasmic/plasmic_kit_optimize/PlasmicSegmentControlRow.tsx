// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gtUDvxG6cmBbSzqLikNzoP
// Component: Y1jw4YXNEL
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import Textbox from "../../components/widgets/Textbox"; // plasmic-import: pA22NEzDCsn_/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import plasmic_plasmic_kit_q_4_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "./plasmic_plasmic_kit_optimize.module.css"; // plasmic-import: gtUDvxG6cmBbSzqLikNzoP/projectcss
import sty from "./PlasmicSegmentControlRow.module.css"; // plasmic-import: Y1jw4YXNEL/css

import SearchsvgIcon from "../q_4_icons/icons/PlasmicIcon__Searchsvg"; // plasmic-import: R5DLz11OA/icon
import ClosesvgIcon from "../q_4_icons/icons/PlasmicIcon__Closesvg"; // plasmic-import: DhvEHyCHT/icon

export type PlasmicSegmentControlRow__VariantMembers = {};

export type PlasmicSegmentControlRow__VariantsArgs = {};
type VariantPropType = keyof PlasmicSegmentControlRow__VariantsArgs;
export const PlasmicSegmentControlRow__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSegmentControlRow__ArgsType = {};
type ArgPropType = keyof PlasmicSegmentControlRow__ArgsType;
export const PlasmicSegmentControlRow__ArgProps = new Array<ArgPropType>();

export type PlasmicSegmentControlRow__OverridesType = {
  root?: p.Flex<"div">;
  variable?: p.Flex<typeof Textbox>;
  value?: p.Flex<typeof Textbox>;
};

export interface DefaultSegmentControlRowProps {
  className?: string;
}

function PlasmicSegmentControlRow__RenderFunc(props: {
  variants: PlasmicSegmentControlRow__VariantsArgs;
  args: PlasmicSegmentControlRow__ArgsType;
  overrides: PlasmicSegmentControlRow__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      <Textbox
        data-plasmic-name={"variable"}
        data-plasmic-override={overrides.variable}
        className={classNames("__wab_instance", sty.variable)}
        prefixIcon={
          <SearchsvgIcon
            className={classNames(projectcss.all, sty.svg__qdXcQ)}
            role={"img"}
          />
        }
        styleType={["bordered"]}
        suffixIcon={
          <ClosesvgIcon
            className={classNames(projectcss.all, sty.svg__gUqAn)}
            role={"img"}
          />
        }
      />

      <Textbox
        data-plasmic-name={"value"}
        data-plasmic-override={overrides.value}
        className={classNames("__wab_instance", sty.value)}
        prefixIcon={
          <SearchsvgIcon
            className={classNames(projectcss.all, sty.svg__bjLgU)}
            role={"img"}
          />
        }
        styleType={["bordered"]}
        suffixIcon={
          <ClosesvgIcon
            className={classNames(projectcss.all, sty.svg__hfxol)}
            role={"img"}
          />
        }
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "variable", "value"],
  variable: ["variable"],
  value: ["value"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  variable: typeof Textbox;
  value: typeof Textbox;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSegmentControlRow__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSegmentControlRow__VariantsArgs;
    args?: PlasmicSegmentControlRow__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSegmentControlRow__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSegmentControlRow__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSegmentControlRow__ArgProps,
      internalVariantPropNames: PlasmicSegmentControlRow__VariantProps,
    });

    return PlasmicSegmentControlRow__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSegmentControlRow";
  } else {
    func.displayName = `PlasmicSegmentControlRow.${nodeName}`;
  }
  return func;
}

export const PlasmicSegmentControlRow = Object.assign(
  // Top-level PlasmicSegmentControlRow renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    variable: makeNodeComponent("variable"),
    value: makeNodeComponent("value"),

    // Metadata about props expected for PlasmicSegmentControlRow
    internalVariantProps: PlasmicSegmentControlRow__VariantProps,
    internalArgProps: PlasmicSegmentControlRow__ArgProps,
  }
);

export default PlasmicSegmentControlRow;
/* prettier-ignore-end */
