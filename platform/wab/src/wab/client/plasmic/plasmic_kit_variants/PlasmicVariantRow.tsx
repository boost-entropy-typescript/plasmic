/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wT5BWZPEc2fYxyqbTLXMt2
// Component: ZAqVPmZmi-

import * as React from "react";

import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  Flex as Flex__,
  hasVariant,
  PlasmicIcon as PlasmicIcon__,
  renderPlasmicSlot,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  StrictProps,
  useDollarState,
  useTrigger,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import ListItem from "../../components/ListItem"; // plasmic-import: v31d9_ANqk/component
import Indicator from "../../components/style-controls/Indicator"; // plasmic-import: KRNHR6lpj1/component
import VariantPinButton from "../../components/variants/VariantPinButton"; // plasmic-import: iPC_skyaMh/component
import IconButton from "../../components/widgets/IconButton"; // plasmic-import: LPry-TF4j22a/component
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: wT5BWZPEc2fYxyqbTLXMt2/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_plasmic_kit_variants.module.css"; // plasmic-import: wT5BWZPEc2fYxyqbTLXMt2/projectcss
import sty from "./PlasmicVariantRow.module.css"; // plasmic-import: ZAqVPmZmi-/css

import CodeIcon from "../plasmic_kit/PlasmicIcon__Code"; // plasmic-import: sVrc1aLRLGQtV/icon
import Recording2Icon from "../plasmic_kit/PlasmicIcon__Recording2"; // plasmic-import: S1b6HroavEOOP/icon
import BaseSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__BaseSvg"; // plasmic-import: qA39vYT23/icon
import ChevronDownSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon
import CloseSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__CloseSvg"; // plasmic-import: DhvEHyCHT/icon
import PlusCircleSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__PlusCircleSvg"; // plasmic-import: tPPI666-2/icon
import SplitSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__SplitSvg"; // plasmic-import: FZ02NbJQSMul/icon

createPlasmicElementProxy;

export type PlasmicVariantRow__VariantMembers = {
  type: "baseVariant" | "splitVariant" | "toggle";
  pinState: "pinnedTrue" | "selected" | "pinnedFalse" | "evaluatedTrue";
  isIndicated: "isIndicated";
  showAdditionalRow: "showAdditionalRow";
  hasCodeExpression: "hasCodeExpression";
  isReadOnly: "isReadOnly";
};
export type PlasmicVariantRow__VariantsArgs = {
  type?: SingleChoiceArg<"baseVariant" | "splitVariant" | "toggle">;
  pinState?: SingleChoiceArg<
    "pinnedTrue" | "selected" | "pinnedFalse" | "evaluatedTrue"
  >;
  isIndicated?: SingleBooleanChoiceArg<"isIndicated">;
  showAdditionalRow?: SingleBooleanChoiceArg<"showAdditionalRow">;
  hasCodeExpression?: SingleBooleanChoiceArg<"hasCodeExpression">;
  isReadOnly?: SingleBooleanChoiceArg<"isReadOnly">;
};
type VariantPropType = keyof PlasmicVariantRow__VariantsArgs;
export const PlasmicVariantRow__VariantProps = new Array<VariantPropType>(
  "type",
  "pinState",
  "isIndicated",
  "showAdditionalRow",
  "hasCodeExpression",
  "isReadOnly"
);

export type PlasmicVariantRow__ArgsType = {
  children?: React.ReactNode;
  additional?: React.ReactNode;
};
type ArgPropType = keyof PlasmicVariantRow__ArgsType;
export const PlasmicVariantRow__ArgProps = new Array<ArgPropType>(
  "children",
  "additional"
);

export type PlasmicVariantRow__OverridesType = {
  root?: Flex__<"div">;
  listItem?: Flex__<typeof ListItem>;
  icon?: Flex__<"svg">;
  recordButton?: Flex__<typeof IconButton>;
  variantPinButton?: Flex__<typeof VariantPinButton>;
  exprButton?: Flex__<typeof IconButton>;
  indicator?: Flex__<typeof Indicator>;
};

export interface DefaultVariantRowProps {
  children?: React.ReactNode;
  additional?: React.ReactNode;
  type?: SingleChoiceArg<"baseVariant" | "splitVariant" | "toggle">;
  pinState?: SingleChoiceArg<
    "pinnedTrue" | "selected" | "pinnedFalse" | "evaluatedTrue"
  >;
  isIndicated?: SingleBooleanChoiceArg<"isIndicated">;
  showAdditionalRow?: SingleBooleanChoiceArg<"showAdditionalRow">;
  hasCodeExpression?: SingleBooleanChoiceArg<"hasCodeExpression">;
  isReadOnly?: SingleBooleanChoiceArg<"isReadOnly">;
  className?: string;
}

const $$ = {};

function PlasmicVariantRow__RenderFunc(props: {
  variants: PlasmicVariantRow__VariantsArgs;
  args: PlasmicVariantRow__ArgsType;
  overrides: PlasmicVariantRow__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "type",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.type,
      },
      {
        path: "pinState",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.pinState,
      },
      {
        path: "isIndicated",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isIndicated,
      },
      {
        path: "showAdditionalRow",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.showAdditionalRow,
      },
      {
        path: "hasCodeExpression",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.hasCodeExpression,
      },
      {
        path: "isReadOnly",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isReadOnly,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover,
  };

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        {
          [sty.rootisIndicated]: hasVariant(
            $state,
            "isIndicated",
            "isIndicated"
          ),
          [sty.rootisReadOnly]: hasVariant($state, "isReadOnly", "isReadOnly"),
          [sty.rootpinState_pinnedTrue_isReadOnly]:
            hasVariant($state, "isReadOnly", "isReadOnly") &&
            hasVariant($state, "pinState", "pinnedTrue"),
          [sty.rootpinState_selected]: hasVariant(
            $state,
            "pinState",
            "selected"
          ),
          [sty.rootpinState_selected_isReadOnly]:
            hasVariant($state, "isReadOnly", "isReadOnly") &&
            hasVariant($state, "pinState", "selected"),
          [sty.rootpinState_selected_type_baseVariant]:
            hasVariant($state, "pinState", "selected") &&
            hasVariant($state, "type", "baseVariant"),
          [sty.rootshowAdditionalRow]: hasVariant(
            $state,
            "showAdditionalRow",
            "showAdditionalRow"
          ),
          [sty.roottype_baseVariant]: hasVariant($state, "type", "baseVariant"),
          [sty.roottype_toggle]: hasVariant($state, "type", "toggle"),
        }
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <ListItem
        data-plasmic-name={"listItem"}
        data-plasmic-override={overrides.listItem}
        actions={
          <div
            className={classNames(projectcss.all, sty.freeBox__t0Gv2, {
              [sty.freeBoxisReadOnly__t0Gv2Iu48P]: hasVariant(
                $state,
                "isReadOnly",
                "isReadOnly"
              ),
              [sty.freeBoxpinState_pinnedTrue__t0Gv2AyG15]: hasVariant(
                $state,
                "pinState",
                "pinnedTrue"
              ),
              [sty.freeBoxpinState_selected__t0Gv2Eu6Km]: hasVariant(
                $state,
                "pinState",
                "selected"
              ),
            })}
          >
            {(
              hasVariant($state, "isReadOnly", "isReadOnly") &&
              triggers.hover_root
                ? true
                : triggers.hover_root
                ? true
                : hasVariant($state, "pinState", "selected")
                ? true
                : false
            ) ? (
              <IconButton
                data-plasmic-name={"recordButton"}
                data-plasmic-override={overrides.recordButton}
                children2={
                  <ChevronDownSvgIcon
                    className={classNames(projectcss.all, sty.svg__wxygf)}
                    role={"img"}
                  />
                }
                className={classNames("__wab_instance")}
                size={"small"}
              >
                <PlasmicIcon__
                  PlasmicIconType={
                    triggers.hover_root &&
                    hasVariant($state, "pinState", "selected")
                      ? CloseSvgIcon
                      : hasVariant($state, "pinState", "selected")
                      ? Recording2Icon
                      : PlusCircleSvgIcon
                  }
                  className={classNames(projectcss.all, sty.svg__fzeqg, {
                    [sty.svgisIndicated__fzeqg7Jjf7]: hasVariant(
                      $state,
                      "isIndicated",
                      "isIndicated"
                    ),
                    [sty.svgpinState_selected__fzeqgEu6Km]: hasVariant(
                      $state,
                      "pinState",
                      "selected"
                    ),
                    [sty.svgtype_baseVariant__fzeqgvuhwH]: hasVariant(
                      $state,
                      "type",
                      "baseVariant"
                    ),
                  })}
                  role={"img"}
                />
              </IconButton>
            ) : null}
            {(
              triggers.hover_root
                ? true
                : hasVariant($state, "pinState", "evaluatedTrue")
                ? true
                : hasVariant($state, "pinState", "pinnedFalse")
                ? true
                : hasVariant($state, "pinState", "selected")
                ? true
                : hasVariant($state, "pinState", "pinnedTrue")
                ? true
                : false
            ) ? (
              <VariantPinButton
                data-plasmic-name={"variantPinButton"}
                data-plasmic-override={overrides.variantPinButton}
                className={classNames("__wab_instance", sty.variantPinButton, {
                  [sty.variantPinButtonisReadOnly]: hasVariant(
                    $state,
                    "isReadOnly",
                    "isReadOnly"
                  ),
                  [sty.variantPinButtonpinState_evaluatedTrue]: hasVariant(
                    $state,
                    "pinState",
                    "evaluatedTrue"
                  ),
                  [sty.variantPinButtonpinState_pinnedFalse]: hasVariant(
                    $state,
                    "pinState",
                    "pinnedFalse"
                  ),
                  [sty.variantPinButtonpinState_pinnedTrue]: hasVariant(
                    $state,
                    "pinState",
                    "pinnedTrue"
                  ),
                  [sty.variantPinButtonpinState_selected]: hasVariant(
                    $state,
                    "pinState",
                    "selected"
                  ),
                  [sty.variantPinButtonpinState_selected_isReadOnly]:
                    hasVariant($state, "isReadOnly", "isReadOnly") &&
                    hasVariant($state, "pinState", "selected"),
                })}
                pinState={
                  hasVariant($state, "pinState", "evaluatedTrue")
                    ? "evaluatedTrue"
                    : hasVariant($state, "pinState", "pinnedFalse")
                    ? "pinnedFalse"
                    : hasVariant($state, "pinState", "selected")
                    ? "selected"
                    : hasVariant($state, "pinState", "pinnedTrue")
                    ? "pinnedTrue"
                    : undefined
                }
              />
            ) : null}
            <IconButton
              data-plasmic-name={"exprButton"}
              data-plasmic-override={overrides.exprButton}
              className={classNames("__wab_instance", sty.exprButton, {
                [sty.exprButtonhasCodeExpression]: hasVariant(
                  $state,
                  "hasCodeExpression",
                  "hasCodeExpression"
                ),
              })}
              isActive={true}
              size={"small"}
              type={["seamless"]}
            >
              <CodeIcon
                className={classNames(projectcss.all, sty.svg__hMptI)}
                role={"img"}
              />
            </IconButton>
          </div>
        }
        additional={renderPlasmicSlot({
          defaultContents: null,
          value: args.additional,
        })}
        className={classNames("__wab_instance", sty.listItem, {
          [sty.listItemisIndicated]: hasVariant(
            $state,
            "isIndicated",
            "isIndicated"
          ),
          [sty.listItemisReadOnly]: hasVariant(
            $state,
            "isReadOnly",
            "isReadOnly"
          ),
          [sty.listItempinState_evaluatedTrue]: hasVariant(
            $state,
            "pinState",
            "evaluatedTrue"
          ),
          [sty.listItempinState_pinnedFalse]: hasVariant(
            $state,
            "pinState",
            "pinnedFalse"
          ),
          [sty.listItempinState_pinnedTrue]: hasVariant(
            $state,
            "pinState",
            "pinnedTrue"
          ),
          [sty.listItempinState_pinnedTrue_isReadOnly]:
            hasVariant($state, "isReadOnly", "isReadOnly") &&
            hasVariant($state, "pinState", "pinnedTrue"),
          [sty.listItempinState_selected]: hasVariant(
            $state,
            "pinState",
            "selected"
          ),
          [sty.listItempinState_selected_type_baseVariant]:
            hasVariant($state, "type", "baseVariant") &&
            hasVariant($state, "pinState", "selected"),
          [sty.listItemshowAdditionalRow]: hasVariant(
            $state,
            "showAdditionalRow",
            "showAdditionalRow"
          ),
          [sty.listItemtype_baseVariant]: hasVariant(
            $state,
            "type",
            "baseVariant"
          ),
          [sty.listItemtype_toggle]: hasVariant($state, "type", "toggle"),
        })}
        color={
          hasVariant($state, "type", "baseVariant") ? undefined : "variant"
        }
        hasMenu={hasVariant($state, "type", "baseVariant") ? undefined : true}
        hideIcon={
          hasVariant($state, "type", "toggle")
            ? undefined
            : hasVariant($state, "type", "baseVariant")
            ? undefined
            : undefined
        }
        icon={
          <div
            className={classNames(projectcss.all, sty.freeBox__qnsp, {
              [sty.freeBoxpinState_pinnedTrue__qnspAyG15]: hasVariant(
                $state,
                "pinState",
                "pinnedTrue"
              ),
              [sty.freeBoxtype_baseVariant__qnspVuhwH]: hasVariant(
                $state,
                "type",
                "baseVariant"
              ),
              [sty.freeBoxtype_splitVariant__qnsp3UUn]: hasVariant(
                $state,
                "type",
                "splitVariant"
              ),
              [sty.freeBoxtype_toggle__qnspNLw14]: hasVariant(
                $state,
                "type",
                "toggle"
              ),
            })}
          >
            <PlasmicIcon__
              data-plasmic-name={"icon"}
              data-plasmic-override={overrides.icon}
              PlasmicIconType={
                hasVariant($state, "type", "splitVariant")
                  ? SplitSvgIcon
                  : BaseSvgIcon
              }
              className={classNames(projectcss.all, sty.icon, {
                [sty.icontype_splitVariant]: hasVariant(
                  $state,
                  "type",
                  "splitVariant"
                ),
              })}
              role={"img"}
            />
          </div>
        }
        isSelected={
          hasVariant($state, "pinState", "selected") ? true : undefined
        }
        showActions={
          hasVariant($state, "type", "baseVariant") ? undefined : true
        }
        showAdditionalRow={
          hasVariant($state, "showAdditionalRow", "showAdditionalRow")
            ? true
            : undefined
        }
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__vSe8B, {
            [sty.freeBoxhasCodeExpression__vSe8BezONc]: hasVariant(
              $state,
              "hasCodeExpression",
              "hasCodeExpression"
            ),
            [sty.freeBoxpinState_selected__vSe8BEu6Km]: hasVariant(
              $state,
              "pinState",
              "selected"
            ),
            [sty.freeBoxtype_baseVariant__vSe8BvuhwH]: hasVariant(
              $state,
              "type",
              "baseVariant"
            ),
            [sty.freeBoxtype_toggle__vSe8BnLw14]: hasVariant(
              $state,
              "type",
              "toggle"
            ),
          })}
        >
          {renderPlasmicSlot({
            defaultContents: "Something",
            value: args.children,
            className: classNames(sty.slotTargetChildren, {
              [sty.slotTargetChildrenhasCodeExpression]: hasVariant(
                $state,
                "hasCodeExpression",
                "hasCodeExpression"
              ),
              [sty.slotTargetChildrenpinState_pinnedTrue]: hasVariant(
                $state,
                "pinState",
                "pinnedTrue"
              ),
              [sty.slotTargetChildrenpinState_selected]: hasVariant(
                $state,
                "pinState",
                "selected"
              ),
              [sty.slotTargetChildrentype_baseVariant]: hasVariant(
                $state,
                "type",
                "baseVariant"
              ),
              [sty.slotTargetChildrentype_toggle]: hasVariant(
                $state,
                "type",
                "toggle"
              ),
            }),
          })}
        </div>
      </ListItem>
      {(hasVariant($state, "isIndicated", "isIndicated") ? true : false) ? (
        <Indicator
          data-plasmic-name={"indicator"}
          data-plasmic-override={overrides.indicator}
          className={classNames("__wab_instance", sty.indicator, {
            [sty.indicatorisIndicated]: hasVariant(
              $state,
              "isIndicated",
              "isIndicated"
            ),
            [sty.indicatorpinState_selected]: hasVariant(
              $state,
              "pinState",
              "selected"
            ),
            [sty.indicatorpinState_selected_type_baseVariant]:
              hasVariant($state, "type", "baseVariant") &&
              hasVariant($state, "pinState", "selected"),
            [sty.indicatorshowAdditionalRow]: hasVariant(
              $state,
              "showAdditionalRow",
              "showAdditionalRow"
            ),
            [sty.indicatortype_baseVariant]: hasVariant(
              $state,
              "type",
              "baseVariant"
            ),
            [sty.indicatortype_toggle]: hasVariant($state, "type", "toggle"),
          })}
        />
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "listItem",
    "icon",
    "recordButton",
    "variantPinButton",
    "exprButton",
    "indicator",
  ],
  listItem: [
    "listItem",
    "icon",
    "recordButton",
    "variantPinButton",
    "exprButton",
  ],
  icon: ["icon"],
  recordButton: ["recordButton"],
  variantPinButton: ["variantPinButton"],
  exprButton: ["exprButton"],
  indicator: ["indicator"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  listItem: typeof ListItem;
  icon: "svg";
  recordButton: typeof IconButton;
  variantPinButton: typeof VariantPinButton;
  exprButton: typeof IconButton;
  indicator: typeof Indicator;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicVariantRow__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicVariantRow__VariantsArgs;
    args?: PlasmicVariantRow__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & // Specify variants directly as props
  Omit<PlasmicVariantRow__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicVariantRow__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicVariantRow__ArgProps,
          internalVariantPropNames: PlasmicVariantRow__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicVariantRow__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicVariantRow";
  } else {
    func.displayName = `PlasmicVariantRow.${nodeName}`;
  }
  return func;
}

export const PlasmicVariantRow = Object.assign(
  // Top-level PlasmicVariantRow renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    listItem: makeNodeComponent("listItem"),
    icon: makeNodeComponent("icon"),
    recordButton: makeNodeComponent("recordButton"),
    variantPinButton: makeNodeComponent("variantPinButton"),
    exprButton: makeNodeComponent("exprButton"),
    indicator: makeNodeComponent("indicator"),

    // Metadata about props expected for PlasmicVariantRow
    internalVariantProps: PlasmicVariantRow__VariantProps,
    internalArgProps: PlasmicVariantRow__ArgProps,
  }
);

export default PlasmicVariantRow;
/* prettier-ignore-end */
