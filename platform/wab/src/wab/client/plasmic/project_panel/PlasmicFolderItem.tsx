// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: m8VxGcigeLAEXFe8c12w5Q
// Component: iWeSjEMdI3

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName,
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions,
} from "@plasmicapp/react-web/lib/host";

import ListItem from "../../components/ListItem"; // plasmic-import: v31d9_ANqk/component
import IconButton from "../../components/widgets/IconButton"; // plasmic-import: LPry-TF4j22a/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "./plasmic_project_panel.module.css"; // plasmic-import: m8VxGcigeLAEXFe8c12w5Q/projectcss
import sty from "./PlasmicFolderItem.module.css"; // plasmic-import: iWeSjEMdI3/css

import ChevronDownsvgIcon from "../q_4_icons/icons/PlasmicIcon__ChevronDownsvg"; // plasmic-import: xZrB9_0ir/icon
import ChevronRightsvgIcon from "../q_4_icons/icons/PlasmicIcon__ChevronRightsvg"; // plasmic-import: HBGx-zeiX/icon
import ComponentsvgIcon from "../plasmic_kit_q_4_icons/icons/PlasmicIcon__Componentsvg"; // plasmic-import: vJVrKlrDD/icon
import File2SvgIcon from "../q_4_icons/icons/PlasmicIcon__File2Svg"; // plasmic-import: zldfLXBdc/icon
import GridMasonrysvgIcon from "../q_4_icons/icons/PlasmicIcon__GridMasonrysvg"; // plasmic-import: f5dXpZvP5/icon
import FoldersvgIcon from "../q_4_icons/icons/PlasmicIcon__Foldersvg"; // plasmic-import: zvkxMkUIX/icon
import FolderIcon from "../plasmic_kit_design_system/icons/PlasmicIcon__Folder"; // plasmic-import: hRo7v6cqW6/icon
import GitBranchsvgIcon from "../q_4_icons/icons/PlasmicIcon__GitBranchsvg"; // plasmic-import: 4OBJfCUZH/icon
import GearIcon from "../plasmic_kit/PlasmicIcon__Gear"; // plasmic-import: ZmVZmXEc9f_SR/icon

createPlasmicElementProxy;

export type PlasmicFolderItem__VariantMembers = {
  type:
    | "page"
    | "component"
    | "arena"
    | "folderopen"
    | "folderclosed"
    | "branch";
  selected: "selected";
  nested: "nested";
};
export type PlasmicFolderItem__VariantsArgs = {
  type?: SingleChoiceArg<
    "page" | "component" | "arena" | "folderopen" | "folderclosed" | "branch"
  >;
  selected?: SingleBooleanChoiceArg<"selected">;
  nested?: SingleBooleanChoiceArg<"nested">;
};
type VariantPropType = keyof PlasmicFolderItem__VariantsArgs;
export const PlasmicFolderItem__VariantProps = new Array<VariantPropType>(
  "type",
  "selected",
  "nested"
);

export type PlasmicFolderItem__ArgsType = {
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicFolderItem__ArgsType;
export const PlasmicFolderItem__ArgProps = new Array<ArgPropType>("children");

export type PlasmicFolderItem__OverridesType = {
  root?: Flex__<"div">;
  listItem?: Flex__<typeof ListItem>;
  iconButton?: Flex__<typeof IconButton>;
};

export interface DefaultFolderItemProps {
  children?: React.ReactNode;
  type?: SingleChoiceArg<
    "page" | "component" | "arena" | "folderopen" | "folderclosed" | "branch"
  >;
  selected?: SingleBooleanChoiceArg<"selected">;
  nested?: SingleBooleanChoiceArg<"nested">;
  className?: string;
}

const $$ = {};

function PlasmicFolderItem__RenderFunc(props: {
  variants: PlasmicFolderItem__VariantsArgs;
  args: PlasmicFolderItem__ArgsType;
  overrides: PlasmicFolderItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "type",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.type,
      },
      {
        path: "selected",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.selected,
      },
      {
        path: "nested",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.nested,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootnested]: hasVariant($state, "nested", "nested"),
          [sty.rootselected]: hasVariant($state, "selected", "selected"),
          [sty.roottype_arena]: hasVariant($state, "type", "arena"),
          [sty.roottype_component]: hasVariant($state, "type", "component"),
          [sty.roottype_folderclosed]: hasVariant(
            $state,
            "type",
            "folderclosed"
          ),
          [sty.roottype_folderopen]: hasVariant($state, "type", "folderopen"),
          [sty.roottype_page]: hasVariant($state, "type", "page"),
        }
      )}
    >
      <ListItem
        data-plasmic-name={"listItem"}
        data-plasmic-override={overrides.listItem}
        actions={
          <IconButton
            data-plasmic-name={"iconButton"}
            data-plasmic-override={overrides.iconButton}
            children2={
              <ChevronDownsvgIcon
                className={classNames(projectcss.all, sty.svg__i2ZUu)}
                role={"img"}
              />
            }
            className={classNames("__wab_instance", sty.iconButton)}
          >
            <GearIcon
              className={classNames(projectcss.all, sty.svg__icCsQ)}
              role={"img"}
            />
          </IconButton>
        }
        addendum={"Blahblah"}
        className={classNames("__wab_instance", sty.listItem, {
          [sty.listItemnested]: hasVariant($state, "nested", "nested"),
          [sty.listItemselected]: hasVariant($state, "selected", "selected"),
          [sty.listItemtype_branch]: hasVariant($state, "type", "branch"),
          [sty.listItemtype_folderclosed]: hasVariant(
            $state,
            "type",
            "folderclosed"
          ),
          [sty.listItemtype_page]: hasVariant($state, "type", "page"),
        })}
        icon={
          <React.Fragment>
            {(hasVariant($state, "type", "folderopen") ? true : false) ? (
              <ChevronDownsvgIcon
                className={classNames(projectcss.all, sty.svg__q8HG, {
                  [sty.svgselected__q8HGz29Uf]: hasVariant(
                    $state,
                    "selected",
                    "selected"
                  ),
                  [sty.svgtype_folderopen__q8HG7YhjV]: hasVariant(
                    $state,
                    "type",
                    "folderopen"
                  ),
                })}
                role={"img"}
              />
            ) : null}
            {(hasVariant($state, "type", "folderclosed") ? true : false) ? (
              <ChevronRightsvgIcon
                className={classNames(projectcss.all, sty.svg__g3Nlv, {
                  [sty.svgtype_folderclosed__g3Nlv1OX]: hasVariant(
                    $state,
                    "type",
                    "folderclosed"
                  ),
                  [sty.svgtype_folderopen__g3Nlv7YhjV]: hasVariant(
                    $state,
                    "type",
                    "folderopen"
                  ),
                })}
                role={"img"}
              />
            ) : null}
            <PlasmicIcon__
              PlasmicIconType={
                hasVariant($state, "type", "branch")
                  ? GitBranchsvgIcon
                  : hasVariant($state, "type", "folderclosed")
                  ? FolderIcon
                  : hasVariant($state, "type", "folderopen")
                  ? FoldersvgIcon
                  : hasVariant($state, "type", "arena")
                  ? GridMasonrysvgIcon
                  : hasVariant($state, "type", "page")
                  ? File2SvgIcon
                  : ComponentsvgIcon
              }
              className={classNames(projectcss.all, sty.svg__yn2Mk, {
                [sty.svgselected__yn2MkZ29Uf]: hasVariant(
                  $state,
                  "selected",
                  "selected"
                ),
                [sty.svgtype_arena__yn2Mk2ZahM]: hasVariant(
                  $state,
                  "type",
                  "arena"
                ),
                [sty.svgtype_branch__yn2Mk5W9WS]: hasVariant(
                  $state,
                  "type",
                  "branch"
                ),
                [sty.svgtype_component__yn2MkRp7Wc]: hasVariant(
                  $state,
                  "type",
                  "component"
                ),
                [sty.svgtype_folderclosed__yn2Mk1OX]: hasVariant(
                  $state,
                  "type",
                  "folderclosed"
                ),
                [sty.svgtype_folderopen__yn2Mk7YhjV]: hasVariant(
                  $state,
                  "type",
                  "folderopen"
                ),
                [sty.svgtype_page__yn2MkAFmgq]: hasVariant(
                  $state,
                  "type",
                  "page"
                ),
              })}
              role={"img"}
            />
          </React.Fragment>
        }
        isSelected={
          hasVariant($state, "selected", "selected") ? true : undefined
        }
      >
        {renderPlasmicSlot({
          defaultContents: "Item name",
          value: args.children,
        })}
      </ListItem>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "listItem", "iconButton"],
  listItem: ["listItem", "iconButton"],
  iconButton: ["iconButton"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  listItem: typeof ListItem;
  iconButton: typeof IconButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFolderItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFolderItem__VariantsArgs;
    args?: PlasmicFolderItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFolderItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFolderItem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFolderItem__ArgProps,
          internalVariantPropNames: PlasmicFolderItem__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicFolderItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFolderItem";
  } else {
    func.displayName = `PlasmicFolderItem.${nodeName}`;
  }
  return func;
}

export const PlasmicFolderItem = Object.assign(
  // Top-level PlasmicFolderItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    listItem: makeNodeComponent("listItem"),
    iconButton: makeNodeComponent("iconButton"),

    // Metadata about props expected for PlasmicFolderItem
    internalVariantProps: PlasmicFolderItem__VariantProps,
    internalArgProps: PlasmicFolderItem__ArgProps,
  }
);

export default PlasmicFolderItem;
/* prettier-ignore-end */
