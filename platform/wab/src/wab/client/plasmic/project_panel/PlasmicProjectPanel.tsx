// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: m8VxGcigeLAEXFe8c12w5Q
// Component: Kyrn_lAAwr
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import SearchInput from "../../components/sidebar-tabs/ProjectPanel/SearchInput"; // plasmic-import: CHoUJxFMpo/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component
import FolderItem from "../../components/sidebar-tabs/ProjectPanel/FolderItem"; // plasmic-import: iWeSjEMdI3/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "./plasmic_project_panel.module.css"; // plasmic-import: m8VxGcigeLAEXFe8c12w5Q/projectcss
import sty from "./PlasmicProjectPanel.module.css"; // plasmic-import: Kyrn_lAAwr/css

import ChevronDownsvgIcon from "../q_4_icons/icons/PlasmicIcon__ChevronDownsvg"; // plasmic-import: xZrB9_0ir/icon
import PlussvgIcon from "../q_4_icons/icons/PlasmicIcon__Plussvg"; // plasmic-import: sQKgd2GNr/icon

export type PlasmicProjectPanel__VariantMembers = {
  noHeader: "noHeader";
  extraBottomPadding: "extraBottomPadding";
};

export type PlasmicProjectPanel__VariantsArgs = {
  noHeader?: SingleBooleanChoiceArg<"noHeader">;
  extraBottomPadding?: SingleBooleanChoiceArg<"extraBottomPadding">;
};

type VariantPropType = keyof PlasmicProjectPanel__VariantsArgs;
export const PlasmicProjectPanel__VariantProps = new Array<VariantPropType>(
  "noHeader",
  "extraBottomPadding"
);

export type PlasmicProjectPanel__ArgsType = {
  children?: React.ReactNode;
  filterLabel?: React.ReactNode;
};

type ArgPropType = keyof PlasmicProjectPanel__ArgsType;
export const PlasmicProjectPanel__ArgProps = new Array<ArgPropType>(
  "children",
  "filterLabel"
);

export type PlasmicProjectPanel__OverridesType = {
  root?: p.Flex<"div">;
  headerFilter?: p.Flex<"div">;
  searchInput?: p.Flex<typeof SearchInput>;
  plusButtonContainer?: p.Flex<"div">;
  plusButton?: p.Flex<typeof Button>;
};

export interface DefaultProjectPanelProps {
  children?: React.ReactNode;
  filterLabel?: React.ReactNode;
  noHeader?: SingleBooleanChoiceArg<"noHeader">;
  extraBottomPadding?: SingleBooleanChoiceArg<"extraBottomPadding">;
  className?: string;
}

function PlasmicProjectPanel__RenderFunc(props: {
  variants: PlasmicProjectPanel__VariantsArgs;
  args: PlasmicProjectPanel__ArgsType;
  overrides: PlasmicProjectPanel__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),

    [props.args]
  );

  const $props = args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        { [sty.rootnoHeader]: hasVariant(variants, "noHeader", "noHeader") }
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__qEfvh, {
          [sty.freeBoxextraBottomPadding__qEfvhWJeF0]: hasVariant(
            variants,
            "extraBottomPadding",
            "extraBottomPadding"
          ),

          [sty.freeBoxnoHeader__qEfvhPzmjS]: hasVariant(
            variants,
            "noHeader",
            "noHeader"
          ),
        })}
      >
        {(hasVariant(variants, "noHeader", "noHeader") ? false : true) ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"headerFilter"}
            data-plasmic-override={overrides.headerFilter}
            hasGap={true}
            className={classNames(projectcss.all, sty.headerFilter, {
              [sty.headerFilternoHeader]: hasVariant(
                variants,
                "noHeader",
                "noHeader"
              ),
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___20BCn
                  )}
                >
                  {"Everything"}
                </div>
              ),

              value: args.filterLabel,
              className: classNames(sty.slotTargetFilterLabel),
            })}

            {(hasVariant(variants, "noHeader", "noHeader") ? true : true) ? (
              <ChevronDownsvgIcon
                className={classNames(projectcss.all, sty.svg__bVg17, {
                  [sty.svgextraBottomPadding__bVg17WJeF0]: hasVariant(
                    variants,
                    "extraBottomPadding",
                    "extraBottomPadding"
                  ),

                  [sty.svgnoHeader__bVg17PzmjS]: hasVariant(
                    variants,
                    "noHeader",
                    "noHeader"
                  ),
                })}
                role={"img"}
              />
            ) : null}
          </p.Stack>
        ) : null}

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___15Gjd, {
            [sty.freeBoxnoHeader___15GjdPzmjS]: hasVariant(
              variants,
              "noHeader",
              "noHeader"
            ),
          })}
        >
          <SearchInput
            data-plasmic-name={"searchInput"}
            data-plasmic-override={overrides.searchInput}
            className={classNames("__wab_instance", sty.searchInput, {
              [sty.searchInputnoHeader]: hasVariant(
                variants,
                "noHeader",
                "noHeader"
              ),
            })}
          />

          <div
            data-plasmic-name={"plusButtonContainer"}
            data-plasmic-override={overrides.plusButtonContainer}
            className={classNames(projectcss.all, sty.plusButtonContainer, {
              [sty.plusButtonContainernoHeader]: hasVariant(
                variants,
                "noHeader",
                "noHeader"
              ),
            })}
          >
            <Button
              data-plasmic-name={"plusButton"}
              data-plasmic-override={overrides.plusButton}
              className={classNames("__wab_instance", sty.plusButton)}
              startIcon={
                <PlussvgIcon
                  className={classNames(projectcss.all, sty.svg___8QOoj)}
                  role={"img"}
                />
              }
              type={["secondary"]}
              withIcons={["startIcon", "endIcon"]}
            >
              {"New"}
            </Button>
          </div>
        </p.Stack>
      </p.Stack>

      <div className={classNames(projectcss.all, sty.freeBox__n0S7B)}>
        {p.renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <FolderItem
                className={classNames("__wab_instance", sty.folderItem__sAaJb)}
                type={"folderopen" as const}
              >
                {"Folder"}
              </FolderItem>

              <FolderItem
                className={classNames("__wab_instance", sty.folderItem__b8A7C)}
                nested={true}
                type={"arena" as const}
              >
                {"Arena"}
              </FolderItem>

              <FolderItem
                className={classNames("__wab_instance", sty.folderItem__zdPd5)}
                type={"arena" as const}
              >
                {"Arena"}
              </FolderItem>

              <FolderItem
                className={classNames("__wab_instance", sty.folderItem__aLare)}
              >
                {"Component"}
              </FolderItem>

              <FolderItem
                className={classNames("__wab_instance", sty.folderItem__xH8O)}
                isSelected={true}
                type={"page" as const}
              >
                {"Page"}
              </FolderItem>
            </React.Fragment>
          ),

          value: args.children,
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerFilter",
    "searchInput",
    "plusButtonContainer",
    "plusButton",
  ],

  headerFilter: ["headerFilter"],
  searchInput: ["searchInput"],
  plusButtonContainer: ["plusButtonContainer", "plusButton"],
  plusButton: ["plusButton"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerFilter: "div";
  searchInput: typeof SearchInput;
  plusButtonContainer: "div";
  plusButton: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProjectPanel__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicProjectPanel__VariantsArgs;
  args?: PlasmicProjectPanel__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicProjectPanel__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicProjectPanel__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicProjectPanel__ArgProps,
          internalVariantPropNames: PlasmicProjectPanel__VariantProps,
        }),

      [props, nodeName]
    );

    return PlasmicProjectPanel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProjectPanel";
  } else {
    func.displayName = `PlasmicProjectPanel.${nodeName}`;
  }
  return func;
}

export const PlasmicProjectPanel = Object.assign(
  // Top-level PlasmicProjectPanel renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerFilter: makeNodeComponent("headerFilter"),
    searchInput: makeNodeComponent("searchInput"),
    plusButtonContainer: makeNodeComponent("plusButtonContainer"),
    plusButton: makeNodeComponent("plusButton"),

    // Metadata about props expected for PlasmicProjectPanel
    internalVariantProps: PlasmicProjectPanel__VariantProps,
    internalArgProps: PlasmicProjectPanel__ArgProps,
  }
);

export default PlasmicProjectPanel;
/* prettier-ignore-end */
