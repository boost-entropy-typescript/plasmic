// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`token overrides: codegen should codegen correct contents - css 1`] = `
"
--- Homepage.js ---
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import { PlasmicHomepage } from "./PlasmicHomepage"; // plasmic-import: lRapkLBf4Fhi/render
function Homepage_(props, ref) {
    // Use PlasmicHomepage to render this component as it was
    // designed in Plasmic, by activating the appropriate variants,
    // attaching the appropriate event handlers, etc.  You
    // can also install whatever React hooks you need here to manage state or
    // fetch data.
    //
    // Props you can pass into PlasmicHomepage are:
    // 1. Variants you want to activate,
    // 2. Contents for slots you want to fill,
    // 3. Overrides for any named node in the component to attach behavior and data,
    // 4. Props to set on the root node.
    //
    // By default, we are just piping all HomepageProps here, but feel free
    // to do whatever works for you.
    return React.createElement(PlasmicHomepage, __assign({ root: { ref: ref } }, props));
}
var Homepage = React.forwardRef(Homepage_);
export default Homepage;

--- Homepage.tsx ---

    // This is a skeleton starter React component generated by Plasmic.
    // This file is owned by you, feel free to edit as you see fit.
    import * as React from "react";
    import {PlasmicHomepage, DefaultHomepageProps} from "./PlasmicHomepage";  // plasmic-import: lRapkLBf4Fhi/render
    import {HTMLElementRefOf} from "@plasmicapp/react-web";

    

    

    // Your component props start with props for variants and slots you defined
    // in Plasmic, but you can add more here, like event handlers that you can
    // attach to named nodes in your component.
    //
    // If you don't want to expose certain variants or slots as a prop, you can use
    // Omit to hide them:
    //
    // interface HomepageProps extends Omit<DefaultHomepageProps, "hideProps1"|"hideProp2"> {
    //   // etc.
    // }
    //
    // You can also stop extending from DefaultHomepageProps altogether and have
    // total control over the props for your component.
    export interface HomepageProps extends DefaultHomepageProps {
    }

    
      function Homepage_(props: HomepageProps, ref: HTMLElementRefOf<"div">) {
        
    // Use PlasmicHomepage to render this component as it was
    // designed in Plasmic, by activating the appropriate variants,
    // attaching the appropriate event handlers, etc.  You
    // can also install whatever React hooks you need here to manage state or
    // fetch data.
    //
    // Props you can pass into PlasmicHomepage are:
    // 1. Variants you want to activate,
    // 2. Contents for slots you want to fill,
    // 3. Overrides for any named node in the component to attach behavior and data,
    // 4. Props to set on the root node.
    //
    // By default, we are just piping all HomepageProps here, but feel free
    // to do whatever works for you.
  
        return <PlasmicHomepage root={{ref}} {...props} />;
      }

      const Homepage = React.forwardRef(Homepage_);
      export default Homepage;
    
  
--- PlasmicGlobalVariant__Screen.js ---
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
import * as React from "react";
import { createUseScreenVariants } from "@plasmicapp/react-web";
export var ScreenContext = React.createContext("PLEASE_RENDER_INSIDE_PROVIDER");
export function ScreenContextProvider(props) {
    return (React.createElement(ScreenContext.Provider, { value: props.value }, props.children));
}
export var useScreenVariants = createUseScreenVariants(true, {
    "mobileOnly": "(min-width:0px) and (max-width:768px)"
});
export default ScreenContext;
/* prettier-ignore-end */

--- PlasmicGlobalVariant__Screen.tsx ---

    /* eslint-disable */
    /* tslint:disable */
    // @ts-nocheck
    /* prettier-ignore-start */

    

    import * as React from "react";
    import { createUseScreenVariants } from "@plasmicapp/react-web";

    export type ScreenValue = "mobileOnly";
    export const ScreenContext = React.createContext<ScreenValue[] | undefined>("PLEASE_RENDER_INSIDE_PROVIDER" as any);
    export function ScreenContextProvider(props: React.PropsWithChildren<{value: ScreenValue[] | undefined}>) {
      return (
        <ScreenContext.Provider value={props.value}>
          {props.children}
        </ScreenContext.Provider>
      );
    }
    
export const useScreenVariants = createUseScreenVariants(true,{
  "mobileOnly": "(min-width:0px) and (max-width:768px)"
});
    
    export default ScreenContext;
    /* prettier-ignore-end */
  
--- PlasmicGlobalVariant__Theme.js ---
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
import * as React from "react";
export var ThemeContext = React.createContext("PLEASE_RENDER_INSIDE_PROVIDER");
export function ThemeContextProvider(props) {
    return (React.createElement(ThemeContext.Provider, { value: props.value }, props.children));
}
export function useTheme() {
    return React.useContext(ThemeContext);
}
export default ThemeContext;
/* prettier-ignore-end */

--- PlasmicGlobalVariant__Theme.tsx ---

    /* eslint-disable */
    /* tslint:disable */
    // @ts-nocheck
    /* prettier-ignore-start */

    

    import * as React from "react";
    import { createUseScreenVariants } from "@plasmicapp/react-web";

    export type ThemeValue = "dark";
    export const ThemeContext = React.createContext<ThemeValue | undefined>("PLEASE_RENDER_INSIDE_PROVIDER" as any);
    export function ThemeContextProvider(props: React.PropsWithChildren<{value: ThemeValue | undefined}>) {
      return (
        <ThemeContext.Provider value={props.value}>
          {props.children}
        </ThemeContext.Provider>
      );
    }
    
export function useTheme() {
  return React.useContext(ThemeContext);
}
  
    export default ThemeContext;
    /* prettier-ignore-end */
  
--- PlasmicHomepage.css ---
 .Homepage__root__pn7QX {
          display: grid;
position: relative;
width: 100%;
height: 100%;
align-content: flex-start;
justify-items: center;
min-width: 0;
min-height: 0;
grid-template-columns: var(--plsmc-viewport-gap) 1fr minmax(0, var(--plsmc-wide-chunk)) min(var(--plsmc-standard-width), calc(100% - var(--plsmc-viewport-gap) - var(--plsmc-viewport-gap))) minmax(0, var(--plsmc-wide-chunk)) 1fr var(--plsmc-viewport-gap) ;
padding: 0px;  
      } 
 .Homepage__root__pn7QX > * {
        grid-column: 4
      } 
 .Homepage__rootglobal_fontSize_large__pn7QXv98I9 > * {
        grid-column: 4
      } 
@media (min-width:0px) and (max-width:768px) { .Homepage__root__pn7QX > * {
        grid-column: 4
      } }
 .Homepage__depComp__mtl9A.__wab_instance {
          max-width: 100%;  
      } 
 .Homepage__p__c3Zff {
          width: 100%;
height: auto;
max-width: 100%;
color: var(--token-3WVVrPp8B-De);
font-size: var(--token-SRpPwIBhWtA_);
min-width: 0;  
      } 
--- PlasmicHomepage.js ---
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 1234567890
// Component: lRapkLBf4Fhi
// plasmic-unformatted
import * as React from "react";
import { classNames, createPlasmicElementProxy, deriveRenderOpts, hasVariant, } from "@plasmicapp/react-web";
import { useDataEnv, } from "@plasmicapp/react-web/lib/host";
import DepComp from "./DepComp"; // plasmic-import: u4_D7ezQ-9rk/component
import { _useGlobalVariants } from "./plasmic.tsx"; // plasmic-import: 1234567890/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider.tsx"; // plasmic-import: 1234567890/styleTokensProvider
import "@plasmicapp/react-web/lib/plasmic.css";
import "./plasmic__default_style.css"; // plasmic-import: global/defaultcss
import "./plasmic.css"; // plasmic-import: 1234567890/projectcss
import "./PlasmicHomepage.css"; // plasmic-import: lRapkLBf4Fhi/css
createPlasmicElementProxy;
export var PlasmicHomepage__VariantProps = new Array();
export var PlasmicHomepage__ArgProps = new Array();
var $$ = {};
function PlasmicHomepage__RenderFunc(props) {
    var variants = props.variants, overrides = props.overrides, forNode = props.forNode;
    var args = React.useMemo(function () { return Object.assign({}, Object.fromEntries(Object.entries(props.args).filter(function (_a) {
        var _ = _a[0], v = _a[1];
        return v !== undefined;
    }))); }, [props.args]);
    var $props = __assign(__assign({}, args), variants);
    var $ctx = (useDataEnv === null || useDataEnv === void 0 ? void 0 : useDataEnv()) || {};
    var refsRef = React.useRef({});
    var $refs = refsRef.current;
    var globalVariants = _useGlobalVariants();
    var styleTokensClassNames = _useStyleTokens();
    return (createPlasmicElementProxy(React.Fragment, null,
        createPlasmicElementProxy("div", { className: "plasmic_page_wrapper" },
            createPlasmicElementProxy("div", { "data-plasmic-name": "root", "data-plasmic-override": overrides.root, "data-plasmic-root": true, "data-plasmic-for-node": forNode, className: classNames("plasmic_default__all", "plasmic_default__div", "root_reset_1234567890", "plasmic_default_styles", "plasmic_mixins", styleTokensClassNames, "Homepage__root__pn7QX", { "Homepage__rootglobal_fontSize_large__pn7QXv98I9": hasVariant(globalVariants, "fontSize", "large") }) },
                createPlasmicElementProxy(DepComp, { "data-plasmic-name": "depComp", "data-plasmic-override": overrides.depComp, className: classNames("__wab_instance", "Homepage__depComp__mtl9A") }),
                createPlasmicElementProxy("p", { "data-plasmic-name": "p", "data-plasmic-override": overrides.p, className: classNames("plasmic_default__all", "plasmic_default__p", "__wab_text", "Homepage__p__c3Zff") }, "Main text (primary)")))));
}
var PlasmicDescendants = {
    root: ["root", "depComp", "p"],
    depComp: ["depComp"],
    p: ["p"],
};
function makeNodeComponent(nodeName) {
    var func = function (props) {
        var _a = React.useMemo(function () { return deriveRenderOpts(props, {
            name: nodeName,
            descendantNames: PlasmicDescendants[nodeName],
            internalArgPropNames: PlasmicHomepage__ArgProps,
            internalVariantPropNames: PlasmicHomepage__VariantProps,
        }); }, [props, nodeName]), variants = _a.variants, args = _a.args, overrides = _a.overrides;
        return PlasmicHomepage__RenderFunc({ variants: variants, args: args, overrides: overrides, forNode: nodeName });
    };
    if (nodeName === "root") {
        func.displayName = "PlasmicHomepage";
    }
    else {
        func.displayName = "PlasmicHomepage.".concat(nodeName);
    }
    return func;
}
export var PlasmicHomepage = Object.assign(
// Top-level PlasmicHomepage renders the root element
makeNodeComponent("root"), {
    // Helper components rendering sub-elements
    depComp: makeNodeComponent("depComp"),
    p: makeNodeComponent("p"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
        "title": "",
        "description": "",
        "ogImageSrc": "",
        "canonical": ""
    },
});
export default PlasmicHomepage;
/* prettier-ignore-end */

--- PlasmicHomepage.tsx ---

    /* eslint-disable */
    /* tslint:disable */
    // @ts-nocheck
    /* prettier-ignore-start */
    
    /** @jsxRuntime classic */
    /** @jsx createPlasmicElementProxy */
    /** @jsxFrag React.Fragment */
    
    // This class is auto-generated by Plasmic; please do not edit!
    // Plasmic Project: 1234567890
    // Component: lRapkLBf4Fhi
    // plasmic-unformatted

    

    import * as React from "react";
    

    import {
      Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName,
  
    } from  "@plasmicapp/react-web";
    import {
      
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions,
  
    } from "@plasmicapp/react-web/lib/host";
    
    
    
    
    
    import DepComp from "./DepComp";  // plasmic-import: u4_D7ezQ-9rk/component
    import { _useGlobalVariants } from "./plasmic.tsx"; // plasmic-import: 1234567890/projectModule
    import { _useStyleTokens } from "./PlasmicStyleTokensProvider.tsx"; // plasmic-import: 1234567890/styleTokensProvider
    
    import "@plasmicapp/react-web/lib/plasmic.css";
    import  "./plasmic__default_style.css"; // plasmic-import: global/defaultcss
    
    import  "./plasmic.css"; // plasmic-import: 1234567890/projectcss
    import  "./PlasmicHomepage.css" // plasmic-import: lRapkLBf4Fhi/css
  
    
    
    
    
    

    createPlasmicElementProxy

    
    

    
    export type PlasmicHomepage__VariantMembers = {
      
    };
    export type PlasmicHomepage__VariantsArgs = {};
    type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
    export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();
  

    
export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();


    export type PlasmicHomepage__OverridesType = {
    root?: Flex__<"div">;
depComp?: Flex__<typeof DepComp>;
p?: Flex__<"p">;
  };

    
    export interface DefaultHomepageProps {
      
      className?: string;
  }

    

    

    

    const $$ = {};

    

    

    

    
    function PlasmicHomepage__RenderFunc(
      props: {
        variants: PlasmicHomepage__VariantsArgs,
        args: PlasmicHomepage__ArgsType,
        overrides: PlasmicHomepage__OverridesType,
        forNode?: string
      }
    ) {
      
      
      const {variants, overrides, forNode } = props;

      

      const args = React.useMemo(() => Object.assign({
    
  }, Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )),
        [props.args]
      );

      
    const $props = {
      ...args,
      ...variants,
    };

    
    
    const $ctx = useDataEnv?.() || {};
    const refsRef = React.useRef({});
    const $refs = refsRef.current;

    const globalVariants = _useGlobalVariants();

    

    

    
    
    
    

    

    

    
    const styleTokensClassNames = _useStyleTokens();
    
  
      return (
        <React.Fragment>
  

      <div className={"plasmic_page_wrapper"}>
        <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("plasmic_default__all", "plasmic_default__div", "root_reset_1234567890", "plasmic_default_styles", "plasmic_mixins", styleTokensClassNames, "Homepage__root__pn7QX", { "Homepage__rootglobal_fontSize_large__pn7QXv98I9": hasVariant(
      globalVariants,
      "fontSize",
      "large"
    ) })}
      
      >
            <DepComp
      data-plasmic-name={"depComp"}
      data-plasmic-override={overrides.depComp}
      
      
      className={classNames("__wab_instance", "Homepage__depComp__mtl9A")}
      
      />
<p
      data-plasmic-name={"p"}
      data-plasmic-override={overrides.p}
      
      
      className={classNames("plasmic_default__all", "plasmic_default__p", "__wab_text", "Homepage__p__c3Zff")}
      
      >
            { "Main text (primary)" }
          </p>
          </div>
      </div>
    
</React.Fragment>
      ) as React.ReactElement | null;
    }

    

    
    const PlasmicDescendants = {
    root: ["root", "depComp", "p"],
depComp: ["depComp"],
p: ["p"],
  } as const;
    type NodeNameType = keyof typeof PlasmicDescendants;
    type DescendantsType<T extends NodeNameType> = (typeof PlasmicDescendants)[T][number];
    type NodeDefaultElementType = {
      root: "div";
depComp: typeof DepComp;
p: "p"
    };
  

    
    type ReservedPropsType = "variants" | "args" | "overrides";
    type NodeOverridesType<T extends NodeNameType> = Pick<PlasmicHomepage__OverridesType, DescendantsType<T>>;
    type NodeComponentProps<T extends NodeNameType> = (
      // Explicitly specify variants, args, and overrides as objects
      & {
        variants?: PlasmicHomepage__VariantsArgs;
        args?: PlasmicHomepage__ArgsType;
        overrides?: NodeOverridesType<T>;
      }
      // Specify variants directly as props
      & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType>
      // Specify args directly as props
      & Omit<PlasmicHomepage__ArgsType, ReservedPropsType>
      // Specify overrides for each element directly as props
      & Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType>
      // Specify props for the root element
      & Omit<Partial<React.ComponentProps<NodeDefaultElementType[T]>>, ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>>
    );
    function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
      type PropsType = NodeComponentProps<NodeName> & {key?: React.Key};
      const func = function<T extends PropsType>(props: T & StrictProps<T, PropsType>) {
        const {variants, args, overrides} = React.useMemo(() => deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps,
        }), [props, nodeName]);
        return PlasmicHomepage__RenderFunc({ variants, args, overrides, forNode: nodeName });
      };
      if (nodeName === "root") {
        func.displayName = "PlasmicHomepage";
      } else {
        func.displayName = \`PlasmicHomepage.\${nodeName}\`;
      }
      return func;
    }

    
    

    export const PlasmicHomepage = Object.assign(
      // Top-level PlasmicHomepage renders the root element
      makeNodeComponent("root"),
      {
        // Helper components rendering sub-elements
        depComp: makeNodeComponent("depComp"),
p: makeNodeComponent("p"),

        // Metadata about props expected for PlasmicHomepage
        internalVariantProps: PlasmicHomepage__VariantProps,
        internalArgProps: PlasmicHomepage__ArgProps,

        

        

        

        
    // Page metadata
    pageMetadata: {
  "title": "",
  "description": "",
  "ogImageSrc": "",
  "canonical": ""
},
  
      }
    );
  

    

    export default PlasmicHomepage;
    /* prettier-ignore-end */
  
--- PlasmicStyleTokensProvider.js ---
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
// This code is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 1234567890
// plasmic-unformatted
import { createUseStyleTokens, createStyleTokensProvider } from "@plasmicapp/react-web";
import { _useGlobalVariants } from "./plasmic.tsx"; // plasmic-import: 1234567890/projectModule
var data = {
    base: "".concat("plasmic_tokens_1234567890", " ").concat("plasmic_tokens_iGygRUekJWXZgpf4Konyj4"),
    varianted: [
        {
            className: "global_fontSize_large",
            groupName: "fontSize",
            variant: "large",
        },
        {
            className: "global_theme_dark",
            groupName: "theme",
            variant: "dark",
        }
    ],
};
export var _useStyleTokens = createUseStyleTokens(data, _useGlobalVariants);
export var StyleTokensProvider = createStyleTokensProvider({
    base: "".concat("plasmic_tokens_override_1234567890", " ").concat(data.base),
    varianted: data.varianted
}, _useGlobalVariants);

--- PlasmicStyleTokensProvider.tsx ---

    /* eslint-disable */
    /* tslint:disable */
    // @ts-nocheck
  
    // This code is auto-generated by Plasmic; please do not edit!
    // Plasmic Project: 1234567890
    // plasmic-unformatted
  
    import { createUseStyleTokens, createStyleTokensProvider } from "@plasmicapp/react-web";

    import { _useGlobalVariants } from "./plasmic.tsx"; // plasmic-import: 1234567890/projectModule
  
    

    
  
    const data = {
    base: \`\${"plasmic_tokens_1234567890"} \${"plasmic_tokens_iGygRUekJWXZgpf4Konyj4"}\`,
    varianted: [
    {
            className: "global_fontSize_large",
            groupName: "fontSize",
            variant: "large",
          },
{
            className: "global_theme_dark",
            groupName: "theme",
            variant: "dark",
          }
  ],
  };
  
    export const _useStyleTokens = createUseStyleTokens(
      data,
      _useGlobalVariants,
    );
  
    export const StyleTokensProvider = createStyleTokensProvider(
      { 
    base: \`\${"plasmic_tokens_override_1234567890"} \${data.base}\`, 
    varianted: data.varianted 
  },
      _useGlobalVariants,
    );
--- global.d.ts ---
declare module '*.module.css' {
  const classes: { readonly [key: string]: string }
  export default classes
}
--- plasmic.css ---

      @import url('https://fonts.googleapis.com/css2?family=Inter%3Aital%2Cwght%400%2C400%3B0%2C600%3B0%2C700&family=Inconsolata%3Aital%2Cwght%400%2C400%3B0%2C600%3B0%2C700&display=swap');
      
      
        
        .plasmic_tokens_override_1234567890.plasmic_tokens_override_1234567890 {
          --token-3WVVrPp8B-De: #0000FF
        }
        

        
        .plasmic_tokens_override_1234567890.plasmic_tokens_override_1234567890.global_theme_dark.global_theme_dark {
          --token-3WVVrPp8B-De: #1E1E87
        }
        
      
  .plasmic_tokens_1234567890 {
    --plsmc-standard-width: 800px;
    --plsmc-wide-width: 1280px;
    --plsmc-viewport-gap: 16px;
    --plsmc-wide-chunk: calc(((var(--plsmc-wide-width) - var(--plsmc-standard-width)) / 2) - var(--plsmc-viewport-gap));
  }
    
      
      
        
        .plasmic_default_styles, .plasmic_default_styles:where(.global_theme_dark) {
          --mixin-rnC1eOLSIqFC_font-family: "Inter", sans-serif; --mixin-rnC1eOLSIqFC_font-size: 16px; --mixin-rnC1eOLSIqFC_font-weight: 400; --mixin-rnC1eOLSIqFC_font-style: normal; --mixin-rnC1eOLSIqFC_color: #535353; --mixin-rnC1eOLSIqFC_text-align: left; --mixin-rnC1eOLSIqFC_text-transform: none; --mixin-rnC1eOLSIqFC_line-height: 1.5; --mixin-rnC1eOLSIqFC_letter-spacing: normal; --mixin-rnC1eOLSIqFC_white-space: pre-wrap; --mixin-rnC1eOLSIqFC_user-select: text; --mixin-rnC1eOLSIqFC_text-decoration-line: none; --mixin-rnC1eOLSIqFC_text-overflow: clip; --mixin-UGrPpHBMVY7J_color: #000000; --mixin-UGrPpHBMVY7J_font-weight: 700; --mixin-UGrPpHBMVY7J_font-size: 64px; --mixin-UGrPpHBMVY7J_line-height: 1; --mixin-UGrPpHBMVY7J_letter-spacing: -1px; --mixin-UGrPpHBMVY7J_white-space: pre-wrap; --mixin-VRq1_llgZwB1_color: #000000; --mixin-VRq1_llgZwB1_font-size: 48px; --mixin-VRq1_llgZwB1_font-weight: 700; --mixin-VRq1_llgZwB1_letter-spacing: -0.5px; --mixin-VRq1_llgZwB1_line-height: 1.1; --mixin-VRq1_llgZwB1_white-space: pre-wrap; --mixin-RWGNEf6Kg8Rr_color: #0070f3; --mixin-RWGNEf6Kg8Rr_white-space: pre-wrap; --mixin-SfsSlbfB8eMn_color: #000000; --mixin-SfsSlbfB8eMn_font-size: 32px; --mixin-SfsSlbfB8eMn_font-weight: 600; --mixin-SfsSlbfB8eMn_line-height: 1.2; --mixin-SfsSlbfB8eMn_white-space: pre-wrap; --mixin-H0W5W6mHazE9_color: #000000; --mixin-H0W5W6mHazE9_font-size: 24px; --mixin-H0W5W6mHazE9_font-weight: 600; --mixin-H0W5W6mHazE9_line-height: 1.3; --mixin-H0W5W6mHazE9_white-space: pre-wrap; --mixin-A5JYLsmMDFmm_background: linear-gradient(#f8f8f8, #f8f8f8); --mixin-A5JYLsmMDFmm_border-bottom-color: #dddddd; --mixin-A5JYLsmMDFmm_border-bottom-style: solid; --mixin-A5JYLsmMDFmm_border-bottom-width: 1px; --mixin-A5JYLsmMDFmm_border-left-color: #dddddd; --mixin-A5JYLsmMDFmm_border-left-style: solid; --mixin-A5JYLsmMDFmm_border-left-width: 1px; --mixin-A5JYLsmMDFmm_border-right-color: #dddddd; --mixin-A5JYLsmMDFmm_border-right-style: solid; --mixin-A5JYLsmMDFmm_border-right-width: 1px; --mixin-A5JYLsmMDFmm_border-top-color: #dddddd; --mixin-A5JYLsmMDFmm_border-top-style: solid; --mixin-A5JYLsmMDFmm_border-top-width: 1px; --mixin-A5JYLsmMDFmm_border-bottom-left-radius: 3px; --mixin-A5JYLsmMDFmm_border-bottom-right-radius: 3px; --mixin-A5JYLsmMDFmm_border-top-left-radius: 3px; --mixin-A5JYLsmMDFmm_border-top-right-radius: 3px; --mixin-A5JYLsmMDFmm_font-family: "Inconsolata"; --mixin-A5JYLsmMDFmm_padding-bottom: 1px; --mixin-A5JYLsmMDFmm_padding-left: 4px; --mixin-A5JYLsmMDFmm_padding-right: 4px; --mixin-A5JYLsmMDFmm_padding-top: 1px; --mixin-A5JYLsmMDFmm_white-space: pre-wrap; --mixin-mNvjyqNFa1h2_border-left-color: #dddddd; --mixin-mNvjyqNFa1h2_border-left-style: solid; --mixin-mNvjyqNFa1h2_border-left-width: 3px; --mixin-mNvjyqNFa1h2_color: #888888; --mixin-mNvjyqNFa1h2_padding-left: 10px; --mixin-mNvjyqNFa1h2_white-space: pre-wrap; --mixin-tXUahRGpn8oG_background: linear-gradient(#f8f8f8, #f8f8f8); --mixin-tXUahRGpn8oG_border-bottom-color: #dddddd; --mixin-tXUahRGpn8oG_border-bottom-style: solid; --mixin-tXUahRGpn8oG_border-bottom-width: 1px; --mixin-tXUahRGpn8oG_border-left-color: #dddddd; --mixin-tXUahRGpn8oG_border-left-style: solid; --mixin-tXUahRGpn8oG_border-left-width: 1px; --mixin-tXUahRGpn8oG_border-right-color: #dddddd; --mixin-tXUahRGpn8oG_border-right-style: solid; --mixin-tXUahRGpn8oG_border-right-width: 1px; --mixin-tXUahRGpn8oG_border-top-color: #dddddd; --mixin-tXUahRGpn8oG_border-top-style: solid; --mixin-tXUahRGpn8oG_border-top-width: 1px; --mixin-tXUahRGpn8oG_border-bottom-left-radius: 3px; --mixin-tXUahRGpn8oG_border-bottom-right-radius: 3px; --mixin-tXUahRGpn8oG_border-top-left-radius: 3px; --mixin-tXUahRGpn8oG_border-top-right-radius: 3px; --mixin-tXUahRGpn8oG_font-family: "Inconsolata"; --mixin-tXUahRGpn8oG_padding-bottom: 3px; --mixin-tXUahRGpn8oG_padding-left: 6px; --mixin-tXUahRGpn8oG_padding-right: 6px; --mixin-tXUahRGpn8oG_padding-top: 3px; --mixin-tXUahRGpn8oG_white-space: pre-wrap; --mixin-jZ5QmbJS_cE5_display: flex; --mixin-jZ5QmbJS_cE5_flex-direction: column; --mixin-jZ5QmbJS_cE5_align-items: stretch; --mixin-jZ5QmbJS_cE5_justify-content: flex-start; --mixin-jZ5QmbJS_cE5_list-style-position: outside; --mixin-jZ5QmbJS_cE5_padding-left: 40px; --mixin-jZ5QmbJS_cE5_position: relative; --mixin-jZ5QmbJS_cE5_list-style-type: disc; --mixin-jZ5QmbJS_cE5_white-space: pre-wrap; --mixin-_k0B8b6_K8MI_display: flex; --mixin-_k0B8b6_K8MI_flex-direction: column; --mixin-_k0B8b6_K8MI_align-items: stretch; --mixin-_k0B8b6_K8MI_justify-content: flex-start; --mixin-_k0B8b6_K8MI_list-style-position: outside; --mixin-_k0B8b6_K8MI_padding-left: 40px; --mixin-_k0B8b6_K8MI_position: relative; --mixin-_k0B8b6_K8MI_list-style-type: decimal; --mixin-_k0B8b6_K8MI_white-space: pre-wrap; --mixin-E99KT9Rcd_Pq_color: #000000; --mixin-E99KT9Rcd_Pq_font-size: 20px; --mixin-E99KT9Rcd_Pq_font-weight: 600; --mixin-E99KT9Rcd_Pq_line-height: 1.5; --mixin-E99KT9Rcd_Pq_white-space: pre-wrap; --mixin-c5PTYwS9Oqn0_color: #000000; --mixin-c5PTYwS9Oqn0_font-size: 16px; --mixin-c5PTYwS9Oqn0_font-weight: 600; --mixin-c5PTYwS9Oqn0_line-height: 1.5; --mixin-c5PTYwS9Oqn0_white-space: pre-wrap; --mixin--vPioDGGsgQh_color: #3291ff; --mixin--vPioDGGsgQh_white-space: pre-wrap; --mixin-Fq4RsiDXAoih_white-space: pre-wrap; --mixin-cNb9XeWgYfML_white-space: pre-wrap
        }
        
      
      
      :where(.root_reset_1234567890) {
      font-family: var(--mixin-rnC1eOLSIqFC_font-family);
font-size: var(--mixin-rnC1eOLSIqFC_font-size);
font-weight: var(--mixin-rnC1eOLSIqFC_font-weight);
font-style: var(--mixin-rnC1eOLSIqFC_font-style);
color: var(--mixin-rnC1eOLSIqFC_color);
text-align: var(--mixin-rnC1eOLSIqFC_text-align);
text-transform: var(--mixin-rnC1eOLSIqFC_text-transform);
line-height: var(--mixin-rnC1eOLSIqFC_line-height);
letter-spacing: var(--mixin-rnC1eOLSIqFC_letter-spacing);
white-space: var(--mixin-rnC1eOLSIqFC_white-space);  
  }
      
    :where(.root_reset_1234567890) h1:where(.plasmic_default__h1), h1:where(.root_reset_1234567890.plasmic_default__h1), :where(.root_reset_1234567890 .__wab_expr_html_text) h1, :where(.root_reset_1234567890_tags) h1, h1:where(.root_reset_1234567890_tags) {
        color: var(--mixin-UGrPpHBMVY7J_color);
font-weight: var(--mixin-UGrPpHBMVY7J_font-weight);
font-size: var(--mixin-UGrPpHBMVY7J_font-size);
line-height: var(--mixin-UGrPpHBMVY7J_line-height);
letter-spacing: var(--mixin-UGrPpHBMVY7J_letter-spacing);  
    }
  

    :where(.root_reset_1234567890) h2:where(.plasmic_default__h2), h2:where(.root_reset_1234567890.plasmic_default__h2), :where(.root_reset_1234567890 .__wab_expr_html_text) h2, :where(.root_reset_1234567890_tags) h2, h2:where(.root_reset_1234567890_tags) {
        color: var(--mixin-VRq1_llgZwB1_color);
font-size: var(--mixin-VRq1_llgZwB1_font-size);
font-weight: var(--mixin-VRq1_llgZwB1_font-weight);
letter-spacing: var(--mixin-VRq1_llgZwB1_letter-spacing);
line-height: var(--mixin-VRq1_llgZwB1_line-height);  
    }
  

    :where(.root_reset_1234567890) a:where(.plasmic_default__a), a:where(.root_reset_1234567890.plasmic_default__a), :where(.root_reset_1234567890 .__wab_expr_html_text) a, :where(.root_reset_1234567890_tags) a, a:where(.root_reset_1234567890_tags) {
        color: var(--mixin-RWGNEf6Kg8Rr_color);  
    }
  

    :where(.root_reset_1234567890) h3:where(.plasmic_default__h3), h3:where(.root_reset_1234567890.plasmic_default__h3), :where(.root_reset_1234567890 .__wab_expr_html_text) h3, :where(.root_reset_1234567890_tags) h3, h3:where(.root_reset_1234567890_tags) {
        color: var(--mixin-SfsSlbfB8eMn_color);
font-size: var(--mixin-SfsSlbfB8eMn_font-size);
font-weight: var(--mixin-SfsSlbfB8eMn_font-weight);
line-height: var(--mixin-SfsSlbfB8eMn_line-height);  
    }
  

    :where(.root_reset_1234567890) h4:where(.plasmic_default__h4), h4:where(.root_reset_1234567890.plasmic_default__h4), :where(.root_reset_1234567890 .__wab_expr_html_text) h4, :where(.root_reset_1234567890_tags) h4, h4:where(.root_reset_1234567890_tags) {
        color: var(--mixin-H0W5W6mHazE9_color);
font-size: var(--mixin-H0W5W6mHazE9_font-size);
font-weight: var(--mixin-H0W5W6mHazE9_font-weight);
line-height: var(--mixin-H0W5W6mHazE9_line-height);  
    }
  

    :where(.root_reset_1234567890) code:where(.plasmic_default__code), code:where(.root_reset_1234567890.plasmic_default__code), :where(.root_reset_1234567890 .__wab_expr_html_text) code, :where(.root_reset_1234567890_tags) code, code:where(.root_reset_1234567890_tags) {
        background: #f8f8f8;
font-family: var(--mixin-A5JYLsmMDFmm_font-family);
border-radius: var(--mixin-A5JYLsmMDFmm_border-top-left-radius) var(--mixin-A5JYLsmMDFmm_border-top-right-radius) var(--mixin-A5JYLsmMDFmm_border-bottom-right-radius) var(--mixin-A5JYLsmMDFmm_border-bottom-left-radius);
padding: var(--mixin-A5JYLsmMDFmm_padding-top) var(--mixin-A5JYLsmMDFmm_padding-right) var(--mixin-A5JYLsmMDFmm_padding-bottom) var(--mixin-A5JYLsmMDFmm_padding-left);
border-top: var(--mixin-A5JYLsmMDFmm_border-top-width) var(--mixin-A5JYLsmMDFmm_border-top-style) var(--mixin-A5JYLsmMDFmm_border-top-color);
border-right: var(--mixin-A5JYLsmMDFmm_border-right-width) var(--mixin-A5JYLsmMDFmm_border-right-style) var(--mixin-A5JYLsmMDFmm_border-right-color);
border-bottom: var(--mixin-A5JYLsmMDFmm_border-bottom-width) var(--mixin-A5JYLsmMDFmm_border-bottom-style) var(--mixin-A5JYLsmMDFmm_border-bottom-color);
border-left: var(--mixin-A5JYLsmMDFmm_border-left-width) var(--mixin-A5JYLsmMDFmm_border-left-style) var(--mixin-A5JYLsmMDFmm_border-left-color);  
    }
  

    :where(.root_reset_1234567890) blockquote:where(.plasmic_default__blockquote), blockquote:where(.root_reset_1234567890.plasmic_default__blockquote), :where(.root_reset_1234567890 .__wab_expr_html_text) blockquote, :where(.root_reset_1234567890_tags) blockquote, blockquote:where(.root_reset_1234567890_tags) {
        color: var(--mixin-mNvjyqNFa1h2_color);
padding-left: var(--mixin-mNvjyqNFa1h2_padding-left);
border-left: var(--mixin-mNvjyqNFa1h2_border-left-width) var(--mixin-mNvjyqNFa1h2_border-left-style) var(--mixin-mNvjyqNFa1h2_border-left-color);  
    }
  

    :where(.root_reset_1234567890) pre:where(.plasmic_default__pre), pre:where(.root_reset_1234567890.plasmic_default__pre), :where(.root_reset_1234567890 .__wab_expr_html_text) pre, :where(.root_reset_1234567890_tags) pre, pre:where(.root_reset_1234567890_tags) {
        background: #f8f8f8;
font-family: var(--mixin-tXUahRGpn8oG_font-family);
border-radius: var(--mixin-tXUahRGpn8oG_border-top-left-radius) var(--mixin-tXUahRGpn8oG_border-top-right-radius) var(--mixin-tXUahRGpn8oG_border-bottom-right-radius) var(--mixin-tXUahRGpn8oG_border-bottom-left-radius);
padding: var(--mixin-tXUahRGpn8oG_padding-top) var(--mixin-tXUahRGpn8oG_padding-right) var(--mixin-tXUahRGpn8oG_padding-bottom) var(--mixin-tXUahRGpn8oG_padding-left);
border-top: var(--mixin-tXUahRGpn8oG_border-top-width) var(--mixin-tXUahRGpn8oG_border-top-style) var(--mixin-tXUahRGpn8oG_border-top-color);
border-right: var(--mixin-tXUahRGpn8oG_border-right-width) var(--mixin-tXUahRGpn8oG_border-right-style) var(--mixin-tXUahRGpn8oG_border-right-color);
border-bottom: var(--mixin-tXUahRGpn8oG_border-bottom-width) var(--mixin-tXUahRGpn8oG_border-bottom-style) var(--mixin-tXUahRGpn8oG_border-bottom-color);
border-left: var(--mixin-tXUahRGpn8oG_border-left-width) var(--mixin-tXUahRGpn8oG_border-left-style) var(--mixin-tXUahRGpn8oG_border-left-color);  
    }
  

    :where(.root_reset_1234567890) ul:where(.plasmic_default__ul), ul:where(.root_reset_1234567890.plasmic_default__ul), :where(.root_reset_1234567890 .__wab_expr_html_text) ul, :where(.root_reset_1234567890_tags) ul, ul:where(.root_reset_1234567890_tags) {
        display: var(--mixin-jZ5QmbJS_cE5_display);
flex-direction: var(--mixin-jZ5QmbJS_cE5_flex-direction);
align-items: var(--mixin-jZ5QmbJS_cE5_align-items);
justify-content: var(--mixin-jZ5QmbJS_cE5_justify-content);
list-style-position: var(--mixin-jZ5QmbJS_cE5_list-style-position);
padding-left: var(--mixin-jZ5QmbJS_cE5_padding-left);
position: var(--mixin-jZ5QmbJS_cE5_position);
list-style-type: var(--mixin-jZ5QmbJS_cE5_list-style-type);
column-gap: var(--mixin-jZ5QmbJS_cE5_column-gap);  
    }
  

    :where(.root_reset_1234567890) ol:where(.plasmic_default__ol), ol:where(.root_reset_1234567890.plasmic_default__ol), :where(.root_reset_1234567890 .__wab_expr_html_text) ol, :where(.root_reset_1234567890_tags) ol, ol:where(.root_reset_1234567890_tags) {
        display: var(--mixin-_k0B8b6_K8MI_display);
flex-direction: var(--mixin-_k0B8b6_K8MI_flex-direction);
align-items: var(--mixin-_k0B8b6_K8MI_align-items);
justify-content: var(--mixin-_k0B8b6_K8MI_justify-content);
list-style-position: var(--mixin-_k0B8b6_K8MI_list-style-position);
padding-left: var(--mixin-_k0B8b6_K8MI_padding-left);
position: var(--mixin-_k0B8b6_K8MI_position);
list-style-type: var(--mixin-_k0B8b6_K8MI_list-style-type);
column-gap: var(--mixin-_k0B8b6_K8MI_column-gap);  
    }
  

    :where(.root_reset_1234567890) h5:where(.plasmic_default__h5), h5:where(.root_reset_1234567890.plasmic_default__h5), :where(.root_reset_1234567890 .__wab_expr_html_text) h5, :where(.root_reset_1234567890_tags) h5, h5:where(.root_reset_1234567890_tags) {
        color: var(--mixin-E99KT9Rcd_Pq_color);
font-size: var(--mixin-E99KT9Rcd_Pq_font-size);
font-weight: var(--mixin-E99KT9Rcd_Pq_font-weight);
line-height: var(--mixin-E99KT9Rcd_Pq_line-height);  
    }
  

    :where(.root_reset_1234567890) h6:where(.plasmic_default__h6), h6:where(.root_reset_1234567890.plasmic_default__h6), :where(.root_reset_1234567890 .__wab_expr_html_text) h6, :where(.root_reset_1234567890_tags) h6, h6:where(.root_reset_1234567890_tags) {
        color: var(--mixin-c5PTYwS9Oqn0_color);
font-size: var(--mixin-c5PTYwS9Oqn0_font-size);
font-weight: var(--mixin-c5PTYwS9Oqn0_font-weight);
line-height: var(--mixin-c5PTYwS9Oqn0_line-height);  
    }
  

    :where(.root_reset_1234567890) a:where(.plasmic_default__a):hover, a:where(.root_reset_1234567890.plasmic_default__a):hover, :where(.root_reset_1234567890 .__wab_expr_html_text) a:hover, :where(.root_reset_1234567890_tags) a:hover, a:where(.root_reset_1234567890_tags):hover {
        color: var(--mixin--vPioDGGsgQh_color);  
    }
  

    :where(.root_reset_1234567890) li:where(.plasmic_default__li), li:where(.root_reset_1234567890.plasmic_default__li), :where(.root_reset_1234567890 .__wab_expr_html_text) li, :where(.root_reset_1234567890_tags) li, li:where(.root_reset_1234567890_tags) {
      
    }
  

    :where(.root_reset_1234567890) p:where(.plasmic_default__p), p:where(.root_reset_1234567890.plasmic_default__p), :where(.root_reset_1234567890 .__wab_expr_html_text) p, :where(.root_reset_1234567890_tags) p, p:where(.root_reset_1234567890_tags) {
      
    }
  
    
--- plasmic.js ---
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
// This code is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 1234567890
// plasmic-unformatted
import { createUseGlobalVariants } from "@plasmicapp/react-web";
import { useScreenVariants as useScreenVariantsnfhwiZAfL1RZ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: NfhwiZAfL1rZ/globalVariant
import { useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: AmskLHuaRQYg/globalVariant
import { useFontSize } from "./PlasmicGlobalVariant__FontSize"; // plasmic-import: FnAXTHubXNeo/globalVariant
export var _useGlobalVariants = createUseGlobalVariants({
    screen: useScreenVariantsnfhwiZAfL1RZ,
    theme: useTheme,
    fontSize: useFontSize
});

--- plasmic.tsx ---

    /* eslint-disable */
    /* tslint:disable */
    // @ts-nocheck
  
    // This code is auto-generated by Plasmic; please do not edit!
    // Plasmic Project: 1234567890
    // plasmic-unformatted
  
    import { createUseGlobalVariants } from "@plasmicapp/react-web";
    
          import {useScreenVariants as useScreenVariantsnfhwiZAfL1RZ} from "./PlasmicGlobalVariant__Screen";  // plasmic-import: NfhwiZAfL1rZ/globalVariant
import {ThemeValue, useTheme} from "./PlasmicGlobalVariant__Theme";  // plasmic-import: AmskLHuaRQYg/globalVariant
import {FontSizeValue, useFontSize} from "./PlasmicGlobalVariant__FontSize";  // plasmic-import: FnAXTHubXNeo/globalVariant
        
  
    
  export const _useGlobalVariants = createUseGlobalVariants({
    screen: useScreenVariantsnfhwiZAfL1RZ,
theme: useTheme,
fontSize: useFontSize
  });

  
--- plasmic__default_style.css ---

        :where(.plasmic_default__all) {   display: block;
  white-space: inherit;
  grid-row: auto;
  grid-column: auto;
  position: relative;
  background: none;
  background-size: 100% 100%;
  background-repeat: no-repeat;
  row-gap: 0px;
  column-gap: 0px;
  box-shadow: none;
  box-sizing: border-box;
  text-decoration-line: none;
  margin: 0;
  border-width: 0px; }
        :where(.__wab_expr_html_text *) {   white-space: inherit;
  grid-row: auto;
  grid-column: auto;
  background: none;
  background-size: 100% 100%;
  background-repeat: no-repeat;
  row-gap: 0px;
  column-gap: 0px;
  box-shadow: none;
  box-sizing: border-box;
  margin: 0;
  border-width: 0px; }
      

      :where(.plasmic_default__img) {   display: inline-block; }
      :where(.__wab_expr_html_text img) {   white-space: inherit; }
    

      :where(.plasmic_default__li) {   display: list-item; }
      :where(.__wab_expr_html_text li) {   white-space: inherit; }
    

      :where(.plasmic_default__span) {   display: inline;
  position: static;
  font-family: inherit;
  line-height: inherit;
  font-size: inherit;
  font-style: inherit;
  font-weight: inherit;
  color: inherit;
  text-transform: inherit; }
      :where(.__wab_expr_html_text span) {   white-space: inherit;
  font-family: inherit;
  line-height: inherit;
  font-size: inherit;
  font-style: inherit;
  font-weight: inherit;
  color: inherit;
  text-transform: inherit; }
    

      :where(.plasmic_default__input) {   font-family: inherit;
  line-height: inherit;
  font-size: inherit;
  font-style: inherit;
  font-weight: inherit;
  color: inherit;
  text-transform: inherit;
  background-image: linear-gradient(#ffffff, #ffffff);
  padding: 2px;
  border: 1px solid lightgray; }
      :where(.__wab_expr_html_text input) {   white-space: inherit;
  font-family: inherit;
  line-height: inherit;
  font-size: inherit;
  font-style: inherit;
  font-weight: inherit;
  color: inherit;
  text-transform: inherit;
  background-image: linear-gradient(#ffffff, #ffffff);
  padding: 2px;
  border: 1px solid lightgray; }
    

      :where(.plasmic_default__textarea) {   font-family: inherit;
  line-height: inherit;
  font-size: inherit;
  font-style: inherit;
  font-weight: inherit;
  color: inherit;
  text-transform: inherit;
  padding: 2px;
  border: 1px solid lightgray; }
      :where(.__wab_expr_html_text textarea) {   white-space: inherit;
  font-family: inherit;
  line-height: inherit;
  font-size: inherit;
  font-style: inherit;
  font-weight: inherit;
  color: inherit;
  text-transform: inherit;
  padding: 2px;
  border: 1px solid lightgray; }
    

      :where(.plasmic_default__button) {   font-family: inherit;
  line-height: inherit;
  font-size: inherit;
  font-style: inherit;
  font-weight: inherit;
  color: inherit;
  text-transform: inherit;
  background-image: none;
  align-items: flex-start;
  text-align: center;
  padding: 2px 6px;
  border: 1px solid lightgray; }
      :where(.__wab_expr_html_text button) {   white-space: inherit;
  font-family: inherit;
  line-height: inherit;
  font-size: inherit;
  font-style: inherit;
  font-weight: inherit;
  color: inherit;
  text-transform: inherit;
  background-image: none;
  align-items: flex-start;
  text-align: center;
  padding: 2px 6px;
  border: 1px solid lightgray; }
    

      :where(.plasmic_default__code) {   font-family: inherit;
  line-height: inherit; }
      :where(.__wab_expr_html_text code) {   white-space: inherit;
  font-family: inherit;
  line-height: inherit; }
    

      :where(.plasmic_default__pre) {   font-family: inherit;
  line-height: inherit; }
      :where(.__wab_expr_html_text pre) {   white-space: inherit;
  font-family: inherit;
  line-height: inherit; }
    

      :where(.plasmic_default__p) {   font-family: inherit;
  line-height: inherit;
  font-size: inherit;
  font-style: inherit;
  font-weight: inherit;
  color: inherit;
  text-transform: inherit; }
      :where(.__wab_expr_html_text p) {   white-space: inherit;
  font-family: inherit;
  line-height: inherit;
  font-size: inherit;
  font-style: inherit;
  font-weight: inherit;
  color: inherit;
  text-transform: inherit; }
    

      :where(.plasmic_default__h1) {   font-size: inherit;
  font-weight: inherit; }
      :where(.__wab_expr_html_text h1) {   white-space: inherit;
  font-size: inherit;
  font-weight: inherit; }
    

      :where(.plasmic_default__h2) {   font-size: inherit;
  font-weight: inherit; }
      :where(.__wab_expr_html_text h2) {   white-space: inherit;
  font-size: inherit;
  font-weight: inherit; }
    

      :where(.plasmic_default__h3) {   font-size: inherit;
  font-weight: inherit; }
      :where(.__wab_expr_html_text h3) {   white-space: inherit;
  font-size: inherit;
  font-weight: inherit; }
    

      :where(.plasmic_default__h4) {   font-size: inherit;
  font-weight: inherit; }
      :where(.__wab_expr_html_text h4) {   white-space: inherit;
  font-size: inherit;
  font-weight: inherit; }
    

      :where(.plasmic_default__h5) {   font-size: inherit;
  font-weight: inherit; }
      :where(.__wab_expr_html_text h5) {   white-space: inherit;
  font-size: inherit;
  font-weight: inherit; }
    

      :where(.plasmic_default__h6) {   font-size: inherit;
  font-weight: inherit; }
      :where(.__wab_expr_html_text h6) {   white-space: inherit;
  font-size: inherit;
  font-weight: inherit; }
    

      :where(.plasmic_default__address) {   font-style: inherit; }
      :where(.__wab_expr_html_text address) {   white-space: inherit;
  font-style: inherit; }
    

      :where(.plasmic_default__a) {   color: inherit; }
      :where(.__wab_expr_html_text a) {   white-space: inherit;
  color: inherit; }
    

      :where(.plasmic_default__ol) {   list-style-type: none;
  padding: 0; }
      :where(.__wab_expr_html_text ol) {   white-space: inherit;
  list-style-type: none;
  padding: 0; }
    

      :where(.plasmic_default__ul) {   list-style-type: none;
  padding: 0; }
      :where(.__wab_expr_html_text ul) {   white-space: inherit;
  list-style-type: none;
  padding: 0; }
    

      :where(.plasmic_default__select) {   padding: 2px 6px; }
      :where(.__wab_expr_html_text select) {   white-space: inherit;
  padding: 2px 6px; }
    
.plasmic_default__component_wrapper { display: grid; }
.plasmic_default__inline { display: inline; }
.plasmic_page_wrapper { display: flex; width: 100%; min-height: 100vh; align-items: stretch; align-self: start;}
.plasmic_page_wrapper > * { height: auto !important; }
.__wab_expr_html_text { white-space: normal; }
--- tsconfig.json ---
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "jsx": "react",
    "module": "esnext",
    "moduleResolution": "node",
    "skipLibCheck": true,
    "allowSyntheticDefaultImports": true,
    "strict": true
  }
}"
`;

exports[`token overrides: codegen should codegen correct contents - css modules 1`] = `
"
--- Homepage.js ---
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import { PlasmicHomepage } from "./PlasmicHomepage"; // plasmic-import: lRapkLBf4Fhi/render
function Homepage_(props, ref) {
    // Use PlasmicHomepage to render this component as it was
    // designed in Plasmic, by activating the appropriate variants,
    // attaching the appropriate event handlers, etc.  You
    // can also install whatever React hooks you need here to manage state or
    // fetch data.
    //
    // Props you can pass into PlasmicHomepage are:
    // 1. Variants you want to activate,
    // 2. Contents for slots you want to fill,
    // 3. Overrides for any named node in the component to attach behavior and data,
    // 4. Props to set on the root node.
    //
    // By default, we are just piping all HomepageProps here, but feel free
    // to do whatever works for you.
    return React.createElement(PlasmicHomepage, __assign({ root: { ref: ref } }, props));
}
var Homepage = React.forwardRef(Homepage_);
export default Homepage;

--- Homepage.tsx ---

    // This is a skeleton starter React component generated by Plasmic.
    // This file is owned by you, feel free to edit as you see fit.
    import * as React from "react";
    import {PlasmicHomepage, DefaultHomepageProps} from "./PlasmicHomepage";  // plasmic-import: lRapkLBf4Fhi/render
    import {HTMLElementRefOf} from "@plasmicapp/react-web";

    

    

    // Your component props start with props for variants and slots you defined
    // in Plasmic, but you can add more here, like event handlers that you can
    // attach to named nodes in your component.
    //
    // If you don't want to expose certain variants or slots as a prop, you can use
    // Omit to hide them:
    //
    // interface HomepageProps extends Omit<DefaultHomepageProps, "hideProps1"|"hideProp2"> {
    //   // etc.
    // }
    //
    // You can also stop extending from DefaultHomepageProps altogether and have
    // total control over the props for your component.
    export interface HomepageProps extends DefaultHomepageProps {
    }

    
      function Homepage_(props: HomepageProps, ref: HTMLElementRefOf<"div">) {
        
    // Use PlasmicHomepage to render this component as it was
    // designed in Plasmic, by activating the appropriate variants,
    // attaching the appropriate event handlers, etc.  You
    // can also install whatever React hooks you need here to manage state or
    // fetch data.
    //
    // Props you can pass into PlasmicHomepage are:
    // 1. Variants you want to activate,
    // 2. Contents for slots you want to fill,
    // 3. Overrides for any named node in the component to attach behavior and data,
    // 4. Props to set on the root node.
    //
    // By default, we are just piping all HomepageProps here, but feel free
    // to do whatever works for you.
  
        return <PlasmicHomepage root={{ref}} {...props} />;
      }

      const Homepage = React.forwardRef(Homepage_);
      export default Homepage;
    
  
--- PlasmicGlobalVariant__Screen.js ---
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
import * as React from "react";
import { createUseScreenVariants } from "@plasmicapp/react-web";
export var ScreenContext = React.createContext("PLEASE_RENDER_INSIDE_PROVIDER");
export function ScreenContextProvider(props) {
    return (React.createElement(ScreenContext.Provider, { value: props.value }, props.children));
}
export var useScreenVariants = createUseScreenVariants(true, {
    "mobileOnly": "(min-width:0px) and (max-width:768px)"
});
export default ScreenContext;
/* prettier-ignore-end */

--- PlasmicGlobalVariant__Screen.tsx ---

    /* eslint-disable */
    /* tslint:disable */
    // @ts-nocheck
    /* prettier-ignore-start */

    

    import * as React from "react";
    import { createUseScreenVariants } from "@plasmicapp/react-web";

    export type ScreenValue = "mobileOnly";
    export const ScreenContext = React.createContext<ScreenValue[] | undefined>("PLEASE_RENDER_INSIDE_PROVIDER" as any);
    export function ScreenContextProvider(props: React.PropsWithChildren<{value: ScreenValue[] | undefined}>) {
      return (
        <ScreenContext.Provider value={props.value}>
          {props.children}
        </ScreenContext.Provider>
      );
    }
    
export const useScreenVariants = createUseScreenVariants(true,{
  "mobileOnly": "(min-width:0px) and (max-width:768px)"
});
    
    export default ScreenContext;
    /* prettier-ignore-end */
  
--- PlasmicGlobalVariant__Theme.js ---
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
import * as React from "react";
export var ThemeContext = React.createContext("PLEASE_RENDER_INSIDE_PROVIDER");
export function ThemeContextProvider(props) {
    return (React.createElement(ThemeContext.Provider, { value: props.value }, props.children));
}
export function useTheme() {
    return React.useContext(ThemeContext);
}
export default ThemeContext;
/* prettier-ignore-end */

--- PlasmicGlobalVariant__Theme.tsx ---

    /* eslint-disable */
    /* tslint:disable */
    // @ts-nocheck
    /* prettier-ignore-start */

    

    import * as React from "react";
    import { createUseScreenVariants } from "@plasmicapp/react-web";

    export type ThemeValue = "dark";
    export const ThemeContext = React.createContext<ThemeValue | undefined>("PLEASE_RENDER_INSIDE_PROVIDER" as any);
    export function ThemeContextProvider(props: React.PropsWithChildren<{value: ThemeValue | undefined}>) {
      return (
        <ThemeContext.Provider value={props.value}>
          {props.children}
        </ThemeContext.Provider>
      );
    }
    
export function useTheme() {
  return React.useContext(ThemeContext);
}
  
    export default ThemeContext;
    /* prettier-ignore-end */
  
--- PlasmicHomepage.js ---
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 1234567890
// Component: lRapkLBf4Fhi
// plasmic-unformatted
import * as React from "react";
import { classNames, createPlasmicElementProxy, deriveRenderOpts, hasVariant, } from "@plasmicapp/react-web";
import { useDataEnv, } from "@plasmicapp/react-web/lib/host";
import DepComp from "./DepComp"; // plasmic-import: u4_D7ezQ-9rk/component
import { _useGlobalVariants } from "./plasmic.tsx"; // plasmic-import: 1234567890/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider.tsx"; // plasmic-import: 1234567890/styleTokensProvider
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: 1234567890/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: lRapkLBf4Fhi/css
createPlasmicElementProxy;
export var PlasmicHomepage__VariantProps = new Array();
export var PlasmicHomepage__ArgProps = new Array();
var $$ = {};
function PlasmicHomepage__RenderFunc(props) {
    var _a;
    var variants = props.variants, overrides = props.overrides, forNode = props.forNode;
    var args = React.useMemo(function () { return Object.assign({}, Object.fromEntries(Object.entries(props.args).filter(function (_a) {
        var _ = _a[0], v = _a[1];
        return v !== undefined;
    }))); }, [props.args]);
    var $props = __assign(__assign({}, args), variants);
    var $ctx = (useDataEnv === null || useDataEnv === void 0 ? void 0 : useDataEnv()) || {};
    var refsRef = React.useRef({});
    var $refs = refsRef.current;
    var globalVariants = _useGlobalVariants();
    var styleTokensClassNames = _useStyleTokens();
    return (createPlasmicElementProxy(React.Fragment, null,
        createPlasmicElementProxy("div", { className: projectcss.plasmic_page_wrapper },
            createPlasmicElementProxy("div", { "data-plasmic-name": "root", "data-plasmic-override": overrides.root, "data-plasmic-root": true, "data-plasmic-for-node": forNode, className: classNames(projectcss.all, projectcss.root_reset, projectcss.plasmic_default_styles, projectcss.plasmic_mixins, styleTokensClassNames, sty.root, (_a = {}, _a[sty.rootglobal_fontSize_large] = hasVariant(globalVariants, "fontSize", "large"), _a)) },
                createPlasmicElementProxy(DepComp, { "data-plasmic-name": "depComp", "data-plasmic-override": overrides.depComp, className: classNames("__wab_instance", sty.depComp) }),
                createPlasmicElementProxy("p", { "data-plasmic-name": "p", "data-plasmic-override": overrides.p, className: classNames(projectcss.all, projectcss.p, projectcss.__wab_text, sty.p) }, "Main text (primary)")))));
}
var PlasmicDescendants = {
    root: ["root", "depComp", "p"],
    depComp: ["depComp"],
    p: ["p"],
};
function makeNodeComponent(nodeName) {
    var func = function (props) {
        var _a = React.useMemo(function () { return deriveRenderOpts(props, {
            name: nodeName,
            descendantNames: PlasmicDescendants[nodeName],
            internalArgPropNames: PlasmicHomepage__ArgProps,
            internalVariantPropNames: PlasmicHomepage__VariantProps,
        }); }, [props, nodeName]), variants = _a.variants, args = _a.args, overrides = _a.overrides;
        return PlasmicHomepage__RenderFunc({ variants: variants, args: args, overrides: overrides, forNode: nodeName });
    };
    if (nodeName === "root") {
        func.displayName = "PlasmicHomepage";
    }
    else {
        func.displayName = "PlasmicHomepage.".concat(nodeName);
    }
    return func;
}
export var PlasmicHomepage = Object.assign(
// Top-level PlasmicHomepage renders the root element
makeNodeComponent("root"), {
    // Helper components rendering sub-elements
    depComp: makeNodeComponent("depComp"),
    p: makeNodeComponent("p"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
        "title": "",
        "description": "",
        "ogImageSrc": "",
        "canonical": ""
    },
});
export default PlasmicHomepage;
/* prettier-ignore-end */

--- PlasmicHomepage.module.css ---
 .root {
          display: grid;
position: relative;
width: 100%;
height: 100%;
align-content: flex-start;
justify-items: center;
min-width: 0;
min-height: 0;
grid-template-columns: var(--plsmc-viewport-gap) 1fr minmax(0, var(--plsmc-wide-chunk)) min(var(--plsmc-standard-width), calc(100% - var(--plsmc-viewport-gap) - var(--plsmc-viewport-gap))) minmax(0, var(--plsmc-wide-chunk)) 1fr var(--plsmc-viewport-gap) ;
padding: 0px;  
      } 
 .root > * {
        grid-column: 4
      } 
 .rootglobal_fontSize_large > * {
        grid-column: 4
      } 
@media (min-width:0px) and (max-width:768px) { .root > * {
        grid-column: 4
      } }
 .depComp:global(.__wab_instance) {
          max-width: 100%;  
      } 
 .p {
          width: 100%;
height: auto;
max-width: 100%;
color: var(--token-3WVVrPp8B-De);
font-size: var(--token-SRpPwIBhWtA_);
min-width: 0;  
      } 
--- PlasmicHomepage.tsx ---

    /* eslint-disable */
    /* tslint:disable */
    // @ts-nocheck
    /* prettier-ignore-start */
    
    /** @jsxRuntime classic */
    /** @jsx createPlasmicElementProxy */
    /** @jsxFrag React.Fragment */
    
    // This class is auto-generated by Plasmic; please do not edit!
    // Plasmic Project: 1234567890
    // Component: lRapkLBf4Fhi
    // plasmic-unformatted

    

    import * as React from "react";
    

    import {
      Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName,
  
    } from  "@plasmicapp/react-web";
    import {
      
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions,
  
    } from "@plasmicapp/react-web/lib/host";
    
    
    
    
    
    import DepComp from "./DepComp";  // plasmic-import: u4_D7ezQ-9rk/component
    import { _useGlobalVariants } from "./plasmic.tsx"; // plasmic-import: 1234567890/projectModule
    import { _useStyleTokens } from "./PlasmicStyleTokensProvider.tsx"; // plasmic-import: 1234567890/styleTokensProvider
    
    import "@plasmicapp/react-web/lib/plasmic.css";
    
    
    import projectcss from "./plasmic.module.css"; // plasmic-import: 1234567890/projectcss
    import sty from "./PlasmicHomepage.module.css" // plasmic-import: lRapkLBf4Fhi/css
  
    
    
    
    
    

    createPlasmicElementProxy

    
    

    
    export type PlasmicHomepage__VariantMembers = {
      
    };
    export type PlasmicHomepage__VariantsArgs = {};
    type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
    export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();
  

    
export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();


    export type PlasmicHomepage__OverridesType = {
    root?: Flex__<"div">;
depComp?: Flex__<typeof DepComp>;
p?: Flex__<"p">;
  };

    
    export interface DefaultHomepageProps {
      
      className?: string;
  }

    

    

    

    const $$ = {};

    

    

    

    
    function PlasmicHomepage__RenderFunc(
      props: {
        variants: PlasmicHomepage__VariantsArgs,
        args: PlasmicHomepage__ArgsType,
        overrides: PlasmicHomepage__OverridesType,
        forNode?: string
      }
    ) {
      
      
      const {variants, overrides, forNode } = props;

      

      const args = React.useMemo(() => Object.assign({
    
  }, Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )),
        [props.args]
      );

      
    const $props = {
      ...args,
      ...variants,
    };

    
    
    const $ctx = useDataEnv?.() || {};
    const refsRef = React.useRef({});
    const $refs = refsRef.current;

    const globalVariants = _useGlobalVariants();

    

    

    
    
    
    

    

    

    
    const styleTokensClassNames = _useStyleTokens();
    
  
      return (
        <React.Fragment>
  

      <div className={projectcss.plasmic_page_wrapper}>
        <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, projectcss.plasmic_default_styles, projectcss.plasmic_mixins, styleTokensClassNames, sty.root, { [sty.rootglobal_fontSize_large]: hasVariant(
      globalVariants,
      "fontSize",
      "large"
    ) })}
      
      >
            <DepComp
      data-plasmic-name={"depComp"}
      data-plasmic-override={overrides.depComp}
      
      
      className={classNames("__wab_instance", sty.depComp)}
      
      />
<p
      data-plasmic-name={"p"}
      data-plasmic-override={overrides.p}
      
      
      className={classNames(projectcss.all, projectcss.p, projectcss.__wab_text, sty.p)}
      
      >
            { "Main text (primary)" }
          </p>
          </div>
      </div>
    
</React.Fragment>
      ) as React.ReactElement | null;
    }

    

    
    const PlasmicDescendants = {
    root: ["root", "depComp", "p"],
depComp: ["depComp"],
p: ["p"],
  } as const;
    type NodeNameType = keyof typeof PlasmicDescendants;
    type DescendantsType<T extends NodeNameType> = (typeof PlasmicDescendants)[T][number];
    type NodeDefaultElementType = {
      root: "div";
depComp: typeof DepComp;
p: "p"
    };
  

    
    type ReservedPropsType = "variants" | "args" | "overrides";
    type NodeOverridesType<T extends NodeNameType> = Pick<PlasmicHomepage__OverridesType, DescendantsType<T>>;
    type NodeComponentProps<T extends NodeNameType> = (
      // Explicitly specify variants, args, and overrides as objects
      & {
        variants?: PlasmicHomepage__VariantsArgs;
        args?: PlasmicHomepage__ArgsType;
        overrides?: NodeOverridesType<T>;
      }
      // Specify variants directly as props
      & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType>
      // Specify args directly as props
      & Omit<PlasmicHomepage__ArgsType, ReservedPropsType>
      // Specify overrides for each element directly as props
      & Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType>
      // Specify props for the root element
      & Omit<Partial<React.ComponentProps<NodeDefaultElementType[T]>>, ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>>
    );
    function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
      type PropsType = NodeComponentProps<NodeName> & {key?: React.Key};
      const func = function<T extends PropsType>(props: T & StrictProps<T, PropsType>) {
        const {variants, args, overrides} = React.useMemo(() => deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps,
        }), [props, nodeName]);
        return PlasmicHomepage__RenderFunc({ variants, args, overrides, forNode: nodeName });
      };
      if (nodeName === "root") {
        func.displayName = "PlasmicHomepage";
      } else {
        func.displayName = \`PlasmicHomepage.\${nodeName}\`;
      }
      return func;
    }

    
    

    export const PlasmicHomepage = Object.assign(
      // Top-level PlasmicHomepage renders the root element
      makeNodeComponent("root"),
      {
        // Helper components rendering sub-elements
        depComp: makeNodeComponent("depComp"),
p: makeNodeComponent("p"),

        // Metadata about props expected for PlasmicHomepage
        internalVariantProps: PlasmicHomepage__VariantProps,
        internalArgProps: PlasmicHomepage__ArgProps,

        

        

        

        
    // Page metadata
    pageMetadata: {
  "title": "",
  "description": "",
  "ogImageSrc": "",
  "canonical": ""
},
  
      }
    );
  

    

    export default PlasmicHomepage;
    /* prettier-ignore-end */
  
--- PlasmicStyleTokensProvider.js ---
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
// This code is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 1234567890
// plasmic-unformatted
import { createUseStyleTokens, createStyleTokensProvider } from "@plasmicapp/react-web";
import { _useGlobalVariants } from "./plasmic.tsx"; // plasmic-import: 1234567890/projectModule
import projectcss from "./plasmic.module.css"; // plasmic-import: 1234567890/projectcss
import plasmic_dep_css from "./plasmic.module.css"; // plasmic-import: iGygRUekJWXZgpf4Konyj4/projectcss
var data = {
    base: "".concat(projectcss.plasmic_tokens, " ").concat(plasmic_dep_css.plasmic_tokens),
    varianted: [
        {
            className: plasmic_dep_css.global_fontSize_large,
            groupName: "fontSize",
            variant: "large",
        },
        {
            className: projectcss.global_theme_dark,
            groupName: "theme",
            variant: "dark",
        }
    ],
};
export var _useStyleTokens = createUseStyleTokens(data, _useGlobalVariants);
export var StyleTokensProvider = createStyleTokensProvider({
    base: "".concat(projectcss.plasmic_tokens_override, " ").concat(data.base),
    varianted: data.varianted
}, _useGlobalVariants);

--- PlasmicStyleTokensProvider.tsx ---

    /* eslint-disable */
    /* tslint:disable */
    // @ts-nocheck
  
    // This code is auto-generated by Plasmic; please do not edit!
    // Plasmic Project: 1234567890
    // plasmic-unformatted
  
    import { createUseStyleTokens, createStyleTokensProvider } from "@plasmicapp/react-web";

    import { _useGlobalVariants } from "./plasmic.tsx"; // plasmic-import: 1234567890/projectModule
  
    import projectcss from "./plasmic.module.css"; // plasmic-import: 1234567890/projectcss

    import plasmic_dep_css from "./plasmic.module.css"; // plasmic-import: iGygRUekJWXZgpf4Konyj4/projectcss
  
    const data = {
    base: \`\${projectcss.plasmic_tokens} \${plasmic_dep_css.plasmic_tokens}\`,
    varianted: [
    {
            className: plasmic_dep_css.global_fontSize_large,
            groupName: "fontSize",
            variant: "large",
          },
{
            className: projectcss.global_theme_dark,
            groupName: "theme",
            variant: "dark",
          }
  ],
  };
  
    export const _useStyleTokens = createUseStyleTokens(
      data,
      _useGlobalVariants,
    );
  
    export const StyleTokensProvider = createStyleTokensProvider(
      { 
    base: \`\${projectcss.plasmic_tokens_override} \${data.base}\`, 
    varianted: data.varianted 
  },
      _useGlobalVariants,
    );
--- global.d.ts ---
declare module '*.module.css' {
  const classes: { readonly [key: string]: string }
  export default classes
}
--- plasmic.js ---
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
// This code is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 1234567890
// plasmic-unformatted
import { createUseGlobalVariants } from "@plasmicapp/react-web";
import { useScreenVariants as useScreenVariantsnfhwiZAfL1RZ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: NfhwiZAfL1rZ/globalVariant
import { useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: AmskLHuaRQYg/globalVariant
import { useFontSize } from "./PlasmicGlobalVariant__FontSize"; // plasmic-import: FnAXTHubXNeo/globalVariant
export var _useGlobalVariants = createUseGlobalVariants({
    screen: useScreenVariantsnfhwiZAfL1RZ,
    theme: useTheme,
    fontSize: useFontSize
});

--- plasmic.module.css ---

      @import url('https://fonts.googleapis.com/css2?family=Inter%3Aital%2Cwght%400%2C400%3B0%2C600%3B0%2C700&family=Inconsolata%3Aital%2Cwght%400%2C400%3B0%2C600%3B0%2C700&display=swap');
      
      
        
        .plasmic_tokens_override.plasmic_tokens_override {
          --token-3WVVrPp8B-De: #0000FF
        }
        

        
        .plasmic_tokens_override.plasmic_tokens_override.global_theme_dark.global_theme_dark {
          --token-3WVVrPp8B-De: #1E1E87
        }
        
      
  .plasmic_tokens {
    --plsmc-standard-width: 800px;
    --plsmc-wide-width: 1280px;
    --plsmc-viewport-gap: 16px;
    --plsmc-wide-chunk: calc(((var(--plsmc-wide-width) - var(--plsmc-standard-width)) / 2) - var(--plsmc-viewport-gap));
  }
    
      
      
        
        .plasmic_default_styles, .plasmic_default_styles:where(.global_theme_dark) {
          --mixin-rnC1eOLSIqFC_font-family: "Inter", sans-serif; --mixin-rnC1eOLSIqFC_font-size: 16px; --mixin-rnC1eOLSIqFC_font-weight: 400; --mixin-rnC1eOLSIqFC_font-style: normal; --mixin-rnC1eOLSIqFC_color: #535353; --mixin-rnC1eOLSIqFC_text-align: left; --mixin-rnC1eOLSIqFC_text-transform: none; --mixin-rnC1eOLSIqFC_line-height: 1.5; --mixin-rnC1eOLSIqFC_letter-spacing: normal; --mixin-rnC1eOLSIqFC_white-space: pre-wrap; --mixin-rnC1eOLSIqFC_user-select: text; --mixin-rnC1eOLSIqFC_text-decoration-line: none; --mixin-rnC1eOLSIqFC_text-overflow: clip; --mixin-UGrPpHBMVY7J_color: #000000; --mixin-UGrPpHBMVY7J_font-weight: 700; --mixin-UGrPpHBMVY7J_font-size: 64px; --mixin-UGrPpHBMVY7J_line-height: 1; --mixin-UGrPpHBMVY7J_letter-spacing: -1px; --mixin-UGrPpHBMVY7J_white-space: pre-wrap; --mixin-VRq1_llgZwB1_color: #000000; --mixin-VRq1_llgZwB1_font-size: 48px; --mixin-VRq1_llgZwB1_font-weight: 700; --mixin-VRq1_llgZwB1_letter-spacing: -0.5px; --mixin-VRq1_llgZwB1_line-height: 1.1; --mixin-VRq1_llgZwB1_white-space: pre-wrap; --mixin-RWGNEf6Kg8Rr_color: #0070f3; --mixin-RWGNEf6Kg8Rr_white-space: pre-wrap; --mixin-SfsSlbfB8eMn_color: #000000; --mixin-SfsSlbfB8eMn_font-size: 32px; --mixin-SfsSlbfB8eMn_font-weight: 600; --mixin-SfsSlbfB8eMn_line-height: 1.2; --mixin-SfsSlbfB8eMn_white-space: pre-wrap; --mixin-H0W5W6mHazE9_color: #000000; --mixin-H0W5W6mHazE9_font-size: 24px; --mixin-H0W5W6mHazE9_font-weight: 600; --mixin-H0W5W6mHazE9_line-height: 1.3; --mixin-H0W5W6mHazE9_white-space: pre-wrap; --mixin-A5JYLsmMDFmm_background: linear-gradient(#f8f8f8, #f8f8f8); --mixin-A5JYLsmMDFmm_border-bottom-color: #dddddd; --mixin-A5JYLsmMDFmm_border-bottom-style: solid; --mixin-A5JYLsmMDFmm_border-bottom-width: 1px; --mixin-A5JYLsmMDFmm_border-left-color: #dddddd; --mixin-A5JYLsmMDFmm_border-left-style: solid; --mixin-A5JYLsmMDFmm_border-left-width: 1px; --mixin-A5JYLsmMDFmm_border-right-color: #dddddd; --mixin-A5JYLsmMDFmm_border-right-style: solid; --mixin-A5JYLsmMDFmm_border-right-width: 1px; --mixin-A5JYLsmMDFmm_border-top-color: #dddddd; --mixin-A5JYLsmMDFmm_border-top-style: solid; --mixin-A5JYLsmMDFmm_border-top-width: 1px; --mixin-A5JYLsmMDFmm_border-bottom-left-radius: 3px; --mixin-A5JYLsmMDFmm_border-bottom-right-radius: 3px; --mixin-A5JYLsmMDFmm_border-top-left-radius: 3px; --mixin-A5JYLsmMDFmm_border-top-right-radius: 3px; --mixin-A5JYLsmMDFmm_font-family: "Inconsolata"; --mixin-A5JYLsmMDFmm_padding-bottom: 1px; --mixin-A5JYLsmMDFmm_padding-left: 4px; --mixin-A5JYLsmMDFmm_padding-right: 4px; --mixin-A5JYLsmMDFmm_padding-top: 1px; --mixin-A5JYLsmMDFmm_white-space: pre-wrap; --mixin-mNvjyqNFa1h2_border-left-color: #dddddd; --mixin-mNvjyqNFa1h2_border-left-style: solid; --mixin-mNvjyqNFa1h2_border-left-width: 3px; --mixin-mNvjyqNFa1h2_color: #888888; --mixin-mNvjyqNFa1h2_padding-left: 10px; --mixin-mNvjyqNFa1h2_white-space: pre-wrap; --mixin-tXUahRGpn8oG_background: linear-gradient(#f8f8f8, #f8f8f8); --mixin-tXUahRGpn8oG_border-bottom-color: #dddddd; --mixin-tXUahRGpn8oG_border-bottom-style: solid; --mixin-tXUahRGpn8oG_border-bottom-width: 1px; --mixin-tXUahRGpn8oG_border-left-color: #dddddd; --mixin-tXUahRGpn8oG_border-left-style: solid; --mixin-tXUahRGpn8oG_border-left-width: 1px; --mixin-tXUahRGpn8oG_border-right-color: #dddddd; --mixin-tXUahRGpn8oG_border-right-style: solid; --mixin-tXUahRGpn8oG_border-right-width: 1px; --mixin-tXUahRGpn8oG_border-top-color: #dddddd; --mixin-tXUahRGpn8oG_border-top-style: solid; --mixin-tXUahRGpn8oG_border-top-width: 1px; --mixin-tXUahRGpn8oG_border-bottom-left-radius: 3px; --mixin-tXUahRGpn8oG_border-bottom-right-radius: 3px; --mixin-tXUahRGpn8oG_border-top-left-radius: 3px; --mixin-tXUahRGpn8oG_border-top-right-radius: 3px; --mixin-tXUahRGpn8oG_font-family: "Inconsolata"; --mixin-tXUahRGpn8oG_padding-bottom: 3px; --mixin-tXUahRGpn8oG_padding-left: 6px; --mixin-tXUahRGpn8oG_padding-right: 6px; --mixin-tXUahRGpn8oG_padding-top: 3px; --mixin-tXUahRGpn8oG_white-space: pre-wrap; --mixin-jZ5QmbJS_cE5_display: flex; --mixin-jZ5QmbJS_cE5_flex-direction: column; --mixin-jZ5QmbJS_cE5_align-items: stretch; --mixin-jZ5QmbJS_cE5_justify-content: flex-start; --mixin-jZ5QmbJS_cE5_list-style-position: outside; --mixin-jZ5QmbJS_cE5_padding-left: 40px; --mixin-jZ5QmbJS_cE5_position: relative; --mixin-jZ5QmbJS_cE5_list-style-type: disc; --mixin-jZ5QmbJS_cE5_white-space: pre-wrap; --mixin-_k0B8b6_K8MI_display: flex; --mixin-_k0B8b6_K8MI_flex-direction: column; --mixin-_k0B8b6_K8MI_align-items: stretch; --mixin-_k0B8b6_K8MI_justify-content: flex-start; --mixin-_k0B8b6_K8MI_list-style-position: outside; --mixin-_k0B8b6_K8MI_padding-left: 40px; --mixin-_k0B8b6_K8MI_position: relative; --mixin-_k0B8b6_K8MI_list-style-type: decimal; --mixin-_k0B8b6_K8MI_white-space: pre-wrap; --mixin-E99KT9Rcd_Pq_color: #000000; --mixin-E99KT9Rcd_Pq_font-size: 20px; --mixin-E99KT9Rcd_Pq_font-weight: 600; --mixin-E99KT9Rcd_Pq_line-height: 1.5; --mixin-E99KT9Rcd_Pq_white-space: pre-wrap; --mixin-c5PTYwS9Oqn0_color: #000000; --mixin-c5PTYwS9Oqn0_font-size: 16px; --mixin-c5PTYwS9Oqn0_font-weight: 600; --mixin-c5PTYwS9Oqn0_line-height: 1.5; --mixin-c5PTYwS9Oqn0_white-space: pre-wrap; --mixin--vPioDGGsgQh_color: #3291ff; --mixin--vPioDGGsgQh_white-space: pre-wrap; --mixin-Fq4RsiDXAoih_white-space: pre-wrap; --mixin-cNb9XeWgYfML_white-space: pre-wrap
        }
        
      
      
        :where(.all) {   display: block;
  white-space: inherit;
  grid-row: auto;
  grid-column: auto;
  position: relative;
  background: none;
  background-size: 100% 100%;
  background-repeat: no-repeat;
  row-gap: 0px;
  column-gap: 0px;
  box-shadow: none;
  box-sizing: border-box;
  text-decoration-line: none;
  margin: 0;
  border-width: 0px; }
        :where(.__wab_expr_html_text *) {   white-space: inherit;
  grid-row: auto;
  grid-column: auto;
  background: none;
  background-size: 100% 100%;
  background-repeat: no-repeat;
  row-gap: 0px;
  column-gap: 0px;
  box-shadow: none;
  box-sizing: border-box;
  margin: 0;
  border-width: 0px; }
      

      :where(.img) {   display: inline-block; }
      :where(.__wab_expr_html_text img) {   white-space: inherit; }
    

      :where(.li) {   display: list-item; }
      :where(.__wab_expr_html_text li) {   white-space: inherit; }
    

      :where(.span) {   display: inline;
  position: static;
  font-family: inherit;
  line-height: inherit;
  font-size: inherit;
  font-style: inherit;
  font-weight: inherit;
  color: inherit;
  text-transform: inherit; }
      :where(.__wab_expr_html_text span) {   white-space: inherit;
  font-family: inherit;
  line-height: inherit;
  font-size: inherit;
  font-style: inherit;
  font-weight: inherit;
  color: inherit;
  text-transform: inherit; }
    

      :where(.input) {   font-family: inherit;
  line-height: inherit;
  font-size: inherit;
  font-style: inherit;
  font-weight: inherit;
  color: inherit;
  text-transform: inherit;
  background-image: linear-gradient(#ffffff, #ffffff);
  padding: 2px;
  border: 1px solid lightgray; }
      :where(.__wab_expr_html_text input) {   white-space: inherit;
  font-family: inherit;
  line-height: inherit;
  font-size: inherit;
  font-style: inherit;
  font-weight: inherit;
  color: inherit;
  text-transform: inherit;
  background-image: linear-gradient(#ffffff, #ffffff);
  padding: 2px;
  border: 1px solid lightgray; }
    

      :where(.textarea) {   font-family: inherit;
  line-height: inherit;
  font-size: inherit;
  font-style: inherit;
  font-weight: inherit;
  color: inherit;
  text-transform: inherit;
  padding: 2px;
  border: 1px solid lightgray; }
      :where(.__wab_expr_html_text textarea) {   white-space: inherit;
  font-family: inherit;
  line-height: inherit;
  font-size: inherit;
  font-style: inherit;
  font-weight: inherit;
  color: inherit;
  text-transform: inherit;
  padding: 2px;
  border: 1px solid lightgray; }
    

      :where(.button) {   font-family: inherit;
  line-height: inherit;
  font-size: inherit;
  font-style: inherit;
  font-weight: inherit;
  color: inherit;
  text-transform: inherit;
  background-image: none;
  align-items: flex-start;
  text-align: center;
  padding: 2px 6px;
  border: 1px solid lightgray; }
      :where(.__wab_expr_html_text button) {   white-space: inherit;
  font-family: inherit;
  line-height: inherit;
  font-size: inherit;
  font-style: inherit;
  font-weight: inherit;
  color: inherit;
  text-transform: inherit;
  background-image: none;
  align-items: flex-start;
  text-align: center;
  padding: 2px 6px;
  border: 1px solid lightgray; }
    

      :where(.code) {   font-family: inherit;
  line-height: inherit; }
      :where(.__wab_expr_html_text code) {   white-space: inherit;
  font-family: inherit;
  line-height: inherit; }
    

      :where(.pre) {   font-family: inherit;
  line-height: inherit; }
      :where(.__wab_expr_html_text pre) {   white-space: inherit;
  font-family: inherit;
  line-height: inherit; }
    

      :where(.p) {   font-family: inherit;
  line-height: inherit;
  font-size: inherit;
  font-style: inherit;
  font-weight: inherit;
  color: inherit;
  text-transform: inherit; }
      :where(.__wab_expr_html_text p) {   white-space: inherit;
  font-family: inherit;
  line-height: inherit;
  font-size: inherit;
  font-style: inherit;
  font-weight: inherit;
  color: inherit;
  text-transform: inherit; }
    

      :where(.h1) {   font-size: inherit;
  font-weight: inherit; }
      :where(.__wab_expr_html_text h1) {   white-space: inherit;
  font-size: inherit;
  font-weight: inherit; }
    

      :where(.h2) {   font-size: inherit;
  font-weight: inherit; }
      :where(.__wab_expr_html_text h2) {   white-space: inherit;
  font-size: inherit;
  font-weight: inherit; }
    

      :where(.h3) {   font-size: inherit;
  font-weight: inherit; }
      :where(.__wab_expr_html_text h3) {   white-space: inherit;
  font-size: inherit;
  font-weight: inherit; }
    

      :where(.h4) {   font-size: inherit;
  font-weight: inherit; }
      :where(.__wab_expr_html_text h4) {   white-space: inherit;
  font-size: inherit;
  font-weight: inherit; }
    

      :where(.h5) {   font-size: inherit;
  font-weight: inherit; }
      :where(.__wab_expr_html_text h5) {   white-space: inherit;
  font-size: inherit;
  font-weight: inherit; }
    

      :where(.h6) {   font-size: inherit;
  font-weight: inherit; }
      :where(.__wab_expr_html_text h6) {   white-space: inherit;
  font-size: inherit;
  font-weight: inherit; }
    

      :where(.address) {   font-style: inherit; }
      :where(.__wab_expr_html_text address) {   white-space: inherit;
  font-style: inherit; }
    

      :where(.a) {   color: inherit; }
      :where(.__wab_expr_html_text a) {   white-space: inherit;
  color: inherit; }
    

      :where(.ol) {   list-style-type: none;
  padding: 0; }
      :where(.__wab_expr_html_text ol) {   white-space: inherit;
  list-style-type: none;
  padding: 0; }
    

      :where(.ul) {   list-style-type: none;
  padding: 0; }
      :where(.__wab_expr_html_text ul) {   white-space: inherit;
  list-style-type: none;
  padding: 0; }
    

      :where(.select) {   padding: 2px 6px; }
      :where(.__wab_expr_html_text select) {   white-space: inherit;
  padding: 2px 6px; }
    
.plasmic_default__component_wrapper { display: grid; }
.plasmic_default__inline { display: inline; }
.plasmic_page_wrapper { display: flex; width: 100%; min-height: 100vh; align-items: stretch; align-self: start;}
.plasmic_page_wrapper > * { height: auto !important; }
.__wab_expr_html_text { white-space: normal; }
      :where(.root_reset) {
      font-family: var(--mixin-rnC1eOLSIqFC_font-family);
font-size: var(--mixin-rnC1eOLSIqFC_font-size);
font-weight: var(--mixin-rnC1eOLSIqFC_font-weight);
font-style: var(--mixin-rnC1eOLSIqFC_font-style);
color: var(--mixin-rnC1eOLSIqFC_color);
text-align: var(--mixin-rnC1eOLSIqFC_text-align);
text-transform: var(--mixin-rnC1eOLSIqFC_text-transform);
line-height: var(--mixin-rnC1eOLSIqFC_line-height);
letter-spacing: var(--mixin-rnC1eOLSIqFC_letter-spacing);
white-space: var(--mixin-rnC1eOLSIqFC_white-space);  
  }
      
    :where(.root_reset) h1:where(.h1), h1:where(.root_reset.h1), :where(.root_reset .__wab_expr_html_text) h1, :where(.root_reset_tags) h1, h1:where(.root_reset_tags) {
        color: var(--mixin-UGrPpHBMVY7J_color);
font-weight: var(--mixin-UGrPpHBMVY7J_font-weight);
font-size: var(--mixin-UGrPpHBMVY7J_font-size);
line-height: var(--mixin-UGrPpHBMVY7J_line-height);
letter-spacing: var(--mixin-UGrPpHBMVY7J_letter-spacing);  
    }
  

    :where(.root_reset) h2:where(.h2), h2:where(.root_reset.h2), :where(.root_reset .__wab_expr_html_text) h2, :where(.root_reset_tags) h2, h2:where(.root_reset_tags) {
        color: var(--mixin-VRq1_llgZwB1_color);
font-size: var(--mixin-VRq1_llgZwB1_font-size);
font-weight: var(--mixin-VRq1_llgZwB1_font-weight);
letter-spacing: var(--mixin-VRq1_llgZwB1_letter-spacing);
line-height: var(--mixin-VRq1_llgZwB1_line-height);  
    }
  

    :where(.root_reset) a:where(.a), a:where(.root_reset.a), :where(.root_reset .__wab_expr_html_text) a, :where(.root_reset_tags) a, a:where(.root_reset_tags) {
        color: var(--mixin-RWGNEf6Kg8Rr_color);  
    }
  

    :where(.root_reset) h3:where(.h3), h3:where(.root_reset.h3), :where(.root_reset .__wab_expr_html_text) h3, :where(.root_reset_tags) h3, h3:where(.root_reset_tags) {
        color: var(--mixin-SfsSlbfB8eMn_color);
font-size: var(--mixin-SfsSlbfB8eMn_font-size);
font-weight: var(--mixin-SfsSlbfB8eMn_font-weight);
line-height: var(--mixin-SfsSlbfB8eMn_line-height);  
    }
  

    :where(.root_reset) h4:where(.h4), h4:where(.root_reset.h4), :where(.root_reset .__wab_expr_html_text) h4, :where(.root_reset_tags) h4, h4:where(.root_reset_tags) {
        color: var(--mixin-H0W5W6mHazE9_color);
font-size: var(--mixin-H0W5W6mHazE9_font-size);
font-weight: var(--mixin-H0W5W6mHazE9_font-weight);
line-height: var(--mixin-H0W5W6mHazE9_line-height);  
    }
  

    :where(.root_reset) code:where(.code), code:where(.root_reset.code), :where(.root_reset .__wab_expr_html_text) code, :where(.root_reset_tags) code, code:where(.root_reset_tags) {
        background: #f8f8f8;
font-family: var(--mixin-A5JYLsmMDFmm_font-family);
border-radius: var(--mixin-A5JYLsmMDFmm_border-top-left-radius) var(--mixin-A5JYLsmMDFmm_border-top-right-radius) var(--mixin-A5JYLsmMDFmm_border-bottom-right-radius) var(--mixin-A5JYLsmMDFmm_border-bottom-left-radius);
padding: var(--mixin-A5JYLsmMDFmm_padding-top) var(--mixin-A5JYLsmMDFmm_padding-right) var(--mixin-A5JYLsmMDFmm_padding-bottom) var(--mixin-A5JYLsmMDFmm_padding-left);
border-top: var(--mixin-A5JYLsmMDFmm_border-top-width) var(--mixin-A5JYLsmMDFmm_border-top-style) var(--mixin-A5JYLsmMDFmm_border-top-color);
border-right: var(--mixin-A5JYLsmMDFmm_border-right-width) var(--mixin-A5JYLsmMDFmm_border-right-style) var(--mixin-A5JYLsmMDFmm_border-right-color);
border-bottom: var(--mixin-A5JYLsmMDFmm_border-bottom-width) var(--mixin-A5JYLsmMDFmm_border-bottom-style) var(--mixin-A5JYLsmMDFmm_border-bottom-color);
border-left: var(--mixin-A5JYLsmMDFmm_border-left-width) var(--mixin-A5JYLsmMDFmm_border-left-style) var(--mixin-A5JYLsmMDFmm_border-left-color);  
    }
  

    :where(.root_reset) blockquote:where(.blockquote), blockquote:where(.root_reset.blockquote), :where(.root_reset .__wab_expr_html_text) blockquote, :where(.root_reset_tags) blockquote, blockquote:where(.root_reset_tags) {
        color: var(--mixin-mNvjyqNFa1h2_color);
padding-left: var(--mixin-mNvjyqNFa1h2_padding-left);
border-left: var(--mixin-mNvjyqNFa1h2_border-left-width) var(--mixin-mNvjyqNFa1h2_border-left-style) var(--mixin-mNvjyqNFa1h2_border-left-color);  
    }
  

    :where(.root_reset) pre:where(.pre), pre:where(.root_reset.pre), :where(.root_reset .__wab_expr_html_text) pre, :where(.root_reset_tags) pre, pre:where(.root_reset_tags) {
        background: #f8f8f8;
font-family: var(--mixin-tXUahRGpn8oG_font-family);
border-radius: var(--mixin-tXUahRGpn8oG_border-top-left-radius) var(--mixin-tXUahRGpn8oG_border-top-right-radius) var(--mixin-tXUahRGpn8oG_border-bottom-right-radius) var(--mixin-tXUahRGpn8oG_border-bottom-left-radius);
padding: var(--mixin-tXUahRGpn8oG_padding-top) var(--mixin-tXUahRGpn8oG_padding-right) var(--mixin-tXUahRGpn8oG_padding-bottom) var(--mixin-tXUahRGpn8oG_padding-left);
border-top: var(--mixin-tXUahRGpn8oG_border-top-width) var(--mixin-tXUahRGpn8oG_border-top-style) var(--mixin-tXUahRGpn8oG_border-top-color);
border-right: var(--mixin-tXUahRGpn8oG_border-right-width) var(--mixin-tXUahRGpn8oG_border-right-style) var(--mixin-tXUahRGpn8oG_border-right-color);
border-bottom: var(--mixin-tXUahRGpn8oG_border-bottom-width) var(--mixin-tXUahRGpn8oG_border-bottom-style) var(--mixin-tXUahRGpn8oG_border-bottom-color);
border-left: var(--mixin-tXUahRGpn8oG_border-left-width) var(--mixin-tXUahRGpn8oG_border-left-style) var(--mixin-tXUahRGpn8oG_border-left-color);  
    }
  

    :where(.root_reset) ul:where(.ul), ul:where(.root_reset.ul), :where(.root_reset .__wab_expr_html_text) ul, :where(.root_reset_tags) ul, ul:where(.root_reset_tags) {
        display: var(--mixin-jZ5QmbJS_cE5_display);
flex-direction: var(--mixin-jZ5QmbJS_cE5_flex-direction);
align-items: var(--mixin-jZ5QmbJS_cE5_align-items);
justify-content: var(--mixin-jZ5QmbJS_cE5_justify-content);
list-style-position: var(--mixin-jZ5QmbJS_cE5_list-style-position);
padding-left: var(--mixin-jZ5QmbJS_cE5_padding-left);
position: var(--mixin-jZ5QmbJS_cE5_position);
list-style-type: var(--mixin-jZ5QmbJS_cE5_list-style-type);
column-gap: var(--mixin-jZ5QmbJS_cE5_column-gap);  
    }
  

    :where(.root_reset) ol:where(.ol), ol:where(.root_reset.ol), :where(.root_reset .__wab_expr_html_text) ol, :where(.root_reset_tags) ol, ol:where(.root_reset_tags) {
        display: var(--mixin-_k0B8b6_K8MI_display);
flex-direction: var(--mixin-_k0B8b6_K8MI_flex-direction);
align-items: var(--mixin-_k0B8b6_K8MI_align-items);
justify-content: var(--mixin-_k0B8b6_K8MI_justify-content);
list-style-position: var(--mixin-_k0B8b6_K8MI_list-style-position);
padding-left: var(--mixin-_k0B8b6_K8MI_padding-left);
position: var(--mixin-_k0B8b6_K8MI_position);
list-style-type: var(--mixin-_k0B8b6_K8MI_list-style-type);
column-gap: var(--mixin-_k0B8b6_K8MI_column-gap);  
    }
  

    :where(.root_reset) h5:where(.h5), h5:where(.root_reset.h5), :where(.root_reset .__wab_expr_html_text) h5, :where(.root_reset_tags) h5, h5:where(.root_reset_tags) {
        color: var(--mixin-E99KT9Rcd_Pq_color);
font-size: var(--mixin-E99KT9Rcd_Pq_font-size);
font-weight: var(--mixin-E99KT9Rcd_Pq_font-weight);
line-height: var(--mixin-E99KT9Rcd_Pq_line-height);  
    }
  

    :where(.root_reset) h6:where(.h6), h6:where(.root_reset.h6), :where(.root_reset .__wab_expr_html_text) h6, :where(.root_reset_tags) h6, h6:where(.root_reset_tags) {
        color: var(--mixin-c5PTYwS9Oqn0_color);
font-size: var(--mixin-c5PTYwS9Oqn0_font-size);
font-weight: var(--mixin-c5PTYwS9Oqn0_font-weight);
line-height: var(--mixin-c5PTYwS9Oqn0_line-height);  
    }
  

    :where(.root_reset) a:where(.a):hover, a:where(.root_reset.a):hover, :where(.root_reset .__wab_expr_html_text) a:hover, :where(.root_reset_tags) a:hover, a:where(.root_reset_tags):hover {
        color: var(--mixin--vPioDGGsgQh_color);  
    }
  

    :where(.root_reset) li:where(.li), li:where(.root_reset.li), :where(.root_reset .__wab_expr_html_text) li, :where(.root_reset_tags) li, li:where(.root_reset_tags) {
      
    }
  

    :where(.root_reset) p:where(.p), p:where(.root_reset.p), :where(.root_reset .__wab_expr_html_text) p, :where(.root_reset_tags) p, p:where(.root_reset_tags) {
      
    }
  
    
--- plasmic.tsx ---

    /* eslint-disable */
    /* tslint:disable */
    // @ts-nocheck
  
    // This code is auto-generated by Plasmic; please do not edit!
    // Plasmic Project: 1234567890
    // plasmic-unformatted
  
    import { createUseGlobalVariants } from "@plasmicapp/react-web";
    
          import {useScreenVariants as useScreenVariantsnfhwiZAfL1RZ} from "./PlasmicGlobalVariant__Screen";  // plasmic-import: NfhwiZAfL1rZ/globalVariant
import {ThemeValue, useTheme} from "./PlasmicGlobalVariant__Theme";  // plasmic-import: AmskLHuaRQYg/globalVariant
import {FontSizeValue, useFontSize} from "./PlasmicGlobalVariant__FontSize";  // plasmic-import: FnAXTHubXNeo/globalVariant
        
  
    
  export const _useGlobalVariants = createUseGlobalVariants({
    screen: useScreenVariantsnfhwiZAfL1RZ,
theme: useTheme,
fontSize: useFontSize
  });

  
--- plasmic__default_style.module.css ---

        :where(.all) {   display: block;
  white-space: inherit;
  grid-row: auto;
  grid-column: auto;
  position: relative;
  background: none;
  background-size: 100% 100%;
  background-repeat: no-repeat;
  row-gap: 0px;
  column-gap: 0px;
  box-shadow: none;
  box-sizing: border-box;
  text-decoration-line: none;
  margin: 0;
  border-width: 0px; }
        :where(.__wab_expr_html_text *) {   white-space: inherit;
  grid-row: auto;
  grid-column: auto;
  background: none;
  background-size: 100% 100%;
  background-repeat: no-repeat;
  row-gap: 0px;
  column-gap: 0px;
  box-shadow: none;
  box-sizing: border-box;
  margin: 0;
  border-width: 0px; }
      

      :where(.img) {   display: inline-block; }
      :where(.__wab_expr_html_text img) {   white-space: inherit; }
    

      :where(.li) {   display: list-item; }
      :where(.__wab_expr_html_text li) {   white-space: inherit; }
    

      :where(.span) {   display: inline;
  position: static;
  font-family: inherit;
  line-height: inherit;
  font-size: inherit;
  font-style: inherit;
  font-weight: inherit;
  color: inherit;
  text-transform: inherit; }
      :where(.__wab_expr_html_text span) {   white-space: inherit;
  font-family: inherit;
  line-height: inherit;
  font-size: inherit;
  font-style: inherit;
  font-weight: inherit;
  color: inherit;
  text-transform: inherit; }
    

      :where(.input) {   font-family: inherit;
  line-height: inherit;
  font-size: inherit;
  font-style: inherit;
  font-weight: inherit;
  color: inherit;
  text-transform: inherit;
  background-image: linear-gradient(#ffffff, #ffffff);
  padding: 2px;
  border: 1px solid lightgray; }
      :where(.__wab_expr_html_text input) {   white-space: inherit;
  font-family: inherit;
  line-height: inherit;
  font-size: inherit;
  font-style: inherit;
  font-weight: inherit;
  color: inherit;
  text-transform: inherit;
  background-image: linear-gradient(#ffffff, #ffffff);
  padding: 2px;
  border: 1px solid lightgray; }
    

      :where(.textarea) {   font-family: inherit;
  line-height: inherit;
  font-size: inherit;
  font-style: inherit;
  font-weight: inherit;
  color: inherit;
  text-transform: inherit;
  padding: 2px;
  border: 1px solid lightgray; }
      :where(.__wab_expr_html_text textarea) {   white-space: inherit;
  font-family: inherit;
  line-height: inherit;
  font-size: inherit;
  font-style: inherit;
  font-weight: inherit;
  color: inherit;
  text-transform: inherit;
  padding: 2px;
  border: 1px solid lightgray; }
    

      :where(.button) {   font-family: inherit;
  line-height: inherit;
  font-size: inherit;
  font-style: inherit;
  font-weight: inherit;
  color: inherit;
  text-transform: inherit;
  background-image: none;
  align-items: flex-start;
  text-align: center;
  padding: 2px 6px;
  border: 1px solid lightgray; }
      :where(.__wab_expr_html_text button) {   white-space: inherit;
  font-family: inherit;
  line-height: inherit;
  font-size: inherit;
  font-style: inherit;
  font-weight: inherit;
  color: inherit;
  text-transform: inherit;
  background-image: none;
  align-items: flex-start;
  text-align: center;
  padding: 2px 6px;
  border: 1px solid lightgray; }
    

      :where(.code) {   font-family: inherit;
  line-height: inherit; }
      :where(.__wab_expr_html_text code) {   white-space: inherit;
  font-family: inherit;
  line-height: inherit; }
    

      :where(.pre) {   font-family: inherit;
  line-height: inherit; }
      :where(.__wab_expr_html_text pre) {   white-space: inherit;
  font-family: inherit;
  line-height: inherit; }
    

      :where(.p) {   font-family: inherit;
  line-height: inherit;
  font-size: inherit;
  font-style: inherit;
  font-weight: inherit;
  color: inherit;
  text-transform: inherit; }
      :where(.__wab_expr_html_text p) {   white-space: inherit;
  font-family: inherit;
  line-height: inherit;
  font-size: inherit;
  font-style: inherit;
  font-weight: inherit;
  color: inherit;
  text-transform: inherit; }
    

      :where(.h1) {   font-size: inherit;
  font-weight: inherit; }
      :where(.__wab_expr_html_text h1) {   white-space: inherit;
  font-size: inherit;
  font-weight: inherit; }
    

      :where(.h2) {   font-size: inherit;
  font-weight: inherit; }
      :where(.__wab_expr_html_text h2) {   white-space: inherit;
  font-size: inherit;
  font-weight: inherit; }
    

      :where(.h3) {   font-size: inherit;
  font-weight: inherit; }
      :where(.__wab_expr_html_text h3) {   white-space: inherit;
  font-size: inherit;
  font-weight: inherit; }
    

      :where(.h4) {   font-size: inherit;
  font-weight: inherit; }
      :where(.__wab_expr_html_text h4) {   white-space: inherit;
  font-size: inherit;
  font-weight: inherit; }
    

      :where(.h5) {   font-size: inherit;
  font-weight: inherit; }
      :where(.__wab_expr_html_text h5) {   white-space: inherit;
  font-size: inherit;
  font-weight: inherit; }
    

      :where(.h6) {   font-size: inherit;
  font-weight: inherit; }
      :where(.__wab_expr_html_text h6) {   white-space: inherit;
  font-size: inherit;
  font-weight: inherit; }
    

      :where(.address) {   font-style: inherit; }
      :where(.__wab_expr_html_text address) {   white-space: inherit;
  font-style: inherit; }
    

      :where(.a) {   color: inherit; }
      :where(.__wab_expr_html_text a) {   white-space: inherit;
  color: inherit; }
    

      :where(.ol) {   list-style-type: none;
  padding: 0; }
      :where(.__wab_expr_html_text ol) {   white-space: inherit;
  list-style-type: none;
  padding: 0; }
    

      :where(.ul) {   list-style-type: none;
  padding: 0; }
      :where(.__wab_expr_html_text ul) {   white-space: inherit;
  list-style-type: none;
  padding: 0; }
    

      :where(.select) {   padding: 2px 6px; }
      :where(.__wab_expr_html_text select) {   white-space: inherit;
  padding: 2px 6px; }
    
.plasmic_default__component_wrapper { display: grid; }
.plasmic_default__inline { display: inline; }
.plasmic_page_wrapper { display: flex; width: 100%; min-height: 100vh; align-items: stretch; align-self: start;}
.plasmic_page_wrapper > * { height: auto !important; }
.__wab_expr_html_text { white-space: normal; }
--- tsconfig.json ---
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "jsx": "react",
    "module": "esnext",
    "moduleResolution": "node",
    "skipLibCheck": true,
    "allowSyntheticDefaultImports": true,
    "strict": true
  }
}"
`;
